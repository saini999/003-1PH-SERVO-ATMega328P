
C:\Users\Noor\AppData\Local\Temp\arduino-sketch-B0A5A102D40E8B2FE7F0FD35B313F14B/003-1PH-SERVO-ATMega328P.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
       8:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
       c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      10:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      14:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      18:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      1c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      20:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      24:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      28:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      2c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      30:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      34:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      38:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      3c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      40:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__vector_16>
      44:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      48:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      4c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      50:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      54:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      58:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      5c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      60:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      64:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	7e 30       	cpi	r23, 0x0E	; 14
      6a:	6d 79       	andi	r22, 0x9D	; 157
      6c:	33 5b       	subi	r19, 0xB3	; 179
      6e:	5f 70       	andi	r21, 0x0F	; 15
      70:	7f 7b       	andi	r23, 0xBF	; 191
      72:	77 1f       	adc	r23, r23
      74:	4e 3d       	cpi	r20, 0xDE	; 222
      76:	4f 47       	sbci	r20, 0x7F	; 127
	...
      88:	00 00       	nop
      8a:	22 00       	.word	0x0022	; ????
      8c:	00 00       	nop
      8e:	00 20       	and	r0, r0
      90:	4e 78       	andi	r20, 0x8E	; 142
      92:	00 00       	nop
      94:	04 01       	movw	r0, r8
      96:	00 00       	nop
      98:	7e 30       	cpi	r23, 0x0E	; 14
      9a:	6d 79       	andi	r22, 0x9D	; 157
      9c:	33 5b       	subi	r19, 0xB3	; 179
      9e:	5f 70       	andi	r21, 0x0F	; 15
      a0:	7f 7b       	andi	r23, 0xBF	; 191
      a2:	00 00       	nop
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 77       	andi	r16, 0x70	; 112
      aa:	1f 4e       	sbci	r17, 0xEF	; 239
      ac:	3d 4f       	sbci	r19, 0xFD	; 253
      ae:	47 5e       	subi	r20, 0xE7	; 231
      b0:	37 30       	cpi	r19, 0x07	; 7
      b2:	38 00       	.word	0x0038	; ????
      b4:	0e 00       	.word	0x000e	; ????
      b6:	15 7e       	andi	r17, 0xE5	; 229
      b8:	67 73       	andi	r22, 0x37	; 55
      ba:	05 5b       	subi	r16, 0xB5	; 181
      bc:	0f 3e       	cpi	r16, 0xEF	; 239
      be:	00 00       	nop
      c0:	00 3b       	cpi	r16, 0xB0	; 176
      c2:	00 4e       	sbci	r16, 0xE0	; 224
      c4:	00 78       	andi	r16, 0x80	; 128
      c6:	00 08       	sbc	r0, r0
      c8:	02 77       	andi	r16, 0x72	; 114
      ca:	1f 0d       	add	r17, r15
      cc:	3d 6f       	ori	r19, 0xFD	; 253
      ce:	47 5e       	subi	r20, 0xE7	; 231
      d0:	17 10       	cpse	r1, r7
      d2:	38 00       	.word	0x0038	; ????
      d4:	30 00       	.word	0x0030	; ????
      d6:	15 1d       	adc	r17, r5
      d8:	67 73       	andi	r22, 0x37	; 55
      da:	05 5b       	subi	r16, 0xB5	; 181
      dc:	0f 1c       	adc	r0, r15
	...

000000e8 <digital_pin_to_timer_PGM>:
      e8:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
      f8:	00 00 00 00 00 00 00                                .......

000000ff <digital_pin_to_bit_mask_PGM>:
      ff:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     10f:	04 08 10 20 40 80 40                                ... @.@

00000116 <digital_pin_to_port_PGM>:
     116:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     126:	03 03 03 03 02 02 03                                .......

0000012d <port_to_input_PGM>:
     12d:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000137 <port_to_output_PGM>:
     137:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000141 <port_to_mode_PGM>:
     141:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

0000014c <__ctors_start>:
__ctors_start():
     14c:	1e 08       	sbc	r1, r14

0000014e <__ctors_end>:
__dtors_end():
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf ef       	ldi	r28, 0xFF	; 255
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     15a:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     15c:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     15e:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     160:	e2 ee       	ldi	r30, 0xE2	; 226
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     162:	fb e2       	ldi	r31, 0x2B	; 43
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     166:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     168:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     16a:	ac 35       	cpi	r26, 0x5C	; 92
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     16c:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     170:	22 e0       	ldi	r18, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     172:	ac e5       	ldi	r26, 0x5C	; 92
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     174:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     17a:	a8 33       	cpi	r26, 0x38	; 56
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     17c:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>

00000180 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     180:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     182:	c7 ea       	ldi	r28, 0xA7	; 167
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     184:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     186:	04 c0       	rjmp	.+8      	; 0x190 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     188:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     18a:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     18c:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     190:	c6 3a       	cpi	r28, 0xA6	; 166
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     192:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     194:	c9 f7       	brne	.-14     	; 0x188 <__do_global_ctors+0x8>
     196:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <main>
     19a:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <_exit>

0000019e <__bad_interrupt>:
__vector_22():
     19e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>:
_ZN11EEPROMClass6updateEih():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
     1a2:	1f 93       	push	r17
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	ec 01       	movw	r28, r24
     1aa:	16 2f       	mov	r17, r22
_ZNK5EERefdeEv():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     1ac:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <eeprom_read_byte>
_ZN5EERef6updateEh():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     1b0:	18 17       	cp	r17, r24
     1b2:	39 f0       	breq	.+14     	; 0x1c2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]+0x20>
_ZN5EERefaSEh():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     1b4:	61 2f       	mov	r22, r17
     1b6:	ce 01       	movw	r24, r28
_ZN11EEPROMClass6updateEih():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
     1b8:	df 91       	pop	r29
     1ba:	cf 91       	pop	r28
     1bc:	1f 91       	pop	r17
_ZN5EERefaSEh():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     1be:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <eeprom_write_byte>
_ZN11EEPROMClass6updateEih():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	1f 91       	pop	r17
     1c8:	08 95       	ret

000001ca <EEPROMClass::read(int) [clone .isra.1]>:
_ZNK5EERefdeEv():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     1ca:	0c 94 a2 15 	jmp	0x2b44	; 0x2b44 <eeprom_read_byte>

000001ce <IV()>:
_Z2IVv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:312
  }
}


int IV() {
  return analogRead(inVolt);
     1ce:	8e e0       	ldi	r24, 0x0E	; 14
     1d0:	0c 94 8b 0e 	jmp	0x1d16	; 0x1d16 <analogRead>

000001d4 <inputVok()>:
_Z8inputVokv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:175
    switched = false;
  }
  */
}
bool inputVok() {
  if(IV() > ILV && IV() < IHV){
     1d4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <IV()>
     1d8:	20 91 b7 01 	lds	r18, 0x01B7	; 0x8001b7 <ILV>
     1dc:	30 91 b8 01 	lds	r19, 0x01B8	; 0x8001b8 <ILV+0x1>
     1e0:	28 17       	cp	r18, r24
     1e2:	39 07       	cpc	r19, r25
     1e4:	54 f4       	brge	.+20     	; 0x1fa <inputVok()+0x26>
     1e6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <IV()>
     1ea:	21 e0       	ldi	r18, 0x01	; 1
     1ec:	40 91 b9 01 	lds	r20, 0x01B9	; 0x8001b9 <IHV>
     1f0:	50 91 ba 01 	lds	r21, 0x01BA	; 0x8001ba <IHV+0x1>
     1f4:	84 17       	cp	r24, r20
     1f6:	95 07       	cpc	r25, r21
     1f8:	0c f0       	brlt	.+2      	; 0x1fc <inputVok()+0x28>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:178
    return true;
  } else {
    return false;
     1fa:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:180
  }
}
     1fc:	82 2f       	mov	r24, r18
     1fe:	08 95       	ret

00000200 <OV()>:
_Z2OVv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:316
int IV() {
  return analogRead(inVolt);
}

int OV() {
  return analogRead(outVolt);
     200:	8f e0       	ldi	r24, 0x0F	; 15
     202:	0c 94 8b 0e 	jmp	0x1d16	; 0x1d16 <analogRead>

00000206 <outputVok()>:
_Z9outputVokv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:182
  } else {
    return false;
  }
}
bool outputVok() {
  if(OV() > OLV && OV() < OHV){
     206:	0e 94 00 01 	call	0x200	; 0x200 <OV()>
     20a:	20 91 b3 01 	lds	r18, 0x01B3	; 0x8001b3 <OLV>
     20e:	30 91 b4 01 	lds	r19, 0x01B4	; 0x8001b4 <OLV+0x1>
     212:	28 17       	cp	r18, r24
     214:	39 07       	cpc	r19, r25
     216:	54 f4       	brge	.+20     	; 0x22c <outputVok()+0x26>
     218:	0e 94 00 01 	call	0x200	; 0x200 <OV()>
     21c:	21 e0       	ldi	r18, 0x01	; 1
     21e:	40 91 b5 01 	lds	r20, 0x01B5	; 0x8001b5 <OHV>
     222:	50 91 b6 01 	lds	r21, 0x01B6	; 0x8001b6 <OHV+0x1>
     226:	84 17       	cp	r24, r20
     228:	95 07       	cpc	r25, r21
     22a:	0c f0       	brlt	.+2      	; 0x22e <outputVok()+0x28>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:185
    return true;
  } else {
    return false;
     22c:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:187
  }
}
     22e:	82 2f       	mov	r24, r18
     230:	08 95       	ret

00000232 <diffcheck()>:
_Z9diffcheckv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:196
  } else {
    return false;
  }
}

bool diffcheck() {
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:197
  int dif = SETV - OV();
     236:	c0 91 b1 01 	lds	r28, 0x01B1	; 0x8001b1 <SETV>
     23a:	d0 91 b2 01 	lds	r29, 0x01B2	; 0x8001b2 <SETV+0x1>
     23e:	0e 94 00 01 	call	0x200	; 0x200 <OV()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:201
  if(dif < 0){
    dif = dif * -1;
  }
  if(dif > DIFF){
     242:	c8 1b       	sub	r28, r24
     244:	d9 0b       	sbc	r29, r25
     246:	d7 ff       	sbrs	r29, 7
     248:	03 c0       	rjmp	.+6      	; 0x250 <diffcheck()+0x1e>
     24a:	d1 95       	neg	r29
     24c:	c1 95       	neg	r28
     24e:	d1 09       	sbc	r29, r1
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	40 91 a9 01 	lds	r20, 0x01A9	; 0x8001a9 <DIFF>
     256:	50 91 aa 01 	lds	r21, 0x01AA	; 0x8001aa <DIFF+0x1>
     25a:	4c 17       	cp	r20, r28
     25c:	5d 07       	cpc	r21, r29
     25e:	0c f0       	brlt	.+2      	; 0x262 <diffcheck()+0x30>
     260:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:206
    return true;
  } else {
    return false;
  }
}
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	08 95       	ret

00000268 <amp()>:
_Z3ampv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:320
int OV() {
  return analogRead(outVolt);
}

int amp() {
  return analogRead(current);
     268:	80 e1       	ldi	r24, 0x10	; 16
     26a:	0c 94 8b 0e 	jmp	0x1d16	; 0x1d16 <analogRead>

0000026e <currentok()>:
_Z9currentokv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:189
  } else {
    return false;
  }
}
bool currentok() {
  if(amp() < OVL){
     26e:	0e 94 34 01 	call	0x268	; 0x268 <amp()>
     272:	21 e0       	ldi	r18, 0x01	; 1
     274:	40 91 af 01 	lds	r20, 0x01AF	; 0x8001af <OVL>
     278:	50 91 b0 01 	lds	r21, 0x01B0	; 0x8001b0 <OVL+0x1>
     27c:	84 17       	cp	r24, r20
     27e:	95 07       	cpc	r25, r21
     280:	0c f0       	brlt	.+2      	; 0x284 <currentok()+0x16>
     282:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:194
    return true;
  } else {
    return false;
  }
}
     284:	82 2f       	mov	r24, r18
     286:	08 95       	ret

00000288 <checksystem()>:
_Z11checksystemv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:230

  updatePower();

}
bool checksystem() {
  if(inputVok() && outputVok() && currentok()){
     288:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <inputVok()>
     28c:	88 23       	and	r24, r24
     28e:	29 f0       	breq	.+10     	; 0x29a <checksystem()+0x12>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:230 (discriminator 1)
     290:	0e 94 03 01 	call	0x206	; 0x206 <outputVok()>
     294:	81 11       	cpse	r24, r1
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:230
     296:	0c 94 37 01 	jmp	0x26e	; 0x26e <currentok()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:235
    return true;
  } else {
    return false;
  }
}
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	08 95       	ret

0000029e <updatePower()>:
_Z11updatePowerv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:238

void updatePower() {
  if(checksystem()){
     29e:	0e 94 44 01 	call	0x288	; 0x288 <checksystem()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:239
  if(on.triggered(false))  
     2a2:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:238
    return false;
  }
}

void updatePower() {
  if(checksystem()){
     2a4:	88 23       	and	r24, r24
     2a6:	89 f0       	breq	.+34     	; 0x2ca <updatePower()+0x2c>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:239
  if(on.triggered(false))  
     2a8:	8d e7       	ldi	r24, 0x7D	; 125
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <BlockNot::triggered(bool)>
     2b0:	88 23       	and	r24, r24
     2b2:	21 f0       	breq	.+8      	; 0x2bc <updatePower()+0x1e>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:240
    digitalWrite(power, HIGH);
     2b4:	61 e0       	ldi	r22, 0x01	; 1
     2b6:	8d e0       	ldi	r24, 0x0D	; 13
     2b8:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:241
    off.reset();
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	ba 01       	movw	r22, r20
     2c2:	8c e5       	ldi	r24, 0x5C	; 92
     2c4:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:244
  } else if(off.triggered(false)) {
    digitalWrite(power, LOW);
    on.reset();
     2c6:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <BlockNot::reset(unsigned long)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:242
void updatePower() {
  if(checksystem()){
  if(on.triggered(false))  
    digitalWrite(power, HIGH);
    off.reset();
  } else if(off.triggered(false)) {
     2ca:	8c e5       	ldi	r24, 0x5C	; 92
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <BlockNot::triggered(bool)>
     2d2:	88 23       	and	r24, r24
     2d4:	51 f0       	breq	.+20     	; 0x2ea <updatePower()+0x4c>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:243
    digitalWrite(power, LOW);
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	8d e0       	ldi	r24, 0x0D	; 13
     2da:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:244
    on.reset();
     2de:	40 e0       	ldi	r20, 0x00	; 0
     2e0:	50 e0       	ldi	r21, 0x00	; 0
     2e2:	ba 01       	movw	r22, r20
     2e4:	8d e7       	ldi	r24, 0x7D	; 125
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	ee cf       	rjmp	.-36     	; 0x2c6 <updatePower()+0x28>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:246
  }
}
     2ea:	08 95       	ret

000002ec <eepromUpdate()>:
_Z12eepromUpdatev():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:454
  okold = read(ok);
  }
}

void eepromUpdate() {
  EEPROM.update(0, IHV/2);
     2ec:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <IHV>
     2f0:	70 91 ba 01 	lds	r23, 0x01BA	; 0x8001ba <IHV+0x1>
     2f4:	77 ff       	sbrs	r23, 7
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <eepromUpdate()+0x10>
     2f8:	6f 5f       	subi	r22, 0xFF	; 255
     2fa:	7f 4f       	sbci	r23, 0xFF	; 255
     2fc:	75 95       	asr	r23
     2fe:	67 95       	ror	r22
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:455
  EEPROM.update(1, ILV/2);
     308:	60 91 b7 01 	lds	r22, 0x01B7	; 0x8001b7 <ILV>
     30c:	70 91 b8 01 	lds	r23, 0x01B8	; 0x8001b8 <ILV+0x1>
     310:	77 ff       	sbrs	r23, 7
     312:	02 c0       	rjmp	.+4      	; 0x318 <eepromUpdate()+0x2c>
     314:	6f 5f       	subi	r22, 0xFF	; 255
     316:	7f 4f       	sbci	r23, 0xFF	; 255
     318:	75 95       	asr	r23
     31a:	67 95       	ror	r22
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:456
  EEPROM.update(2, OHV/2);
     324:	60 91 b5 01 	lds	r22, 0x01B5	; 0x8001b5 <OHV>
     328:	70 91 b6 01 	lds	r23, 0x01B6	; 0x8001b6 <OHV+0x1>
     32c:	77 ff       	sbrs	r23, 7
     32e:	02 c0       	rjmp	.+4      	; 0x334 <eepromUpdate()+0x48>
     330:	6f 5f       	subi	r22, 0xFF	; 255
     332:	7f 4f       	sbci	r23, 0xFF	; 255
     334:	75 95       	asr	r23
     336:	67 95       	ror	r22
     338:	82 e0       	ldi	r24, 0x02	; 2
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:457
  EEPROM.update(3, OLV/2);
     340:	60 91 b3 01 	lds	r22, 0x01B3	; 0x8001b3 <OLV>
     344:	70 91 b4 01 	lds	r23, 0x01B4	; 0x8001b4 <OLV+0x1>
     348:	77 ff       	sbrs	r23, 7
     34a:	02 c0       	rjmp	.+4      	; 0x350 <eepromUpdate()+0x64>
     34c:	6f 5f       	subi	r22, 0xFF	; 255
     34e:	7f 4f       	sbci	r23, 0xFF	; 255
     350:	75 95       	asr	r23
     352:	67 95       	ror	r22
     354:	83 e0       	ldi	r24, 0x03	; 3
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:458
  EEPROM.update(4, SETV/2);
     35c:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <SETV>
     360:	70 91 b2 01 	lds	r23, 0x01B2	; 0x8001b2 <SETV+0x1>
     364:	77 ff       	sbrs	r23, 7
     366:	02 c0       	rjmp	.+4      	; 0x36c <eepromUpdate()+0x80>
     368:	6f 5f       	subi	r22, 0xFF	; 255
     36a:	7f 4f       	sbci	r23, 0xFF	; 255
     36c:	75 95       	asr	r23
     36e:	67 95       	ror	r22
     370:	84 e0       	ldi	r24, 0x04	; 4
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:459
  EEPROM.update(5, OVL);
     378:	60 91 af 01 	lds	r22, 0x01AF	; 0x8001af <OVL>
     37c:	85 e0       	ldi	r24, 0x05	; 5
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:460
  EEPROM.update(6, TON);
     384:	60 91 ad 01 	lds	r22, 0x01AD	; 0x8001ad <TON>
     388:	86 e0       	ldi	r24, 0x06	; 6
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:461
  EEPROM.update(7, TOFF);
     390:	60 91 ab 01 	lds	r22, 0x01AB	; 0x8001ab <TOFF>
     394:	87 e0       	ldi	r24, 0x07	; 7
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:462
  EEPROM.update(8, DIFF);
     39c:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <DIFF>
     3a0:	88 e0       	ldi	r24, 0x08	; 8
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>

000003a8 <encUpdate()>:
_Z9encUpdatev():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:465
}

void encUpdate() {
     3a8:	0f 93       	push	r16
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:466
  if(encMenu == 0) {
     3aa:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <encMenu>
     3ae:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <encMenu+0x1>
     3b2:	00 97       	sbiw	r24, 0x00	; 0
     3b4:	c1 f4       	brne	.+48     	; 0x3e6 <encUpdate()+0x3e>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:467
    DIFF = enc;
     3b6:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <enc>
     3ba:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <enc+0x1>
     3be:	30 93 aa 01 	sts	0x01AA, r19	; 0x8001aa <DIFF+0x1>
     3c2:	20 93 a9 01 	sts	0x01A9, r18	; 0x8001a9 <DIFF>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:484
    }
  if(encMenu == 4) {
    OHV = enc;
    enc = OLV;
    }
  if(encMenu == 5) {
     3c6:	85 30       	cpi	r24, 0x05	; 5
     3c8:	91 05       	cpc	r25, r1
     3ca:	61 f5       	brne	.+88     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:485
    OLV = enc;
     3cc:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <enc>
     3d0:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <enc+0x1>
     3d4:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <OLV+0x1>
     3d8:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <OLV>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:486
    enc = SETV;
     3dc:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <SETV>
     3e0:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <SETV+0x1>
     3e4:	63 c0       	rjmp	.+198    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:469

void encUpdate() {
  if(encMenu == 0) {
    DIFF = enc;
  }
  if(encMenu == 1) {
     3e6:	81 30       	cpi	r24, 0x01	; 1
     3e8:	91 05       	cpc	r25, r1
     3ea:	49 f4       	brne	.+18     	; 0x3fe <encUpdate()+0x56>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:470
    enc = IHV;
     3ec:	20 91 b9 01 	lds	r18, 0x01B9	; 0x8001b9 <IHV>
     3f0:	30 91 ba 01 	lds	r19, 0x01BA	; 0x8001ba <IHV+0x1>
     3f4:	30 93 a8 01 	sts	0x01A8, r19	; 0x8001a8 <enc+0x1>
     3f8:	20 93 a7 01 	sts	0x01A7, r18	; 0x8001a7 <enc>
     3fc:	e4 cf       	rjmp	.-56     	; 0x3c6 <encUpdate()+0x1e>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:472
    }
  if(encMenu == 2) {
     3fe:	82 30       	cpi	r24, 0x02	; 2
     400:	91 05       	cpc	r25, r1
     402:	01 f5       	brne	.+64     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:473
    IHV = enc;
     404:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <enc>
     408:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <enc+0x1>
     40c:	30 93 ba 01 	sts	0x01BA, r19	; 0x8001ba <IHV+0x1>
     410:	20 93 b9 01 	sts	0x01B9, r18	; 0x8001b9 <IHV>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:474
    enc = ILV;
     414:	20 91 b7 01 	lds	r18, 0x01B7	; 0x8001b7 <ILV>
     418:	30 91 b8 01 	lds	r19, 0x01B8	; 0x8001b8 <ILV+0x1>
     41c:	30 93 a8 01 	sts	0x01A8, r19	; 0x8001a8 <enc+0x1>
     420:	20 93 a7 01 	sts	0x01A7, r18	; 0x8001a7 <enc>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:488
    }
  if(encMenu == 5) {
    OLV = enc;
    enc = SETV;
    }
  if(encMenu == 6) {
     424:	86 30       	cpi	r24, 0x06	; 6
     426:	91 05       	cpc	r25, r1
     428:	01 f5       	brne	.+64     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:489
    SETV = enc;
     42a:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <enc>
     42e:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <enc+0x1>
     432:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <SETV+0x1>
     436:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <SETV>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:490
    enc = OVL;
     43a:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <OVL>
     43e:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <OVL+0x1>
     442:	34 c0       	rjmp	.+104    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:476
    }
  if(encMenu == 2) {
    IHV = enc;
    enc = ILV;
    }
  if(encMenu == 3) {
     444:	83 30       	cpi	r24, 0x03	; 3
     446:	91 05       	cpc	r25, r1
     448:	09 f5       	brne	.+66     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:477
    ILV = enc;
     44a:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <enc>
     44e:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <enc+0x1>
     452:	30 93 b8 01 	sts	0x01B8, r19	; 0x8001b8 <ILV+0x1>
     456:	20 93 b7 01 	sts	0x01B7, r18	; 0x8001b7 <ILV>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:478
    enc = OHV;
     45a:	20 91 b5 01 	lds	r18, 0x01B5	; 0x8001b5 <OHV>
     45e:	30 91 b6 01 	lds	r19, 0x01B6	; 0x8001b6 <OHV+0x1>
     462:	30 93 a8 01 	sts	0x01A8, r19	; 0x8001a8 <enc+0x1>
     466:	20 93 a7 01 	sts	0x01A7, r18	; 0x8001a7 <enc>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:492
    }
  if(encMenu == 6) {
    SETV = enc;
    enc = OVL;
    }
  if(encMenu == 7) {
     46a:	87 30       	cpi	r24, 0x07	; 7
     46c:	91 05       	cpc	r25, r1
     46e:	09 f0       	breq	.+2      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     470:	4b c0       	rjmp	.+150    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:493
    OVL = enc;
     472:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <enc>
     476:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <enc+0x1>
     47a:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <OVL+0x1>
     47e:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <OVL>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:494
    enc = TON;
     482:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <TON>
     486:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <TON+0x1>
     48a:	10 c0       	rjmp	.+32     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:480
    }
  if(encMenu == 3) {
    ILV = enc;
    enc = OHV;
    }
  if(encMenu == 4) {
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	91 05       	cpc	r25, r1
     490:	09 f0       	breq	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     492:	99 cf       	rjmp	.-206    	; 0x3c6 <encUpdate()+0x1e>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:481
    OHV = enc;
     494:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <enc>
     498:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <enc+0x1>
     49c:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <OHV+0x1>
     4a0:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <OHV>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:482
    enc = OLV;
     4a4:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <OLV>
     4a8:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <OLV+0x1>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:494
    SETV = enc;
    enc = OVL;
    }
  if(encMenu == 7) {
    OVL = enc;
    enc = TON;
     4ac:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <enc+0x1>
     4b0:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <enc>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:502
    TON = enc;
    enc = TOFF;
    on.setDuration(TON, SECONDS);
    on.reset();
    }
  if(encMenu == 9) {
     4b4:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <encMenu>
     4b8:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <encMenu+0x1>
     4bc:	09 97       	sbiw	r24, 0x09	; 9
     4be:	09 f0       	breq	.+2      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4c0:	48 c0       	rjmp	.+144    	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:503
    TOFF = enc;
     4c2:	40 91 a7 01 	lds	r20, 0x01A7	; 0x8001a7 <enc>
     4c6:	50 91 a8 01 	lds	r21, 0x01A8	; 0x8001a8 <enc+0x1>
     4ca:	50 93 ac 01 	sts	0x01AC, r21	; 0x8001ac <TOFF+0x1>
     4ce:	40 93 ab 01 	sts	0x01AB, r20	; 0x8001ab <TOFF>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:504
    enc = DIFF;
     4d2:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <DIFF>
     4d6:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <DIFF+0x1>
     4da:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <enc+0x1>
     4de:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <enc>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:505
    off.setDuration(TOFF, SECONDS);
     4e2:	05 2e       	mov	r0, r21
     4e4:	00 0c       	add	r0, r0
     4e6:	66 0b       	sbc	r22, r22
     4e8:	77 0b       	sbc	r23, r23
     4ea:	01 e0       	ldi	r16, 0x01	; 1
     4ec:	22 e0       	ldi	r18, 0x02	; 2
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	8c e5       	ldi	r24, 0x5C	; 92
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	0e 94 67 0b 	call	0x16ce	; 0x16ce <BlockNot::setDuration(unsigned long, Unit, bool)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:506
    off.reset();
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	ba 01       	movw	r22, r20
     4fe:	8c e5       	ldi	r24, 0x5C	; 92
     500:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:508
    }
}
     502:	0f 91       	pop	r16
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:506
    }
  if(encMenu == 9) {
    TOFF = enc;
    enc = DIFF;
    off.setDuration(TOFF, SECONDS);
    off.reset();
     504:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <BlockNot::reset(unsigned long)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:496
    }
  if(encMenu == 7) {
    OVL = enc;
    enc = TON;
    }
  if(encMenu == 8) {
     508:	08 97       	sbiw	r24, 0x08	; 8
     50a:	a1 f6       	brne	.-88     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:497
    TON = enc;
     50c:	40 91 a7 01 	lds	r20, 0x01A7	; 0x8001a7 <enc>
     510:	50 91 a8 01 	lds	r21, 0x01A8	; 0x8001a8 <enc+0x1>
     514:	50 93 ae 01 	sts	0x01AE, r21	; 0x8001ae <TON+0x1>
     518:	40 93 ad 01 	sts	0x01AD, r20	; 0x8001ad <TON>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:498
    enc = TOFF;
     51c:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <TOFF>
     520:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <TOFF+0x1>
     524:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <enc+0x1>
     528:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <enc>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:499
    on.setDuration(TON, SECONDS);
     52c:	05 2e       	mov	r0, r21
     52e:	00 0c       	add	r0, r0
     530:	66 0b       	sbc	r22, r22
     532:	77 0b       	sbc	r23, r23
     534:	01 e0       	ldi	r16, 0x01	; 1
     536:	22 e0       	ldi	r18, 0x02	; 2
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	8d e7       	ldi	r24, 0x7D	; 125
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <BlockNot::setDuration(unsigned long, Unit, bool)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:500
    on.reset();
     542:	40 e0       	ldi	r20, 0x00	; 0
     544:	50 e0       	ldi	r21, 0x00	; 0
     546:	ba 01       	movw	r22, r20
     548:	8d e7       	ldi	r24, 0x7D	; 125
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <BlockNot::reset(unsigned long)>
     550:	b1 cf       	rjmp	.-158    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:508
    TOFF = enc;
    enc = DIFF;
    off.setDuration(TOFF, SECONDS);
    off.reset();
    }
}
     552:	0f 91       	pop	r16
     554:	08 95       	ret

00000556 <displayVar(int, int)>:
_Z10displayVarii():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:510

void displayVar(int var, int deci) {
     556:	ff 92       	push	r15
     558:	0f 93       	push	r16
     55a:	1f 93       	push	r17
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	00 d0       	rcall	.+0      	; 0x562 <displayVar(int, int)+0xc>
     562:	00 d0       	rcall	.+0      	; 0x564 <displayVar(int, int)+0xe>
     564:	1f 92       	push	r1
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	f6 2e       	mov	r15, r22
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:512
  char buffer[5];
  sprintf(buffer, "%04d", var);
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	87 e0       	ldi	r24, 0x07	; 7
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	9f 93       	push	r25
     576:	8f 93       	push	r24
     578:	8e 01       	movw	r16, r28
     57a:	0f 5f       	subi	r16, 0xFF	; 255
     57c:	1f 4f       	sbci	r17, 0xFF	; 255
     57e:	1f 93       	push	r17
     580:	0f 93       	push	r16
     582:	0e 94 01 13 	call	0x2602	; 0x2602 <sprintf>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:513
  display1.DisplayString(buffer, deci);
     586:	4f 2d       	mov	r20, r15
     588:	b8 01       	movw	r22, r16
     58a:	8c ed       	ldi	r24, 0xDC	; 220
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	0e 94 b2 09 	call	0x1364	; 0x1364 <SevSeg::DisplayString(char const*, unsigned char)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:514
}
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	ff 90       	pop	r15
     5b2:	08 95       	ret

000005b4 <menuIHV() [clone .part.11]>:
_Z7menuIHVv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:329
  display("SETP", 0);
}

void menuIHV() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <enc>
     5bc:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <enc+0x1>
     5c0:	0c 94 ab 02 	jmp	0x556	; 0x556 <displayVar(int, int)>

000005c4 <setIN(int)>:
_Z5setINi():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:537
  minusold = read(minus);
  }
}

void setIN(int PIN) {
  pinMode(PIN, INPUT);
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <pinMode>

000005ca <setOUT(int)>:
_Z6setOUTi():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:541
}

void setOUT(int PIN) {
  pinMode(PIN, OUTPUT);
     5ca:	61 e0       	ldi	r22, 0x01	; 1
     5cc:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <pinMode>

000005d0 <read(int)>:
_Z4readi():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:545
}

bool read(int PIN) {
  if(digitalRead(PIN)) {
     5d0:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <digitalRead>
     5d4:	21 e0       	ldi	r18, 0x01	; 1
     5d6:	89 2b       	or	r24, r25
     5d8:	09 f4       	brne	.+2      	; 0x5dc <read(int)+0xc>
     5da:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:550
    return true;
  } else {
    return false;
  }
}
     5dc:	82 2f       	mov	r24, r18
     5de:	08 95       	ret

000005e0 <checkok()>:
_Z7checkokv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:441
}



void checkok() {
  if(read(ok) && okold == !read(ok)){
     5e0:	81 e1       	ldi	r24, 0x11	; 17
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read(int)>
     5e8:	88 23       	and	r24, r24
     5ea:	21 f1       	breq	.+72     	; 0x634 <checkok()+0x54>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:441 (discriminator 1)
     5ec:	81 e1       	ldi	r24, 0x11	; 17
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read(int)>
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	89 27       	eor	r24, r25
     5f8:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <okold>
     5fc:	89 13       	cpse	r24, r25
     5fe:	1a c0       	rjmp	.+52     	; 0x634 <checkok()+0x54>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:442
  okold = read(ok);
     600:	81 e1       	ldi	r24, 0x11	; 17
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read(int)>
     608:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <okold>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:443
  encMenu++;
     60c:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <encMenu>
     610:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <encMenu+0x1>
     614:	01 96       	adiw	r24, 0x01	; 1
     616:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <encMenu+0x1>
     61a:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <encMenu>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:444
  refresh.reset();
     61e:	40 e0       	ldi	r20, 0x00	; 0
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	ba 01       	movw	r22, r20
     624:	8b eb       	ldi	r24, 0xBB	; 187
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <BlockNot::reset(unsigned long)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:445
  encUpdate();
     62c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <encUpdate()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:446
  eepromUpdate();
     630:	0e 94 76 01 	call	0x2ec	; 0x2ec <eepromUpdate()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:448
  }
  if(read(ok) == false){
     634:	81 e1       	ldi	r24, 0x11	; 17
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read(int)>
     63c:	81 11       	cpse	r24, r1
     63e:	06 c0       	rjmp	.+12     	; 0x64c <checkok()+0x6c>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:449
  okold = read(ok);
     640:	81 e1       	ldi	r24, 0x11	; 17
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read(int)>
     648:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <okold>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:451
  }
}
     64c:	08 95       	ret

0000064e <checkplus()>:
_Z9checkplusv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:517
  sprintf(buffer, "%04d", var);
  display1.DisplayString(buffer, deci);
}

void checkplus() {
  if(read(plus) && plusold == !read(plus)){
     64e:	82 e1       	ldi	r24, 0x12	; 18
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read(int)>
     656:	88 23       	and	r24, r24
     658:	c9 f0       	breq	.+50     	; 0x68c <checkplus()+0x3e>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:517 (discriminator 1)
     65a:	82 e1       	ldi	r24, 0x12	; 18
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read(int)>
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	89 27       	eor	r24, r25
     666:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <plusold>
     66a:	89 13       	cpse	r24, r25
     66c:	0f c0       	rjmp	.+30     	; 0x68c <checkplus()+0x3e>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:518
  plusold = read(plus);
     66e:	82 e1       	ldi	r24, 0x12	; 18
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read(int)>
     676:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <plusold>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:519
  enc++;
     67a:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <enc>
     67e:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <enc+0x1>
     682:	01 96       	adiw	r24, 0x01	; 1
     684:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <enc+0x1>
     688:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <enc>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:521
  }
  if(read(plus) == false){
     68c:	82 e1       	ldi	r24, 0x12	; 18
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read(int)>
     694:	81 11       	cpse	r24, r1
     696:	06 c0       	rjmp	.+12     	; 0x6a4 <checkplus()+0x56>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:522
  plusold = read(plus);
     698:	82 e1       	ldi	r24, 0x12	; 18
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read(int)>
     6a0:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <plusold>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:524
  }
}
     6a4:	08 95       	ret

000006a6 <checkminus()>:
_Z10checkminusv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:527

void checkminus() {
  if(read(minus) && minusold == !read(minus)){
     6a6:	83 e1       	ldi	r24, 0x13	; 19
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read(int)>
     6ae:	88 23       	and	r24, r24
     6b0:	c9 f0       	breq	.+50     	; 0x6e4 <checkminus()+0x3e>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:527 (discriminator 1)
     6b2:	83 e1       	ldi	r24, 0x13	; 19
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read(int)>
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	89 27       	eor	r24, r25
     6be:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <minusold>
     6c2:	89 13       	cpse	r24, r25
     6c4:	0f c0       	rjmp	.+30     	; 0x6e4 <checkminus()+0x3e>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:528
  minusold = read(minus);
     6c6:	83 e1       	ldi	r24, 0x13	; 19
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read(int)>
     6ce:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <minusold>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:529
  enc--;
     6d2:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <enc>
     6d6:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <enc+0x1>
     6da:	01 97       	sbiw	r24, 0x01	; 1
     6dc:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <enc+0x1>
     6e0:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <enc>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:531
  }
  if(read(minus) == false){
     6e4:	83 e1       	ldi	r24, 0x13	; 19
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read(int)>
     6ec:	81 11       	cpse	r24, r1
     6ee:	06 c0       	rjmp	.+12     	; 0x6fc <checkminus()+0x56>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:532
  minusold = read(minus);
     6f0:	83 e1       	ldi	r24, 0x13	; 19
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read(int)>
     6f8:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <minusold>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:534
  }
}
     6fc:	08 95       	ret

000006fe <display(String, int)>:
_Z7display6Stringi():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:552
  } else {
    return false;
  }
}

void display(String str, int deci) {
     6fe:	bf 92       	push	r11
     700:	cf 92       	push	r12
     702:	df 92       	push	r13
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	00 d0       	rcall	.+0      	; 0x712 <display(String, int)+0x14>
     712:	00 d0       	rcall	.+0      	; 0x714 <display(String, int)+0x16>
     714:	00 d0       	rcall	.+0      	; 0x716 <display(String, int)+0x18>
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
     71a:	8c 01       	movw	r16, r24
     71c:	b6 2e       	mov	r11, r22
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:562

  int str_len = str.length() + 1;
  char data[str_len];
  str.toCharArray(data, str_len);
  display1.DisplayString(data, deci);
}
     71e:	cd b6       	in	r12, 0x3d	; 61
     720:	de b6       	in	r13, 0x3e	; 62
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:554
  }
}

void display(String str, int deci) {
  int strl = str.length();
  if(strl < 4) {
     722:	fc 01       	movw	r30, r24
     724:	84 81       	ldd	r24, Z+4	; 0x04
     726:	95 81       	ldd	r25, Z+5	; 0x05
     728:	04 97       	sbiw	r24, 0x04	; 4
     72a:	94 f4       	brge	.+36     	; 0x750 <display(String, int)+0x52>
_ZN15StringSumHelperC4Ec():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:218
class StringSumHelper : public String
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
  StringSumHelper(char c) : String(c) {}
     72c:	60 e1       	ldi	r22, 0x10	; 16
     72e:	ce 01       	movw	r24, r28
     730:	01 96       	adiw	r24, 0x01	; 1
     732:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <String::String(char)>
_Z7display6Stringi():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:555
    str = char(16) + str;
     736:	b8 01       	movw	r22, r16
     738:	ce 01       	movw	r24, r28
     73a:	01 96       	adiw	r24, 0x01	; 1
     73c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <operator+(StringSumHelper const&, String const&)>
     740:	bc 01       	movw	r22, r24
     742:	c8 01       	movw	r24, r16
     744:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <String::operator=(String const&)>
_ZN15StringSumHelperD4Ev():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
     748:	ce 01       	movw	r24, r28
     74a:	01 96       	adiw	r24, 0x01	; 1
     74c:	0e 94 a4 0c 	call	0x1948	; 0x1948 <String::~String()>
_Z7display6Stringi():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:558
  }

  int str_len = str.length() + 1;
     750:	f8 01       	movw	r30, r16
     752:	44 81       	ldd	r20, Z+4	; 0x04
     754:	55 81       	ldd	r21, Z+5	; 0x05
     756:	4f 5f       	subi	r20, 0xFF	; 255
     758:	5f 4f       	sbci	r21, 0xFF	; 255
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:559
  char data[str_len];
     75a:	8d b7       	in	r24, 0x3d	; 61
     75c:	9e b7       	in	r25, 0x3e	; 62
     75e:	84 1b       	sub	r24, r20
     760:	95 0b       	sbc	r25, r21
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	9e bf       	out	0x3e, r25	; 62
     768:	0f be       	out	0x3f, r0	; 63
     76a:	8d bf       	out	0x3d, r24	; 61
     76c:	ed b7       	in	r30, 0x3d	; 61
     76e:	fe b7       	in	r31, 0x3e	; 62
     770:	31 96       	adiw	r30, 0x01	; 1
     772:	7f 01       	movw	r14, r30
_ZNK6String11toCharArrayEPcjj():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:162
  void setCharAt(unsigned int index, char c);
  char operator [] (unsigned int index) const;
  char& operator [] (unsigned int index);
  void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
  void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
    { getBytes((unsigned char *)buf, bufsize, index); }
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	20 e0       	ldi	r18, 0x00	; 0
     778:	bf 01       	movw	r22, r30
     77a:	c8 01       	movw	r24, r16
     77c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
_Z7display6Stringi():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:561
  str.toCharArray(data, str_len);
  display1.DisplayString(data, deci);
     780:	4b 2d       	mov	r20, r11
     782:	b7 01       	movw	r22, r14
     784:	8c ed       	ldi	r24, 0xDC	; 220
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	0e 94 b2 09 	call	0x1364	; 0x1364 <SevSeg::DisplayString(char const*, unsigned char)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:562
}
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	f8 94       	cli
     790:	de be       	out	0x3e, r13	; 62
     792:	0f be       	out	0x3f, r0	; 63
     794:	cd be       	out	0x3d, r12	; 61
     796:	26 96       	adiw	r28, 0x06	; 6
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	bf 90       	pop	r11
     7b4:	08 95       	ret

000007b6 <updateScreenData(bool)>:
_Z16updateScreenDatab():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:249
    on.reset();
  }
}


void updateScreenData(bool status) {
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	00 d0       	rcall	.+0      	; 0x7be <updateScreenData(bool)+0x8>
     7be:	00 d0       	rcall	.+0      	; 0x7c0 <updateScreenData(bool)+0xa>
     7c0:	00 d0       	rcall	.+0      	; 0x7c2 <updateScreenData(bool)+0xc>
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
     7c6:	18 2f       	mov	r17, r24
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:251
  //uncomment !mode and comment !read(setupPin) if setupPin is not being used
  if(/*!mode*/!read(setupPin)){
     7c8:	8c e0       	ldi	r24, 0x0C	; 12
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read(int)>
     7d0:	81 11       	cpse	r24, r1
     7d2:	ec c0       	rjmp	.+472    	; 0x9ac <__stack+0xad>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:252
    if(!resetrefresh){
     7d4:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <resetrefresh>
     7d8:	81 11       	cpse	r24, r1
     7da:	0a c0       	rjmp	.+20     	; 0x7f0 <updateScreenData(bool)+0x3a>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:253
      refresh.reset();
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	ba 01       	movw	r22, r20
     7e2:	8b eb       	ldi	r24, 0xBB	; 187
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <BlockNot::reset(unsigned long)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:254
      resetrefresh = true;
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <resetrefresh>
     7f0:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <alarmOnce>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:256
    }
    if(!status && !alarmOnce){
     7f4:	11 11       	cpse	r17, r1
     7f6:	eb c0       	rjmp	.+470    	; 0x9ce <__stack+0xcf>
     7f8:	81 11       	cpse	r24, r1
     7fa:	03 c0       	rjmp	.+6      	; 0x802 <updateScreenData(bool)+0x4c>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:257
      alarmOnce = true;
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <alarmOnce>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:264
    }
    if(status && alarmOnce){
      alarmOnce = false;
      menu == 0;
    }
    if(refresh.triggered()){
     802:	61 e0       	ldi	r22, 0x01	; 1
     804:	8b eb       	ldi	r24, 0xBB	; 187
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <BlockNot::triggered(bool)>
     80c:	88 23       	and	r24, r24
     80e:	49 f0       	breq	.+18     	; 0x822 <updateScreenData(bool)+0x6c>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:265
      menu++;
     810:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <menu>
     814:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <menu+0x1>
     818:	01 96       	adiw	r24, 0x01	; 1
     81a:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <menu+0x1>
     81e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <menu>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:267
    }
    if(!status && menu == -1){
     822:	11 11       	cpse	r17, r1
     824:	51 c0       	rjmp	.+162    	; 0x8c8 <updateScreenData(bool)+0x112>
     826:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <menu>
     82a:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <menu+0x1>
     82e:	01 96       	adiw	r24, 0x01	; 1
     830:	09 f0       	breq	.+2      	; 0x834 <updateScreenData(bool)+0x7e>
     832:	4a c0       	rjmp	.+148    	; 0x8c8 <updateScreenData(bool)+0x112>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:268
      if(!inputVok() && !outputVok() && !currentok()){
     834:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <inputVok()>
     838:	81 11       	cpse	r24, r1
     83a:	0a c0       	rjmp	.+20     	; 0x850 <updateScreenData(bool)+0x9a>
     83c:	0e 94 03 01 	call	0x206	; 0x206 <outputVok()>
     840:	81 11       	cpse	r24, r1
     842:	06 c0       	rjmp	.+12     	; 0x850 <updateScreenData(bool)+0x9a>
     844:	0e 94 37 01 	call	0x26e	; 0x26e <currentok()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:269
        display("ErAL", 0);
     848:	6c e0       	ldi	r22, 0x0C	; 12
     84a:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:268
    }
    if(refresh.triggered()){
      menu++;
    }
    if(!status && menu == -1){
      if(!inputVok() && !outputVok() && !currentok()){
     84c:	88 23       	and	r24, r24
     84e:	71 f1       	breq	.+92     	; 0x8ac <updateScreenData(bool)+0xf6>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:271
        display("ErAL", 0);
      } else {
        if(!inputVok()){
     850:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <inputVok()>
     854:	81 11       	cpse	r24, r1
     856:	10 c0       	rjmp	.+32     	; 0x878 <updateScreenData(bool)+0xc2>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:272
          display("ErIn", 0);
     858:	61 e1       	ldi	r22, 0x11	; 17
     85a:	71 e0       	ldi	r23, 0x01	; 1
     85c:	ce 01       	movw	r24, r28
     85e:	01 96       	adiw	r24, 0x01	; 1
     860:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <String::String(char const*)>
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	ce 01       	movw	r24, r28
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <display(String, int)>
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	0e 94 a4 0c 	call	0x1948	; 0x1948 <String::~String()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:274
        }
        if(!outputVok()){
     878:	0e 94 03 01 	call	0x206	; 0x206 <outputVok()>
     87c:	81 11       	cpse	r24, r1
     87e:	10 c0       	rjmp	.+32     	; 0x8a0 <updateScreenData(bool)+0xea>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:275
          display("ErOt", 0);
     880:	66 e1       	ldi	r22, 0x16	; 22
     882:	71 e0       	ldi	r23, 0x01	; 1
     884:	ce 01       	movw	r24, r28
     886:	01 96       	adiw	r24, 0x01	; 1
     888:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <String::String(char const*)>
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	ce 01       	movw	r24, r28
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	0e 94 7f 03 	call	0x6fe	; 0x6fe <display(String, int)>
     898:	ce 01       	movw	r24, r28
     89a:	01 96       	adiw	r24, 0x01	; 1
     89c:	0e 94 a4 0c 	call	0x1948	; 0x1948 <String::~String()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:277
        }
        if(!currentok()){
     8a0:	0e 94 37 01 	call	0x26e	; 0x26e <currentok()>
     8a4:	81 11       	cpse	r24, r1
     8a6:	10 c0       	rjmp	.+32     	; 0x8c8 <updateScreenData(bool)+0x112>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:278
          display("ErOL", 0);
     8a8:	6b e1       	ldi	r22, 0x1B	; 27
     8aa:	71 e0       	ldi	r23, 0x01	; 1
     8ac:	ce 01       	movw	r24, r28
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <String::String(char const*)>
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	ce 01       	movw	r24, r28
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	0e 94 7f 03 	call	0x6fe	; 0x6fe <display(String, int)>
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	0e 94 a4 0c 	call	0x1948	; 0x1948 <String::~String()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:282
        }
      }
    }
    if(menu == 0){
     8c8:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <menu>
     8cc:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <menu+0x1>
     8d0:	89 2b       	or	r24, r25
     8d2:	81 f4       	brne	.+32     	; 0x8f4 <updateScreenData(bool)+0x13e>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:283
      display("InUL", 0);
     8d4:	60 e2       	ldi	r22, 0x20	; 32
     8d6:	71 e0       	ldi	r23, 0x01	; 1
     8d8:	ce 01       	movw	r24, r28
     8da:	01 96       	adiw	r24, 0x01	; 1
     8dc:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <String::String(char const*)>
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	ce 01       	movw	r24, r28
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <display(String, int)>
     8ec:	ce 01       	movw	r24, r28
     8ee:	01 96       	adiw	r24, 0x01	; 1
     8f0:	0e 94 a4 0c 	call	0x1948	; 0x1948 <String::~String()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:285
    }
    if(menu == 1){
     8f4:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <menu>
     8f8:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <menu+0x1>
     8fc:	01 97       	sbiw	r24, 0x01	; 1
     8fe:	31 f4       	brne	.+12     	; 0x90c <__stack+0xd>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:286
      displayVar(IV(), 0);
     900:	0e 94 e7 00 	call	0x1ce	; 0x1ce <IV()>
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	0e 94 ab 02 	call	0x556	; 0x556 <displayVar(int, int)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:288
    }
    if(menu == 2){
     90c:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <menu>
     910:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <menu+0x1>
     914:	02 97       	sbiw	r24, 0x02	; 2
     916:	81 f4       	brne	.+32     	; 0x938 <__stack+0x39>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:289
      display("OPUL", 0);
     918:	65 e2       	ldi	r22, 0x25	; 37
     91a:	71 e0       	ldi	r23, 0x01	; 1
     91c:	ce 01       	movw	r24, r28
     91e:	01 96       	adiw	r24, 0x01	; 1
     920:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <String::String(char const*)>
     924:	70 e0       	ldi	r23, 0x00	; 0
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	ce 01       	movw	r24, r28
     92a:	01 96       	adiw	r24, 0x01	; 1
     92c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <display(String, int)>
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	0e 94 a4 0c 	call	0x1948	; 0x1948 <String::~String()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:291
    }
    if(menu == 3){
     938:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <menu>
     93c:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <menu+0x1>
     940:	03 97       	sbiw	r24, 0x03	; 3
     942:	31 f4       	brne	.+12     	; 0x950 <__stack+0x51>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:292
      displayVar(OV(), 0);
     944:	0e 94 00 01 	call	0x200	; 0x200 <OV()>
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	0e 94 ab 02 	call	0x556	; 0x556 <displayVar(int, int)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:294
    }
    if(menu == 4){
     950:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <menu>
     954:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <menu+0x1>
     958:	04 97       	sbiw	r24, 0x04	; 4
     95a:	81 f4       	brne	.+32     	; 0x97c <__stack+0x7d>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:295
      display("LoAd", 0);
     95c:	6a e2       	ldi	r22, 0x2A	; 42
     95e:	71 e0       	ldi	r23, 0x01	; 1
     960:	ce 01       	movw	r24, r28
     962:	01 96       	adiw	r24, 0x01	; 1
     964:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <String::String(char const*)>
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	ce 01       	movw	r24, r28
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	0e 94 7f 03 	call	0x6fe	; 0x6fe <display(String, int)>
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 a4 0c 	call	0x1948	; 0x1948 <String::~String()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:297
    }
    if(menu == 5){
     97c:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <menu>
     980:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <menu+0x1>
     984:	05 97       	sbiw	r24, 0x05	; 5
     986:	31 f4       	brne	.+12     	; 0x994 <__stack+0x95>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:298
      displayVar(amp(), 0);
     988:	0e 94 34 01 	call	0x268	; 0x268 <amp()>
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	0e 94 ab 02 	call	0x556	; 0x556 <displayVar(int, int)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:300
    }
    if(menu == 6){
     994:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <menu>
     998:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <menu+0x1>
     99c:	06 97       	sbiw	r24, 0x06	; 6
     99e:	31 f4       	brne	.+12     	; 0x9ac <__stack+0xad>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:301
      if(status){
     9a0:	11 23       	and	r17, r17
     9a2:	71 f0       	breq	.+28     	; 0x9c0 <__stack+0xc1>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:302
        menu = 0;
     9a4:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <menu+0x1>
     9a8:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <menu>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:308
      } else {
        menu = -1;
      }
    }
  }
}
     9ac:	26 96       	adiw	r28, 0x06	; 6
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	f8 94       	cli
     9b2:	de bf       	out	0x3e, r29	; 62
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	cd bf       	out	0x3d, r28	; 61
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	08 95       	ret
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:304
    }
    if(menu == 6){
      if(status){
        menu = 0;
      } else {
        menu = -1;
     9c0:	8f ef       	ldi	r24, 0xFF	; 255
     9c2:	9f ef       	ldi	r25, 0xFF	; 255
     9c4:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <menu+0x1>
     9c8:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <menu>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:308
      }
    }
  }
}
     9cc:	ef cf       	rjmp	.-34     	; 0x9ac <__stack+0xad>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:260
    }
    if(!status && !alarmOnce){
      alarmOnce = true;
      menu == -1;
    }
    if(status && alarmOnce){
     9ce:	88 23       	and	r24, r24
     9d0:	09 f4       	brne	.+2      	; 0x9d4 <__stack+0xd5>
     9d2:	17 cf       	rjmp	.-466    	; 0x802 <updateScreenData(bool)+0x4c>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:261
      alarmOnce = false;
     9d4:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <alarmOnce>
     9d8:	14 cf       	rjmp	.-472    	; 0x802 <updateScreenData(bool)+0x4c>

000009da <runNormal()>:
_Z9runNormalv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:209
    return false;
  }
}

void runNormal() {
  if(OV() < SETV && diffcheck() && inputVok() && currentok()){
     9da:	0e 94 00 01 	call	0x200	; 0x200 <OV()>
     9de:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <SETV>
     9e2:	30 91 b2 01 	lds	r19, 0x01B2	; 0x8001b2 <SETV+0x1>
     9e6:	82 17       	cp	r24, r18
     9e8:	93 07       	cpc	r25, r19
     9ea:	6c f4       	brge	.+26     	; 0xa06 <runNormal()+0x2c>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:209 (discriminator 1)
     9ec:	0e 94 19 01 	call	0x232	; 0x232 <diffcheck()>
     9f0:	88 23       	and	r24, r24
     9f2:	49 f0       	breq	.+18     	; 0xa06 <runNormal()+0x2c>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:209 (discriminator 3)
     9f4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <inputVok()>
     9f8:	88 23       	and	r24, r24
     9fa:	29 f0       	breq	.+10     	; 0xa06 <runNormal()+0x2c>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:209 (discriminator 5)
     9fc:	0e 94 37 01 	call	0x26e	; 0x26e <currentok()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:210 (discriminator 5)
    digitalWrite(motor0Fwd, HIGH);
     a00:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:209 (discriminator 5)
    return false;
  }
}

void runNormal() {
  if(OV() < SETV && diffcheck() && inputVok() && currentok()){
     a02:	81 11       	cpse	r24, r1
     a04:	01 c0       	rjmp	.+2      	; 0xa08 <runNormal()+0x2e>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:212
    digitalWrite(motor0Fwd, HIGH);
  } else {
    digitalWrite(motor0Fwd, LOW);
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	84 e1       	ldi	r24, 0x14	; 20
     a0a:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:214
  }
  if(OV() > SETV && diffcheck() && inputVok() && currentok()){
     a0e:	0e 94 00 01 	call	0x200	; 0x200 <OV()>
     a12:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <SETV>
     a16:	30 91 b2 01 	lds	r19, 0x01B2	; 0x8001b2 <SETV+0x1>
     a1a:	28 17       	cp	r18, r24
     a1c:	39 07       	cpc	r19, r25
     a1e:	6c f0       	brlt	.+26     	; 0xa3a <runNormal()+0x60>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:217
    digitalWrite(motor0Rev, HIGH);
  } else {
    digitalWrite(motor0Rev, LOW);
     a20:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:215
    digitalWrite(motor0Fwd, HIGH);
  } else {
    digitalWrite(motor0Fwd, LOW);
  }
  if(OV() > SETV && diffcheck() && inputVok() && currentok()){
    digitalWrite(motor0Rev, HIGH);
     a22:	85 e1       	ldi	r24, 0x15	; 21
     a24:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:220
  } else {
    digitalWrite(motor0Rev, LOW);
  }

  if(checksystem()){
     a28:	0e 94 44 01 	call	0x288	; 0x288 <checksystem()>
     a2c:	88 23       	and	r24, r24
     a2e:	99 f0       	breq	.+38     	; 0xa56 <runNormal()+0x7c>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:221
    updateScreenData(true);
     a30:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:223
  } else {
    updateScreenData(false);
     a32:	0e 94 db 03 	call	0x7b6	; 0x7b6 <updateScreenData(bool)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:226
  }

  updatePower();
     a36:	0c 94 4f 01 	jmp	0x29e	; 0x29e <updatePower()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:214 (discriminator 1)
  if(OV() < SETV && diffcheck() && inputVok() && currentok()){
    digitalWrite(motor0Fwd, HIGH);
  } else {
    digitalWrite(motor0Fwd, LOW);
  }
  if(OV() > SETV && diffcheck() && inputVok() && currentok()){
     a3a:	0e 94 19 01 	call	0x232	; 0x232 <diffcheck()>
     a3e:	88 23       	and	r24, r24
     a40:	79 f3       	breq	.-34     	; 0xa20 <runNormal()+0x46>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:214 (discriminator 3)
     a42:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <inputVok()>
     a46:	88 23       	and	r24, r24
     a48:	59 f3       	breq	.-42     	; 0xa20 <runNormal()+0x46>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:214 (discriminator 5)
     a4a:	0e 94 37 01 	call	0x26e	; 0x26e <currentok()>
     a4e:	88 23       	and	r24, r24
     a50:	39 f3       	breq	.-50     	; 0xa20 <runNormal()+0x46>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:215
    digitalWrite(motor0Rev, HIGH);
     a52:	61 e0       	ldi	r22, 0x01	; 1
     a54:	e6 cf       	rjmp	.-52     	; 0xa22 <runNormal()+0x48>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:223
  }

  if(checksystem()){
    updateScreenData(true);
  } else {
    updateScreenData(false);
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	ec cf       	rjmp	.-40     	; 0xa32 <runNormal()+0x58>

00000a5a <home()>:
_Z4homev():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:323

int amp() {
  return analogRead(current);
}

void home() {
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	00 d0       	rcall	.+0      	; 0xa60 <home()+0x6>
     a60:	00 d0       	rcall	.+0      	; 0xa62 <home()+0x8>
     a62:	00 d0       	rcall	.+0      	; 0xa64 <home()+0xa>
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:324
  display("SETP", 0);
     a68:	6f e2       	ldi	r22, 0x2F	; 47
     a6a:	71 e0       	ldi	r23, 0x01	; 1
     a6c:	ce 01       	movw	r24, r28
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <String::String(char const*)>
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	ce 01       	movw	r24, r28
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <display(String, int)>
     a80:	ce 01       	movw	r24, r28
     a82:	01 96       	adiw	r24, 0x01	; 1
     a84:	0e 94 a4 0c 	call	0x1948	; 0x1948 <String::~String()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:325
}
     a88:	26 96       	adiw	r28, 0x06	; 6
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	f8 94       	cli
     a8e:	de bf       	out	0x3e, r29	; 62
     a90:	0f be       	out	0x3f, r0	; 63
     a92:	cd bf       	out	0x3d, r28	; 61
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	08 95       	ret

00000a9a <menuIHV()>:
_Z7menuIHVv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:327

void menuIHV() {
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	00 d0       	rcall	.+0      	; 0xaa0 <menuIHV()+0x6>
     aa0:	00 d0       	rcall	.+0      	; 0xaa2 <menuIHV()+0x8>
     aa2:	00 d0       	rcall	.+0      	; 0xaa4 <menuIHV()+0xa>
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:328
  if(refresh.triggered(false)){
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	8b eb       	ldi	r24, 0xBB	; 187
     aac:	91 e0       	ldi	r25, 0x01	; 1
     aae:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <BlockNot::triggered(bool)>
     ab2:	88 23       	and	r24, r24
     ab4:	59 f0       	breq	.+22     	; 0xacc <menuIHV()+0x32>
     ab6:	0e 94 da 02 	call	0x5b4	; 0x5b4 <menuIHV() [clone .part.11]>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:333
    displayVar(enc, 0);
  } else {
    display("IHu", 0);
  }
}
     aba:	26 96       	adiw	r28, 0x06	; 6
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	de bf       	out	0x3e, r29	; 62
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	cd bf       	out	0x3d, r28	; 61
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	08 95       	ret
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:331

void menuIHV() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
  } else {
    display("IHu", 0);
     acc:	64 e3       	ldi	r22, 0x34	; 52
     ace:	71 e0       	ldi	r23, 0x01	; 1
     ad0:	ce 01       	movw	r24, r28
     ad2:	01 96       	adiw	r24, 0x01	; 1
     ad4:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <String::String(char const*)>
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	ce 01       	movw	r24, r28
     ade:	01 96       	adiw	r24, 0x01	; 1
     ae0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <display(String, int)>
     ae4:	ce 01       	movw	r24, r28
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	0e 94 a4 0c 	call	0x1948	; 0x1948 <String::~String()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:333
  }
}
     aec:	e6 cf       	rjmp	.-52     	; 0xaba <menuIHV()+0x20>

00000aee <menuILV()>:
_Z7menuILVv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:335

void menuILV() {
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	00 d0       	rcall	.+0      	; 0xaf4 <menuILV()+0x6>
     af4:	00 d0       	rcall	.+0      	; 0xaf6 <menuILV()+0x8>
     af6:	00 d0       	rcall	.+0      	; 0xaf8 <menuILV()+0xa>
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:336
  if(refresh.triggered(false)){
     afc:	60 e0       	ldi	r22, 0x00	; 0
     afe:	8b eb       	ldi	r24, 0xBB	; 187
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <BlockNot::triggered(bool)>
     b06:	88 23       	and	r24, r24
     b08:	59 f0       	breq	.+22     	; 0xb20 <menuILV()+0x32>
     b0a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <menuIHV() [clone .part.11]>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:341
    displayVar(enc, 0);
  } else {
    display("ILu", 0);
  }
}
     b0e:	26 96       	adiw	r28, 0x06	; 6
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	f8 94       	cli
     b14:	de bf       	out	0x3e, r29	; 62
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	cd bf       	out	0x3d, r28	; 61
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	08 95       	ret
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:339

void menuILV() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
  } else {
    display("ILu", 0);
     b20:	68 e3       	ldi	r22, 0x38	; 56
     b22:	71 e0       	ldi	r23, 0x01	; 1
     b24:	ce 01       	movw	r24, r28
     b26:	01 96       	adiw	r24, 0x01	; 1
     b28:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <String::String(char const*)>
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	ce 01       	movw	r24, r28
     b32:	01 96       	adiw	r24, 0x01	; 1
     b34:	0e 94 7f 03 	call	0x6fe	; 0x6fe <display(String, int)>
     b38:	ce 01       	movw	r24, r28
     b3a:	01 96       	adiw	r24, 0x01	; 1
     b3c:	0e 94 a4 0c 	call	0x1948	; 0x1948 <String::~String()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:341
  }
}
     b40:	e6 cf       	rjmp	.-52     	; 0xb0e <menuILV()+0x20>

00000b42 <menuOHV()>:
_Z7menuOHVv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:343

void menuOHV() {
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	00 d0       	rcall	.+0      	; 0xb48 <menuOHV()+0x6>
     b48:	00 d0       	rcall	.+0      	; 0xb4a <menuOHV()+0x8>
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <menuOHV()+0xa>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:344
  if(refresh.triggered(false)){
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	8b eb       	ldi	r24, 0xBB	; 187
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <BlockNot::triggered(bool)>
     b5a:	88 23       	and	r24, r24
     b5c:	59 f0       	breq	.+22     	; 0xb74 <menuOHV()+0x32>
     b5e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <menuIHV() [clone .part.11]>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:349
    displayVar(enc, 0);
  } else {
    display("OHu", 0);
  }
}
     b62:	26 96       	adiw	r28, 0x06	; 6
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	f8 94       	cli
     b68:	de bf       	out	0x3e, r29	; 62
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	cd bf       	out	0x3d, r28	; 61
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	08 95       	ret
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:347

void menuOHV() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
  } else {
    display("OHu", 0);
     b74:	6c e3       	ldi	r22, 0x3C	; 60
     b76:	71 e0       	ldi	r23, 0x01	; 1
     b78:	ce 01       	movw	r24, r28
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <String::String(char const*)>
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	ce 01       	movw	r24, r28
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	0e 94 7f 03 	call	0x6fe	; 0x6fe <display(String, int)>
     b8c:	ce 01       	movw	r24, r28
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	0e 94 a4 0c 	call	0x1948	; 0x1948 <String::~String()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:349
  }
}
     b94:	e6 cf       	rjmp	.-52     	; 0xb62 <menuOHV()+0x20>

00000b96 <menuOLV()>:
_Z7menuOLVv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:351

void menuOLV() {
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	00 d0       	rcall	.+0      	; 0xb9c <menuOLV()+0x6>
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <menuOLV()+0x8>
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <menuOLV()+0xa>
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:352
  if(refresh.triggered(false)){
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	8b eb       	ldi	r24, 0xBB	; 187
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <BlockNot::triggered(bool)>
     bae:	88 23       	and	r24, r24
     bb0:	59 f0       	breq	.+22     	; 0xbc8 <menuOLV()+0x32>
     bb2:	0e 94 da 02 	call	0x5b4	; 0x5b4 <menuIHV() [clone .part.11]>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:357
    displayVar(enc, 0);
  } else {
    display("OLu", 0);
  }
}
     bb6:	26 96       	adiw	r28, 0x06	; 6
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	cd bf       	out	0x3d, r28	; 61
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:355

void menuOLV() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
  } else {
    display("OLu", 0);
     bc8:	60 e4       	ldi	r22, 0x40	; 64
     bca:	71 e0       	ldi	r23, 0x01	; 1
     bcc:	ce 01       	movw	r24, r28
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <String::String(char const*)>
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	ce 01       	movw	r24, r28
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	0e 94 7f 03 	call	0x6fe	; 0x6fe <display(String, int)>
     be0:	ce 01       	movw	r24, r28
     be2:	01 96       	adiw	r24, 0x01	; 1
     be4:	0e 94 a4 0c 	call	0x1948	; 0x1948 <String::~String()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:357
  }
}
     be8:	e6 cf       	rjmp	.-52     	; 0xbb6 <menuOLV()+0x20>

00000bea <menuSETV()>:
_Z8menuSETVv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:359

void menuSETV() {
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	00 d0       	rcall	.+0      	; 0xbf0 <menuSETV()+0x6>
     bf0:	00 d0       	rcall	.+0      	; 0xbf2 <menuSETV()+0x8>
     bf2:	00 d0       	rcall	.+0      	; 0xbf4 <menuSETV()+0xa>
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:360
  if(refresh.triggered(false)){
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	8b eb       	ldi	r24, 0xBB	; 187
     bfc:	91 e0       	ldi	r25, 0x01	; 1
     bfe:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <BlockNot::triggered(bool)>
     c02:	88 23       	and	r24, r24
     c04:	59 f0       	breq	.+22     	; 0xc1c <menuSETV()+0x32>
     c06:	0e 94 da 02 	call	0x5b4	; 0x5b4 <menuIHV() [clone .part.11]>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:365
    displayVar(enc, 0);
  } else {
    display("SETu", 0);
  }
}
     c0a:	26 96       	adiw	r28, 0x06	; 6
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	08 95       	ret
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:363

void menuSETV() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
  } else {
    display("SETu", 0);
     c1c:	64 e4       	ldi	r22, 0x44	; 68
     c1e:	71 e0       	ldi	r23, 0x01	; 1
     c20:	ce 01       	movw	r24, r28
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <String::String(char const*)>
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	ce 01       	movw	r24, r28
     c2e:	01 96       	adiw	r24, 0x01	; 1
     c30:	0e 94 7f 03 	call	0x6fe	; 0x6fe <display(String, int)>
     c34:	ce 01       	movw	r24, r28
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	0e 94 a4 0c 	call	0x1948	; 0x1948 <String::~String()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:365
  }
}
     c3c:	e6 cf       	rjmp	.-52     	; 0xc0a <menuSETV()+0x20>

00000c3e <menuOVL()>:
_Z7menuOVLv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:367

void menuOVL() {
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	00 d0       	rcall	.+0      	; 0xc44 <menuOVL()+0x6>
     c44:	00 d0       	rcall	.+0      	; 0xc46 <menuOVL()+0x8>
     c46:	00 d0       	rcall	.+0      	; 0xc48 <menuOVL()+0xa>
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:368
  if(refresh.triggered(false)){
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	8b eb       	ldi	r24, 0xBB	; 187
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <BlockNot::triggered(bool)>
     c56:	88 23       	and	r24, r24
     c58:	59 f0       	breq	.+22     	; 0xc70 <menuOVL()+0x32>
     c5a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <menuIHV() [clone .part.11]>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:373
    displayVar(enc, 0);
  } else {
    display("OuL", 0);
  }
}
     c5e:	26 96       	adiw	r28, 0x06	; 6
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	08 95       	ret
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:371

void menuOVL() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
  } else {
    display("OuL", 0);
     c70:	69 e4       	ldi	r22, 0x49	; 73
     c72:	71 e0       	ldi	r23, 0x01	; 1
     c74:	ce 01       	movw	r24, r28
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <String::String(char const*)>
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	ce 01       	movw	r24, r28
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	0e 94 7f 03 	call	0x6fe	; 0x6fe <display(String, int)>
     c88:	ce 01       	movw	r24, r28
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	0e 94 a4 0c 	call	0x1948	; 0x1948 <String::~String()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:373
  }
}
     c90:	e6 cf       	rjmp	.-52     	; 0xc5e <menuOVL()+0x20>

00000c92 <menuTON()>:
_Z7menuTONv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:375

void menuTON() {
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	00 d0       	rcall	.+0      	; 0xc98 <menuTON()+0x6>
     c98:	00 d0       	rcall	.+0      	; 0xc9a <menuTON()+0x8>
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <menuTON()+0xa>
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:376
  if(refresh.triggered(false)){
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	8b eb       	ldi	r24, 0xBB	; 187
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <BlockNot::triggered(bool)>
     caa:	88 23       	and	r24, r24
     cac:	59 f0       	breq	.+22     	; 0xcc4 <menuTON()+0x32>
     cae:	0e 94 da 02 	call	0x5b4	; 0x5b4 <menuIHV() [clone .part.11]>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:381
    displayVar(enc, 0);
  } else {
    display("tOn", 0);
  }
}
     cb2:	26 96       	adiw	r28, 0x06	; 6
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	08 95       	ret
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:379

void menuTON() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
  } else {
    display("tOn", 0);
     cc4:	6d e4       	ldi	r22, 0x4D	; 77
     cc6:	71 e0       	ldi	r23, 0x01	; 1
     cc8:	ce 01       	movw	r24, r28
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <String::String(char const*)>
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	ce 01       	movw	r24, r28
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <display(String, int)>
     cdc:	ce 01       	movw	r24, r28
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	0e 94 a4 0c 	call	0x1948	; 0x1948 <String::~String()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:381
  }
}
     ce4:	e6 cf       	rjmp	.-52     	; 0xcb2 <menuTON()+0x20>

00000ce6 <menuTOFF()>:
_Z8menuTOFFv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:383

void menuTOFF() {
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	00 d0       	rcall	.+0      	; 0xcec <menuTOFF()+0x6>
     cec:	00 d0       	rcall	.+0      	; 0xcee <menuTOFF()+0x8>
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <menuTOFF()+0xa>
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:384
  if(refresh.triggered(false)){
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	8b eb       	ldi	r24, 0xBB	; 187
     cf8:	91 e0       	ldi	r25, 0x01	; 1
     cfa:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <BlockNot::triggered(bool)>
     cfe:	88 23       	and	r24, r24
     d00:	59 f0       	breq	.+22     	; 0xd18 <menuTOFF()+0x32>
     d02:	0e 94 da 02 	call	0x5b4	; 0x5b4 <menuIHV() [clone .part.11]>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:389
    displayVar(enc, 0);
  } else {
    display("tOFF", 0);
  }
}
     d06:	26 96       	adiw	r28, 0x06	; 6
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	de bf       	out	0x3e, r29	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	cd bf       	out	0x3d, r28	; 61
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	08 95       	ret
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:387

void menuTOFF() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
  } else {
    display("tOFF", 0);
     d18:	61 e5       	ldi	r22, 0x51	; 81
     d1a:	71 e0       	ldi	r23, 0x01	; 1
     d1c:	ce 01       	movw	r24, r28
     d1e:	01 96       	adiw	r24, 0x01	; 1
     d20:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <String::String(char const*)>
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	ce 01       	movw	r24, r28
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <display(String, int)>
     d30:	ce 01       	movw	r24, r28
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	0e 94 a4 0c 	call	0x1948	; 0x1948 <String::~String()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:389
  }
}
     d38:	e6 cf       	rjmp	.-52     	; 0xd06 <menuTOFF()+0x20>

00000d3a <menuDIFF()>:
_Z8menuDIFFv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:391

void menuDIFF() {
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <menuDIFF()+0x6>
     d40:	00 d0       	rcall	.+0      	; 0xd42 <menuDIFF()+0x8>
     d42:	00 d0       	rcall	.+0      	; 0xd44 <menuDIFF()+0xa>
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:392
  if(refresh.triggered(false)){
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	8b eb       	ldi	r24, 0xBB	; 187
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <BlockNot::triggered(bool)>
     d52:	88 23       	and	r24, r24
     d54:	59 f0       	breq	.+22     	; 0xd6c <menuDIFF()+0x32>
     d56:	0e 94 da 02 	call	0x5b4	; 0x5b4 <menuIHV() [clone .part.11]>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:397
    displayVar(enc, 0);
  } else {
    display("dIFF", 0);
  }
}
     d5a:	26 96       	adiw	r28, 0x06	; 6
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	de bf       	out	0x3e, r29	; 62
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	cd bf       	out	0x3d, r28	; 61
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	08 95       	ret
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:395

void menuDIFF() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
  } else {
    display("dIFF", 0);
     d6c:	66 e5       	ldi	r22, 0x56	; 86
     d6e:	71 e0       	ldi	r23, 0x01	; 1
     d70:	ce 01       	movw	r24, r28
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <String::String(char const*)>
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	ce 01       	movw	r24, r28
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	0e 94 7f 03 	call	0x6fe	; 0x6fe <display(String, int)>
     d84:	ce 01       	movw	r24, r28
     d86:	01 96       	adiw	r24, 0x01	; 1
     d88:	0e 94 a4 0c 	call	0x1948	; 0x1948 <String::~String()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:397
  }
}
     d8c:	e6 cf       	rjmp	.-52     	; 0xd5a <menuDIFF()+0x20>

00000d8e <runSetup()>:
_Z8runSetupv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:400

void runSetup() {
  if(encMenu == 0) {
     d8e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <encMenu>
     d92:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <encMenu+0x1>
     d96:	89 2b       	or	r24, r25
     d98:	11 f4       	brne	.+4      	; 0xd9e <runSetup()+0x10>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:401
    home();
     d9a:	0e 94 2d 05 	call	0xa5a	; 0xa5a <home()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:403
  }
  if(encMenu == 1) {
     d9e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <encMenu>
     da2:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <encMenu+0x1>
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	11 f4       	brne	.+4      	; 0xdae <runSetup()+0x20>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:404
    menuIHV();
     daa:	0e 94 4d 05 	call	0xa9a	; 0xa9a <menuIHV()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:406
  }
  if(encMenu == 2) {
     dae:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <encMenu>
     db2:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <encMenu+0x1>
     db6:	02 97       	sbiw	r24, 0x02	; 2
     db8:	11 f4       	brne	.+4      	; 0xdbe <runSetup()+0x30>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:407
    menuILV();
     dba:	0e 94 77 05 	call	0xaee	; 0xaee <menuILV()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:409
  }
  if(encMenu == 3) {
     dbe:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <encMenu>
     dc2:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <encMenu+0x1>
     dc6:	03 97       	sbiw	r24, 0x03	; 3
     dc8:	11 f4       	brne	.+4      	; 0xdce <runSetup()+0x40>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:410
    menuOHV();
     dca:	0e 94 a1 05 	call	0xb42	; 0xb42 <menuOHV()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:412
  }
  if(encMenu == 4) {
     dce:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <encMenu>
     dd2:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <encMenu+0x1>
     dd6:	04 97       	sbiw	r24, 0x04	; 4
     dd8:	11 f4       	brne	.+4      	; 0xdde <runSetup()+0x50>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:413
    menuOLV();
     dda:	0e 94 cb 05 	call	0xb96	; 0xb96 <menuOLV()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:415
  }
  if(encMenu == 5) {
     dde:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <encMenu>
     de2:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <encMenu+0x1>
     de6:	05 97       	sbiw	r24, 0x05	; 5
     de8:	11 f4       	brne	.+4      	; 0xdee <runSetup()+0x60>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:416
    menuSETV();
     dea:	0e 94 f5 05 	call	0xbea	; 0xbea <menuSETV()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:418
  }
  if(encMenu == 6) {
     dee:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <encMenu>
     df2:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <encMenu+0x1>
     df6:	06 97       	sbiw	r24, 0x06	; 6
     df8:	11 f4       	brne	.+4      	; 0xdfe <runSetup()+0x70>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:419
    menuOVL();
     dfa:	0e 94 1f 06 	call	0xc3e	; 0xc3e <menuOVL()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:421
  }
  if(encMenu == 7) {
     dfe:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <encMenu>
     e02:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <encMenu+0x1>
     e06:	07 97       	sbiw	r24, 0x07	; 7
     e08:	11 f4       	brne	.+4      	; 0xe0e <runSetup()+0x80>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:422
    menuTON();
     e0a:	0e 94 49 06 	call	0xc92	; 0xc92 <menuTON()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:424
  }
  if(encMenu == 8) {
     e0e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <encMenu>
     e12:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <encMenu+0x1>
     e16:	08 97       	sbiw	r24, 0x08	; 8
     e18:	11 f4       	brne	.+4      	; 0xe1e <runSetup()+0x90>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:425
    menuTOFF();
     e1a:	0e 94 73 06 	call	0xce6	; 0xce6 <menuTOFF()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:427
  }
  if(encMenu == 9) {
     e1e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <encMenu>
     e22:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <encMenu+0x1>
     e26:	09 97       	sbiw	r24, 0x09	; 9
     e28:	11 f4       	brne	.+4      	; 0xe2e <runSetup()+0xa0>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:428
    menuDIFF();
     e2a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <menuDIFF()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:430
  }
  if(encMenu > 9) {
     e2e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <encMenu>
     e32:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <encMenu+0x1>
     e36:	0a 97       	sbiw	r24, 0x0a	; 10
     e38:	24 f0       	brlt	.+8      	; 0xe42 <runSetup()+0xb4>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:431
    encMenu = 0;
     e3a:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <encMenu+0x1>
     e3e:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <encMenu>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:433
  }
  if(encMenu < 0) {
     e42:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <encMenu>
     e46:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <encMenu+0x1>
     e4a:	97 ff       	sbrs	r25, 7
     e4c:	06 c0       	rjmp	.+12     	; 0xe5a <runSetup()+0xcc>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:434
    encMenu = 9;
     e4e:	89 e0       	ldi	r24, 0x09	; 9
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <encMenu+0x1>
     e56:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <encMenu>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:436
  }
}
     e5a:	08 95       	ret

00000e5c <loop>:
loop():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:148
}



void loop() {
  checkok();
     e5c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <checkok()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:149
  checkplus();
     e60:	0e 94 27 03 	call	0x64e	; 0x64e <checkplus()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:150
  checkminus();
     e64:	0e 94 53 03 	call	0x6a6	; 0x6a6 <checkminus()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:152
  //comment this if running without setup pin
  if(read(setupPin)){
     e68:	8c e0       	ldi	r24, 0x0C	; 12
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read(int)>
     e70:	81 11       	cpse	r24, r1
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:153
    runSetup();
     e72:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <runSetup()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:155
  } else {
    runNormal();
     e76:	0c 94 ed 04 	jmp	0x9da	; 0x9da <runNormal()>

00000e7a <setupDisplay()>:
_Z12setupDisplayv():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:564
  char data[str_len];
  str.toCharArray(data, str_len);
  display1.DisplayString(data, deci);
}

void setupDisplay() {
     e7a:	8f 92       	push	r8
     e7c:	af 92       	push	r10
     e7e:	cf 92       	push	r12
     e80:	ef 92       	push	r14
     e82:	0f 93       	push	r16
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:584
   int segG = PIN_PD6; 
   int segDP = PIN_PD7; 
   
  int numberOfDigits = 4; 

  display1.Begin(displayType, numberOfDigits, digit1, digit2, digit3, digit4, segA, segB, segC, segD, segE, segF, segG, segDP);
     e84:	87 e0       	ldi	r24, 0x07	; 7
     e86:	8f 93       	push	r24
     e88:	86 e0       	ldi	r24, 0x06	; 6
     e8a:	8f 93       	push	r24
     e8c:	85 e0       	ldi	r24, 0x05	; 5
     e8e:	8f 93       	push	r24
     e90:	84 e0       	ldi	r24, 0x04	; 4
     e92:	8f 93       	push	r24
     e94:	83 e0       	ldi	r24, 0x03	; 3
     e96:	8f 93       	push	r24
     e98:	82 e0       	ldi	r24, 0x02	; 2
     e9a:	8f 93       	push	r24
     e9c:	88 24       	eor	r8, r8
     e9e:	83 94       	inc	r8
     ea0:	a1 2c       	mov	r10, r1
     ea2:	8b e0       	ldi	r24, 0x0B	; 11
     ea4:	c8 2e       	mov	r12, r24
     ea6:	9a e0       	ldi	r25, 0x0A	; 10
     ea8:	e9 2e       	mov	r14, r25
     eaa:	09 e0       	ldi	r16, 0x09	; 9
     eac:	28 e0       	ldi	r18, 0x08	; 8
     eae:	44 e0       	ldi	r20, 0x04	; 4
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	8c ed       	ldi	r24, 0xDC	; 220
     eb4:	91 e0       	ldi	r25, 0x01	; 1
     eb6:	0e 94 50 09 	call	0x12a0	; 0x12a0 <SevSeg::Begin(bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:586
  
  display1.SetBrightness(100); 
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	64 e6       	ldi	r22, 0x64	; 100
     ec8:	8c ed       	ldi	r24, 0xDC	; 220
     eca:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:587
}
     ecc:	0f 91       	pop	r16
     ece:	ef 90       	pop	r14
     ed0:	cf 90       	pop	r12
     ed2:	af 90       	pop	r10
     ed4:	8f 90       	pop	r8
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:586
   
  int numberOfDigits = 4; 

  display1.Begin(displayType, numberOfDigits, digit1, digit2, digit3, digit4, segA, segB, segC, segD, segE, segF, segG, segDP);
  
  display1.SetBrightness(100); 
     ed6:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <SevSeg::SetBrightness(unsigned char)>

00000eda <setup>:
setup():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:96
*/

BlockNot on(TON, SECONDS);
BlockNot off(TOFF, SECONDS);

void setup() {
     eda:	0f 93       	push	r16
     edc:	cf 93       	push	r28
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:97
setupDisplay();
     ede:	0e 94 3d 07 	call	0xe7a	; 0xe7a <setupDisplay()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:98
setIN(ok);
     ee2:	81 e1       	ldi	r24, 0x11	; 17
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <setIN(int)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:99
setIN(plus);
     eea:	82 e1       	ldi	r24, 0x12	; 18
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <setIN(int)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:100
setIN(minus);
     ef2:	83 e1       	ldi	r24, 0x13	; 19
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <setIN(int)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:102
//comment setup pin if not needed
setIN(setupPin); //change setup mode from RUN/SETUP
     efa:	8c e0       	ldi	r24, 0x0C	; 12
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <setIN(int)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:103
setIN(inVolt);
     f02:	8e e0       	ldi	r24, 0x0E	; 14
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <setIN(int)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:104
setIN(outVolt);
     f0a:	8f e0       	ldi	r24, 0x0F	; 15
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <setIN(int)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:105
setIN(current);
     f12:	80 e1       	ldi	r24, 0x10	; 16
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <setIN(int)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:106
setOUT(motor0Fwd);
     f1a:	84 e1       	ldi	r24, 0x14	; 20
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <setOUT(int)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:107
setOUT(motor0Rev);
     f22:	85 e1       	ldi	r24, 0x15	; 21
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 e5 02 	call	0x5ca	; 0x5ca <setOUT(int)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:108
setOUT(power);
     f2a:	8d e0       	ldi	r24, 0x0D	; 13
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <setOUT(int)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:114


//This for Variables to read from Memory on startup
//comment these variables while testing in proteus
/**/
IHV = 2 * EEPROM.read(0);
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	0e 94 e5 00 	call	0x1ca	; 0x1ca <EEPROMClass::read(int) [clone .isra.1]>
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <IHV+0x1>
     f44:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <IHV>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:115
ILV = 2 * EEPROM.read(1);
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <EEPROMClass::read(int) [clone .isra.1]>
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <ILV+0x1>
     f5a:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <ILV>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:116
OHV = 2 * EEPROM.read(2);
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 e5 00 	call	0x1ca	; 0x1ca <EEPROMClass::read(int) [clone .isra.1]>
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <OHV+0x1>
     f70:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <OHV>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:117
OLV = 2 * EEPROM.read(3);
     f74:	83 e0       	ldi	r24, 0x03	; 3
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 e5 00 	call	0x1ca	; 0x1ca <EEPROMClass::read(int) [clone .isra.1]>
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <OLV+0x1>
     f86:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <OLV>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:118
SETV = 2 * EEPROM.read(4);
     f8a:	84 e0       	ldi	r24, 0x04	; 4
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <EEPROMClass::read(int) [clone .isra.1]>
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <SETV+0x1>
     f9c:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <SETV>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:119
OVL = EEPROM.read(5);
     fa0:	85 e0       	ldi	r24, 0x05	; 5
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <EEPROMClass::read(int) [clone .isra.1]>
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <OVL+0x1>
     fae:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <OVL>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:120
TON = EEPROM.read(6);
     fb2:	86 e0       	ldi	r24, 0x06	; 6
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <EEPROMClass::read(int) [clone .isra.1]>
     fba:	c8 2f       	mov	r28, r24
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <TON+0x1>
     fc2:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <TON>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:121
TOFF = EEPROM.read(7);
     fc6:	87 e0       	ldi	r24, 0x07	; 7
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	0e 94 e5 00 	call	0x1ca	; 0x1ca <EEPROMClass::read(int) [clone .isra.1]>
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <TOFF+0x1>
     fd4:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <TOFF>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:122
DIFF = EEPROM.read(8);
     fd8:	88 e0       	ldi	r24, 0x08	; 8
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <EEPROMClass::read(int) [clone .isra.1]>
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <DIFF+0x1>
     fe6:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <DIFF>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:138
TON = 3;
TOFF = 0;
DIFF = 5;
*/

on.setDuration(TON, SECONDS);
     fea:	4c 2f       	mov	r20, r28
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	01 e0       	ldi	r16, 0x01	; 1
     ff4:	22 e0       	ldi	r18, 0x02	; 2
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	8d e7       	ldi	r24, 0x7D	; 125
     ffa:	91 e0       	ldi	r25, 0x01	; 1
     ffc:	0e 94 67 0b 	call	0x16ce	; 0x16ce <BlockNot::setDuration(unsigned long, Unit, bool)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:139
off.setDuration(TOFF, SECONDS);
    1000:	40 91 ab 01 	lds	r20, 0x01AB	; 0x8001ab <TOFF>
    1004:	50 91 ac 01 	lds	r21, 0x01AC	; 0x8001ac <TOFF+0x1>
    1008:	05 2e       	mov	r0, r21
    100a:	00 0c       	add	r0, r0
    100c:	66 0b       	sbc	r22, r22
    100e:	77 0b       	sbc	r23, r23
    1010:	22 e0       	ldi	r18, 0x02	; 2
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	8c e5       	ldi	r24, 0x5C	; 92
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	0e 94 67 0b 	call	0x16ce	; 0x16ce <BlockNot::setDuration(unsigned long, Unit, bool)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:140
on.reset();
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	50 e0       	ldi	r21, 0x00	; 0
    1020:	ba 01       	movw	r22, r20
    1022:	8d e7       	ldi	r24, 0x7D	; 125
    1024:	91 e0       	ldi	r25, 0x01	; 1
    1026:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <BlockNot::reset(unsigned long)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:141
off.reset();
    102a:	40 e0       	ldi	r20, 0x00	; 0
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	ba 01       	movw	r22, r20
    1030:	8c e5       	ldi	r24, 0x5C	; 92
    1032:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:143

}
    1034:	cf 91       	pop	r28
    1036:	0f 91       	pop	r16
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:141
*/

on.setDuration(TON, SECONDS);
off.setDuration(TOFF, SECONDS);
on.reset();
off.reset();
    1038:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <BlockNot::reset(unsigned long)>

0000103c <_GLOBAL__sub_I_display1>:
_GLOBAL__sub_I_display1():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:51
#include <EEPROM.h>
#include <BlockNot.h> //https://github.com/EasyG0ing1/BlockNot
#include "SevSeg.h" //https://github.com/sparkfun/SevSeg


SevSeg display1;
    103c:	8c ed       	ldi	r24, 0xDC	; 220
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	0e 94 48 08 	call	0x1090	; 0x1090 <SevSeg::SevSeg()>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:54

//BlockNot screen(2, SECONDS);
BlockNot refresh(1, SECONDS);
    1044:	22 e0       	ldi	r18, 0x02	; 2
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	41 e0       	ldi	r20, 0x01	; 1
    104a:	50 e0       	ldi	r21, 0x00	; 0
    104c:	60 e0       	ldi	r22, 0x00	; 0
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	8b eb       	ldi	r24, 0xBB	; 187
    1052:	91 e0       	ldi	r25, 0x01	; 1
    1054:	0e 94 28 0c 	call	0x1850	; 0x1850 <BlockNot::BlockNot(unsigned long, Unit)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:93
/*
bool mode = false;
bool switched = false;
*/

BlockNot on(TON, SECONDS);
    1058:	40 91 ad 01 	lds	r20, 0x01AD	; 0x8001ad <TON>
    105c:	50 91 ae 01 	lds	r21, 0x01AE	; 0x8001ae <TON+0x1>
    1060:	05 2e       	mov	r0, r21
    1062:	00 0c       	add	r0, r0
    1064:	66 0b       	sbc	r22, r22
    1066:	77 0b       	sbc	r23, r23
    1068:	22 e0       	ldi	r18, 0x02	; 2
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	8d e7       	ldi	r24, 0x7D	; 125
    106e:	91 e0       	ldi	r25, 0x01	; 1
    1070:	0e 94 28 0c 	call	0x1850	; 0x1850 <BlockNot::BlockNot(unsigned long, Unit)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:94
BlockNot off(TOFF, SECONDS);
    1074:	40 91 ab 01 	lds	r20, 0x01AB	; 0x8001ab <TOFF>
    1078:	50 91 ac 01 	lds	r21, 0x01AC	; 0x8001ac <TOFF+0x1>
    107c:	05 2e       	mov	r0, r21
    107e:	00 0c       	add	r0, r0
    1080:	66 0b       	sbc	r22, r22
    1082:	77 0b       	sbc	r23, r23
    1084:	22 e0       	ldi	r18, 0x02	; 2
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	8c e5       	ldi	r24, 0x5C	; 92
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <BlockNot::BlockNot(unsigned long, Unit)>

00001090 <SevSeg::SevSeg()>:
_ZN6SevSegC2Ev():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:67
#include "SevSeg.h"

SevSeg::SevSeg()
{
  //Initial values
  DecAposColon = 0; //This variable tracks the decimal place, apostrophe, and colon (if the display has support)
    1090:	88 5b       	subi	r24, 0xB8	; 184
    1092:	9f 4f       	sbci	r25, 0xFF	; 255
    1094:	fc 01       	movw	r30, r24
    1096:	10 82       	st	Z, r1
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:69

}
    1098:	08 95       	ret

0000109a <SevSeg::Begin(bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN6SevSeg5BeginEbhhhhhhhhhhhhhhhhh():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:76
	byte dig1, byte dig2, byte dig3, byte dig4,
	byte digitCol, byte digitApos,
	byte segA, byte segB, byte segC, byte segD, byte segE, byte segF, byte segG,
	byte segDP,
	byte segCol, byte segApos)
{
    109a:	6f 92       	push	r6
    109c:	7f 92       	push	r7
    109e:	8f 92       	push	r8
    10a0:	af 92       	push	r10
    10a2:	cf 92       	push	r12
    10a4:	df 92       	push	r13
    10a6:	ef 92       	push	r14
    10a8:	ff 92       	push	r15
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	3c 01       	movw	r6, r24
    10b8:	ff 84       	ldd	r15, Y+15	; 0x0f
    10ba:	f8 89       	ldd	r31, Y+16	; 0x10
    10bc:	e9 89       	ldd	r30, Y+17	; 0x11
    10be:	7a 89       	ldd	r23, Y+18	; 0x12
    10c0:	5b 89       	ldd	r21, Y+19	; 0x13
    10c2:	3c 89       	ldd	r19, Y+20	; 0x14
    10c4:	9d 89       	ldd	r25, Y+21	; 0x15
    10c6:	8e 89       	ldd	r24, Y+22	; 0x16
    10c8:	df 88       	ldd	r13, Y+23	; 0x17
    10ca:	18 8d       	ldd	r17, Y+24	; 0x18
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:78
  //Bring all the variables in from the caller
  numberOfDigits = numOfDigits;
    10cc:	d3 01       	movw	r26, r6
    10ce:	55 96       	adiw	r26, 0x15	; 21
    10d0:	4c 93       	st	X, r20
    10d2:	55 97       	sbiw	r26, 0x15	; 21
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:79
  digit1 = dig1;
    10d4:	15 96       	adiw	r26, 0x05	; 5
    10d6:	2c 93       	st	X, r18
    10d8:	15 97       	sbiw	r26, 0x05	; 5
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:80
  digit2 = dig2;
    10da:	16 96       	adiw	r26, 0x06	; 6
    10dc:	0c 93       	st	X, r16
    10de:	16 97       	sbiw	r26, 0x06	; 6
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:81
  digit3 = dig3;
    10e0:	17 96       	adiw	r26, 0x07	; 7
    10e2:	ec 92       	st	X, r14
    10e4:	17 97       	sbiw	r26, 0x07	; 7
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:82
  digit4 = dig4;
    10e6:	18 96       	adiw	r26, 0x08	; 8
    10e8:	cc 92       	st	X, r12
    10ea:	18 97       	sbiw	r26, 0x08	; 8
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:83
  digitApostrophe = digitApos;
    10ec:	19 96       	adiw	r26, 0x09	; 9
    10ee:	8c 92       	st	X, r8
    10f0:	19 97       	sbiw	r26, 0x09	; 9
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:84
  digitColon = digitCol;
    10f2:	1a 96       	adiw	r26, 0x0a	; 10
    10f4:	ac 92       	st	X, r10
    10f6:	1a 97       	sbiw	r26, 0x0a	; 10
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:85
  segmentA = segA;
    10f8:	1d 96       	adiw	r26, 0x0d	; 13
    10fa:	fc 92       	st	X, r15
    10fc:	1d 97       	sbiw	r26, 0x0d	; 13
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:86
  segmentB = segB;
    10fe:	1e 96       	adiw	r26, 0x0e	; 14
    1100:	fc 93       	st	X, r31
    1102:	1e 97       	sbiw	r26, 0x0e	; 14
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:87
  segmentC = segC;
    1104:	1f 96       	adiw	r26, 0x0f	; 15
    1106:	ec 93       	st	X, r30
    1108:	1f 97       	sbiw	r26, 0x0f	; 15
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:88
  segmentD = segD;
    110a:	50 96       	adiw	r26, 0x10	; 16
    110c:	7c 93       	st	X, r23
    110e:	50 97       	sbiw	r26, 0x10	; 16
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:89
  segmentE = segE;
    1110:	51 96       	adiw	r26, 0x11	; 17
    1112:	5c 93       	st	X, r21
    1114:	51 97       	sbiw	r26, 0x11	; 17
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:90
  segmentF = segF;
    1116:	52 96       	adiw	r26, 0x12	; 18
    1118:	3c 93       	st	X, r19
    111a:	52 97       	sbiw	r26, 0x12	; 18
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:91
  segmentG = segG;
    111c:	53 96       	adiw	r26, 0x13	; 19
    111e:	9c 93       	st	X, r25
    1120:	53 97       	sbiw	r26, 0x13	; 19
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:92
  segmentDP = segDP;
    1122:	54 96       	adiw	r26, 0x14	; 20
    1124:	8c 93       	st	X, r24
    1126:	54 97       	sbiw	r26, 0x14	; 20
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:93
  segmentApostrophe = segApos;
    1128:	1b 96       	adiw	r26, 0x0b	; 11
    112a:	1c 93       	st	X, r17
    112c:	1b 97       	sbiw	r26, 0x0b	; 11
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:94
  segmentColon = segCol;
    112e:	1c 96       	adiw	r26, 0x0c	; 12
    1130:	dc 92       	st	X, r13
    1132:	1c 97       	sbiw	r26, 0x0c	; 12
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:98

  //Assign input values to variables
  //mode is what the digit pins must be set at for it to be turned on. 0 for common cathode, 1 for common anode
  mode = mode_in;
    1134:	6c 93       	st	X, r22
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:99
  if(mode == COMMON_ANODE)
    1136:	66 23       	and	r22, r22
    1138:	09 f4       	brne	.+2      	; 0x113c <SevSeg::Begin(bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa2>
    113a:	45 c0       	rjmp	.+138    	; 0x11c6 <SevSeg::Begin(bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:101
  {
    DigitOn = HIGH;
    113c:	41 e0       	ldi	r20, 0x01	; 1
    113e:	11 96       	adiw	r26, 0x01	; 1
    1140:	4c 93       	st	X, r20
    1142:	11 97       	sbiw	r26, 0x01	; 1
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:102
    DigitOff = LOW;
    1144:	12 96       	adiw	r26, 0x02	; 2
    1146:	1c 92       	st	X, r1
    1148:	12 97       	sbiw	r26, 0x02	; 2
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:103
    SegOn = LOW;
    114a:	13 96       	adiw	r26, 0x03	; 3
    114c:	1c 92       	st	X, r1
    114e:	13 97       	sbiw	r26, 0x03	; 3
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:104
    SegOff = HIGH;
    1150:	14 96       	adiw	r26, 0x04	; 4
    1152:	4c 93       	st	X, r20
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:114
    DigitOff = HIGH;
    SegOn = HIGH;
    SegOff = LOW;
  }

  DigitPins[0] = digit1;
    1154:	d3 01       	movw	r26, r6
    1156:	58 96       	adiw	r26, 0x18	; 24
    1158:	2c 93       	st	X, r18
    115a:	58 97       	sbiw	r26, 0x18	; 24
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:115
  DigitPins[1] = digit2;
    115c:	59 96       	adiw	r26, 0x19	; 25
    115e:	0c 93       	st	X, r16
    1160:	59 97       	sbiw	r26, 0x19	; 25
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:116
  DigitPins[2] = digit3;
    1162:	5a 96       	adiw	r26, 0x1a	; 26
    1164:	ec 92       	st	X, r14
    1166:	5a 97       	sbiw	r26, 0x1a	; 26
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:117
  DigitPins[3] = digit4;
    1168:	5b 96       	adiw	r26, 0x1b	; 27
    116a:	cc 92       	st	X, r12
    116c:	5b 97       	sbiw	r26, 0x1b	; 27
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:118
  SegmentPins[0] = segmentA;
    116e:	5c 96       	adiw	r26, 0x1c	; 28
    1170:	fc 92       	st	X, r15
    1172:	5c 97       	sbiw	r26, 0x1c	; 28
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:119
  SegmentPins[1] = segmentB;
    1174:	5d 96       	adiw	r26, 0x1d	; 29
    1176:	fc 93       	st	X, r31
    1178:	5d 97       	sbiw	r26, 0x1d	; 29
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:120
  SegmentPins[2] = segmentC;
    117a:	5e 96       	adiw	r26, 0x1e	; 30
    117c:	ec 93       	st	X, r30
    117e:	5e 97       	sbiw	r26, 0x1e	; 30
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:121
  SegmentPins[3] = segmentD;
    1180:	5f 96       	adiw	r26, 0x1f	; 31
    1182:	7c 93       	st	X, r23
    1184:	5f 97       	sbiw	r26, 0x1f	; 31
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:122
  SegmentPins[4] = segmentE;
    1186:	90 96       	adiw	r26, 0x20	; 32
    1188:	5c 93       	st	X, r21
    118a:	90 97       	sbiw	r26, 0x20	; 32
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:123
  SegmentPins[5] = segmentF;
    118c:	91 96       	adiw	r26, 0x21	; 33
    118e:	3c 93       	st	X, r19
    1190:	91 97       	sbiw	r26, 0x21	; 33
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:124
  SegmentPins[6] = segmentG;
    1192:	92 96       	adiw	r26, 0x22	; 34
    1194:	9c 93       	st	X, r25
    1196:	92 97       	sbiw	r26, 0x22	; 34
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:125
  SegmentPins[7] = segmentDP;
    1198:	93 96       	adiw	r26, 0x23	; 35
    119a:	8c 93       	st	X, r24
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:129

  //Turn everything Off before setting pin as output
  //Set all digit pins off. Low for common anode, high for common cathode
  for (byte digit = 0 ; digit < numberOfDigits ; digit++)
    119c:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:129 (discriminator 3)
    119e:	f3 01       	movw	r30, r6
    11a0:	85 89       	ldd	r24, Z+21	; 0x15
    11a2:	18 17       	cp	r17, r24
    11a4:	e8 f4       	brcc	.+58     	; 0x11e0 <SevSeg::Begin(bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x146>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:131 (discriminator 2)
  {
    digitalWrite(DigitPins[digit], DigitOff);
    11a6:	73 01       	movw	r14, r6
    11a8:	e1 0e       	add	r14, r17
    11aa:	f1 1c       	adc	r15, r1
    11ac:	62 81       	ldd	r22, Z+2	; 0x02
    11ae:	d7 01       	movw	r26, r14
    11b0:	58 96       	adiw	r26, 0x18	; 24
    11b2:	8c 91       	ld	r24, X
    11b4:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:132 (discriminator 2)
    pinMode(DigitPins[digit], OUTPUT);
    11b8:	61 e0       	ldi	r22, 0x01	; 1
    11ba:	f7 01       	movw	r30, r14
    11bc:	80 8d       	ldd	r24, Z+24	; 0x18
    11be:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <pinMode>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:129 (discriminator 2)
  SegmentPins[6] = segmentG;
  SegmentPins[7] = segmentDP;

  //Turn everything Off before setting pin as output
  //Set all digit pins off. Low for common anode, high for common cathode
  for (byte digit = 0 ; digit < numberOfDigits ; digit++)
    11c2:	1f 5f       	subi	r17, 0xFF	; 255
    11c4:	ec cf       	rjmp	.-40     	; 0x119e <SevSeg::Begin(bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x104>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:108
    SegOn = LOW;
    SegOff = HIGH;
  }
  else
  {
    DigitOn = LOW;
    11c6:	11 96       	adiw	r26, 0x01	; 1
    11c8:	1c 92       	st	X, r1
    11ca:	11 97       	sbiw	r26, 0x01	; 1
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:109
    DigitOff = HIGH;
    11cc:	41 e0       	ldi	r20, 0x01	; 1
    11ce:	12 96       	adiw	r26, 0x02	; 2
    11d0:	4c 93       	st	X, r20
    11d2:	12 97       	sbiw	r26, 0x02	; 2
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:110
    SegOn = HIGH;
    11d4:	13 96       	adiw	r26, 0x03	; 3
    11d6:	4c 93       	st	X, r20
    11d8:	13 97       	sbiw	r26, 0x03	; 3
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:111
    SegOff = LOW;
    11da:	14 96       	adiw	r26, 0x04	; 4
    11dc:	1c 92       	st	X, r1
    11de:	ba cf       	rjmp	.-140    	; 0x1154 <SevSeg::Begin(bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xba>
    11e0:	83 01       	movw	r16, r6
    11e2:	73 01       	movw	r14, r6
    11e4:	f8 e0       	ldi	r31, 0x08	; 8
    11e6:	ef 0e       	add	r14, r31
    11e8:	f1 1c       	adc	r15, r1
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:137 (discriminator 2)
    pinMode(DigitPins[digit], OUTPUT);
  }
  //Set all segment pins off. High for common anode, low for common cathode
  for (byte seg = 0 ; seg < 8 ; seg++)
  {
    digitalWrite(SegmentPins[seg], SegOff);
    11ea:	d3 01       	movw	r26, r6
    11ec:	14 96       	adiw	r26, 0x04	; 4
    11ee:	6c 91       	ld	r22, X
    11f0:	f8 01       	movw	r30, r16
    11f2:	84 8d       	ldd	r24, Z+28	; 0x1c
    11f4:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:138 (discriminator 2)
    pinMode(SegmentPins[seg], OUTPUT);
    11f8:	61 e0       	ldi	r22, 0x01	; 1
    11fa:	d8 01       	movw	r26, r16
    11fc:	5c 96       	adiw	r26, 0x1c	; 28
    11fe:	8c 91       	ld	r24, X
    1200:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <pinMode>
    1204:	0f 5f       	subi	r16, 0xFF	; 255
    1206:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:135 (discriminator 2)
  {
    digitalWrite(DigitPins[digit], DigitOff);
    pinMode(DigitPins[digit], OUTPUT);
  }
  //Set all segment pins off. High for common anode, low for common cathode
  for (byte seg = 0 ; seg < 8 ; seg++)
    1208:	e0 16       	cp	r14, r16
    120a:	f1 06       	cpc	r15, r17
    120c:	71 f7       	brne	.-36     	; 0x11ea <SevSeg::Begin(bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x150>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:141
  {
    digitalWrite(SegmentPins[seg], SegOff);
    pinMode(SegmentPins[seg], OUTPUT);
  }

  if (digitColon != 255)
    120e:	f3 01       	movw	r30, r6
    1210:	82 85       	ldd	r24, Z+10	; 0x0a
    1212:	8f 3f       	cpi	r24, 0xFF	; 255
    1214:	a1 f0       	breq	.+40     	; 0x123e <SevSeg::Begin(bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x1a4>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:143
  {
	digitalWrite(digitColon, DigitOff);
    1216:	62 81       	ldd	r22, Z+2	; 0x02
    1218:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:144
	pinMode(digitColon, OUTPUT);
    121c:	61 e0       	ldi	r22, 0x01	; 1
    121e:	d3 01       	movw	r26, r6
    1220:	1a 96       	adiw	r26, 0x0a	; 10
    1222:	8c 91       	ld	r24, X
    1224:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <pinMode>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:145
	digitalWrite(segmentColon, SegOff);
    1228:	f3 01       	movw	r30, r6
    122a:	64 81       	ldd	r22, Z+4	; 0x04
    122c:	84 85       	ldd	r24, Z+12	; 0x0c
    122e:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:146
	pinMode(segmentColon, OUTPUT);
    1232:	61 e0       	ldi	r22, 0x01	; 1
    1234:	d3 01       	movw	r26, r6
    1236:	1c 96       	adiw	r26, 0x0c	; 12
    1238:	8c 91       	ld	r24, X
    123a:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <pinMode>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:148
  }
  if (digitApostrophe != 255)
    123e:	f3 01       	movw	r30, r6
    1240:	81 85       	ldd	r24, Z+9	; 0x09
    1242:	8f 3f       	cpi	r24, 0xFF	; 255
    1244:	01 f1       	breq	.+64     	; 0x1286 <SevSeg::Begin(bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x1ec>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:150
  {
	digitalWrite(digitApostrophe, DigitOff);
    1246:	62 81       	ldd	r22, Z+2	; 0x02
    1248:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:151
	pinMode(digitApostrophe, OUTPUT);
    124c:	61 e0       	ldi	r22, 0x01	; 1
    124e:	d3 01       	movw	r26, r6
    1250:	19 96       	adiw	r26, 0x09	; 9
    1252:	8c 91       	ld	r24, X
    1254:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <pinMode>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:152
	digitalWrite(segmentApostrophe, SegOff);
    1258:	f3 01       	movw	r30, r6
    125a:	64 81       	ldd	r22, Z+4	; 0x04
    125c:	83 85       	ldd	r24, Z+11	; 0x0b
    125e:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:153
	pinMode(segmentApostrophe, OUTPUT);
    1262:	61 e0       	ldi	r22, 0x01	; 1
    1264:	d3 01       	movw	r26, r6
    1266:	1b 96       	adiw	r26, 0x0b	; 11
    1268:	8c 91       	ld	r24, X
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:155
  }
}
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	ff 90       	pop	r15
    1274:	ef 90       	pop	r14
    1276:	df 90       	pop	r13
    1278:	cf 90       	pop	r12
    127a:	af 90       	pop	r10
    127c:	8f 90       	pop	r8
    127e:	7f 90       	pop	r7
    1280:	6f 90       	pop	r6
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:153
  if (digitApostrophe != 255)
  {
	digitalWrite(digitApostrophe, DigitOff);
	pinMode(digitApostrophe, OUTPUT);
	digitalWrite(segmentApostrophe, SegOff);
	pinMode(segmentApostrophe, OUTPUT);
    1282:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <pinMode>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:155
  }
}
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	ff 90       	pop	r15
    1290:	ef 90       	pop	r14
    1292:	df 90       	pop	r13
    1294:	cf 90       	pop	r12
    1296:	af 90       	pop	r10
    1298:	8f 90       	pop	r8
    129a:	7f 90       	pop	r7
    129c:	6f 90       	pop	r6
    129e:	08 95       	ret

000012a0 <SevSeg::Begin(bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN6SevSeg5BeginEbhhhhhhhhhhhhh():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:166
//The digitApostrophe, segmentApostrophe, and dig/segColon are set to 255 and the normal .Begin is called
void SevSeg::Begin(boolean mode_in, byte numOfDigits,
	byte dig1, byte dig2, byte dig3, byte dig4,
	byte segA, byte segB, byte segC, byte segD, byte segE, byte segF, byte segG,
	byte segDP)
{
    12a0:	8f 92       	push	r8
    12a2:	af 92       	push	r10
    12a4:	cf 92       	push	r12
    12a6:	ef 92       	push	r14
    12a8:	0f 93       	push	r16
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:167
  Begin(mode_in, numOfDigits, dig1, dig2, dig3, dig4, 255, 255, segA, segB, segC,
    12b2:	3f ef       	ldi	r19, 0xFF	; 255
    12b4:	3f 93       	push	r19
    12b6:	3f 93       	push	r19
    12b8:	3f 85       	ldd	r19, Y+15	; 0x0f
    12ba:	3f 93       	push	r19
    12bc:	3e 85       	ldd	r19, Y+14	; 0x0e
    12be:	3f 93       	push	r19
    12c0:	3d 85       	ldd	r19, Y+13	; 0x0d
    12c2:	3f 93       	push	r19
    12c4:	3c 85       	ldd	r19, Y+12	; 0x0c
    12c6:	3f 93       	push	r19
    12c8:	3b 85       	ldd	r19, Y+11	; 0x0b
    12ca:	3f 93       	push	r19
    12cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    12ce:	3f 93       	push	r19
    12d0:	8f 92       	push	r8
    12d2:	af 92       	push	r10
    12d4:	88 24       	eor	r8, r8
    12d6:	8a 94       	dec	r8
    12d8:	aa 24       	eor	r10, r10
    12da:	aa 94       	dec	r10
    12dc:	0e 94 4d 08 	call	0x109a	; 0x109a <SevSeg::Begin(bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:169
		segD, segE, segF, segG, segDP, 255, 255);
}
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	de bf       	out	0x3e, r29	; 62
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	0f 91       	pop	r16
    12f0:	ef 90       	pop	r14
    12f2:	cf 90       	pop	r12
    12f4:	af 90       	pop	r10
    12f6:	8f 90       	pop	r8
    12f8:	08 95       	ret

000012fa <SevSeg::SetBrightness(unsigned char)>:
_ZN6SevSeg13SetBrightnessEh():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:176
//Set the display brightness
/*******************************************************************************************/
//Given a value between 0 and 100 (0% and 100%), set the brightness variable on the display
//We need to error check and map the incoming value
void SevSeg::SetBrightness(byte percentBright)
{
    12fa:	af 92       	push	r10
    12fc:	bf 92       	push	r11
    12fe:	cf 92       	push	r12
    1300:	df 92       	push	r13
    1302:	ef 92       	push	r14
    1304:	ff 92       	push	r15
    1306:	0f 93       	push	r16
    1308:	1f 93       	push	r17
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	ec 01       	movw	r28, r24
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:179
	//Error check and scale brightnessLevel
	if(percentBright > 100) percentBright = 100;
	brightnessDelay = map(percentBright, 0, 100, 0, FRAMEPERIOD); //map brightnessDelay to 0 to the max which is framePeriod
    1310:	65 36       	cpi	r22, 0x65	; 101
    1312:	08 f0       	brcs	.+2      	; 0x1316 <SevSeg::SetBrightness(unsigned char)+0x1c>
    1314:	64 e6       	ldi	r22, 0x64	; 100
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	1f 92       	push	r1
    131e:	1f 92       	push	r1
    1320:	27 e0       	ldi	r18, 0x07	; 7
    1322:	2f 93       	push	r18
    1324:	20 ed       	ldi	r18, 0xD0	; 208
    1326:	2f 93       	push	r18
    1328:	a1 2c       	mov	r10, r1
    132a:	b1 2c       	mov	r11, r1
    132c:	65 01       	movw	r12, r10
    132e:	14 e6       	ldi	r17, 0x64	; 100
    1330:	e1 2e       	mov	r14, r17
    1332:	f1 2c       	mov	r15, r1
    1334:	00 e0       	ldi	r16, 0x00	; 0
    1336:	10 e0       	ldi	r17, 0x00	; 0
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	a9 01       	movw	r20, r18
    133e:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <map(long, long, long, long, long)>
    1342:	7f 8b       	std	Y+23, r23	; 0x17
    1344:	6e 8b       	std	Y+22, r22	; 0x16
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:180
}
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	1f 91       	pop	r17
    1354:	0f 91       	pop	r16
    1356:	ff 90       	pop	r15
    1358:	ef 90       	pop	r14
    135a:	df 90       	pop	r13
    135c:	cf 90       	pop	r12
    135e:	bf 90       	pop	r11
    1360:	af 90       	pop	r10
    1362:	08 95       	ret

00001364 <SevSeg::DisplayString(char const*, unsigned char)>:
_ZN6SevSeg13DisplayStringEPKch():
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:190
//Given a string such as "-A32", we display -A32
//Each digit is displayed for ~2000us, and cycles through the 4 digits
//After running through the 4 numbers, the display is turned off
//Will turn the display on for a given amount of time - this helps control brightness
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
    1364:	4f 92       	push	r4
    1366:	5f 92       	push	r5
    1368:	7f 92       	push	r7
    136a:	9f 92       	push	r9
    136c:	af 92       	push	r10
    136e:	bf 92       	push	r11
    1370:	cf 92       	push	r12
    1372:	df 92       	push	r13
    1374:	ef 92       	push	r14
    1376:	ff 92       	push	r15
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	ec 01       	movw	r28, r24
    1380:	6b 01       	movw	r12, r22
    1382:	74 2e       	mov	r7, r20
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:192
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
    1384:	11 e0       	ldi	r17, 0x01	; 1
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:238
			if (chr & (1<<2)) digitalWrite(segmentE, SegOn);
			if (chr & (1<<1)) digitalWrite(segmentF, SegOn);
			if (chr & (1<<0)) digitalWrite(segmentG, SegOn);
		}
		//Service the decimal point, apostrophe and colon
		if ((DecAposColon & (1<<(digit-1))) && (digit < 5)) //Test DecAposColon to see if we need to turn on a decimal point
    1386:	a4 2e       	mov	r10, r20
    1388:	b1 2c       	mov	r11, r1
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:273
			  digitalWrite(digit4, DigitOff);
			  break;
			//This only currently works for 4 digits
		}
		// The display is on for microSeconds(brightnessLevel + 1), now turn off for the remainder of the framePeriod
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
    138a:	81 ed       	ldi	r24, 0xD1	; 209
    138c:	e8 2e       	mov	r14, r24
    138e:	87 e0       	ldi	r24, 0x07	; 7
    1390:	f8 2e       	mov	r15, r24
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:192 (discriminator 1)
//After running through the 4 numbers, the display is turned off
//Will turn the display on for a given amount of time - this helps control brightness
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
    1392:	8d 89       	ldd	r24, Y+21	; 0x15
    1394:	81 17       	cp	r24, r17
    1396:	08 f4       	brcc	.+2      	; 0x139a <SevSeg::DisplayString(char const*, unsigned char)+0x36>
    1398:	cd c0       	rjmp	.+410    	; 0x1534 <SevSeg::DisplayString(char const*, unsigned char)+0x1d0>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:194
	{
		switch(digit)
    139a:	41 2e       	mov	r4, r17
    139c:	51 2c       	mov	r5, r1
    139e:	12 30       	cpi	r17, 0x02	; 2
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <SevSeg::DisplayString(char const*, unsigned char)+0x40>
    13a2:	41 c0       	rjmp	.+130    	; 0x1426 <SevSeg::DisplayString(char const*, unsigned char)+0xc2>
    13a4:	a0 f5       	brcc	.+104    	; 0x140e <SevSeg::DisplayString(char const*, unsigned char)+0xaa>
    13a6:	11 30       	cpi	r17, 0x01	; 1
    13a8:	c9 f1       	breq	.+114    	; 0x141c <SevSeg::DisplayString(char const*, unsigned char)+0xb8>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:215

		//Here we access the array of segments
		//This could be cleaned up a bit but it works
		//displayCharacter(toDisplay[digit-1]); //Now display this digit
		// displayArray (defined in SevSeg.h) decides which segments are turned on for each number or symbol
		unsigned char characterToDisplay = toDisplay[digit-1];
    13aa:	f6 01       	movw	r30, r12
    13ac:	e4 0d       	add	r30, r4
    13ae:	f5 1d       	adc	r31, r5
    13b0:	31 97       	sbiw	r30, 0x01	; 1
    13b2:	90 80       	ld	r9, Z
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:216
		if (characterToDisplay & 0x80)	// bit 7 enables bit-per-segment control
    13b4:	97 fe       	sbrs	r9, 7
    13b6:	3d c0       	rjmp	.+122    	; 0x1432 <SevSeg::DisplayString(char const*, unsigned char)+0xce>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:218
		{	// Each bit of characterToDisplay turns on a single segment (from A-to-G)
			if (characterToDisplay & 0x01) digitalWrite(segmentA, SegOn);
    13b8:	90 fe       	sbrs	r9, 0
    13ba:	04 c0       	rjmp	.+8      	; 0x13c4 <SevSeg::DisplayString(char const*, unsigned char)+0x60>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:218 (discriminator 1)
    13bc:	6b 81       	ldd	r22, Y+3	; 0x03
    13be:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c0:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:219
			if (characterToDisplay & 0x02) digitalWrite(segmentB, SegOn);
    13c4:	91 fe       	sbrs	r9, 1
    13c6:	04 c0       	rjmp	.+8      	; 0x13d0 <SevSeg::DisplayString(char const*, unsigned char)+0x6c>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:219 (discriminator 1)
    13c8:	6b 81       	ldd	r22, Y+3	; 0x03
    13ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    13cc:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:220
			if (characterToDisplay & 0x04) digitalWrite(segmentC, SegOn);
    13d0:	92 fe       	sbrs	r9, 2
    13d2:	04 c0       	rjmp	.+8      	; 0x13dc <SevSeg::DisplayString(char const*, unsigned char)+0x78>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:220 (discriminator 1)
    13d4:	6b 81       	ldd	r22, Y+3	; 0x03
    13d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d8:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:221
			if (characterToDisplay & 0x08) digitalWrite(segmentD, SegOn);
    13dc:	93 fe       	sbrs	r9, 3
    13de:	04 c0       	rjmp	.+8      	; 0x13e8 <SevSeg::DisplayString(char const*, unsigned char)+0x84>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:221 (discriminator 1)
    13e0:	6b 81       	ldd	r22, Y+3	; 0x03
    13e2:	88 89       	ldd	r24, Y+16	; 0x10
    13e4:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:222
			if (characterToDisplay & 0x10) digitalWrite(segmentE, SegOn);
    13e8:	94 fe       	sbrs	r9, 4
    13ea:	04 c0       	rjmp	.+8      	; 0x13f4 <SevSeg::DisplayString(char const*, unsigned char)+0x90>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:222 (discriminator 1)
    13ec:	6b 81       	ldd	r22, Y+3	; 0x03
    13ee:	89 89       	ldd	r24, Y+17	; 0x11
    13f0:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:223
			if (characterToDisplay & 0x20) digitalWrite(segmentF, SegOn);
    13f4:	95 fe       	sbrs	r9, 5
    13f6:	04 c0       	rjmp	.+8      	; 0x1400 <SevSeg::DisplayString(char const*, unsigned char)+0x9c>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:223 (discriminator 1)
    13f8:	6b 81       	ldd	r22, Y+3	; 0x03
    13fa:	8a 89       	ldd	r24, Y+18	; 0x12
    13fc:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:224
			if (characterToDisplay & 0x40) digitalWrite(segmentG, SegOn);
    1400:	96 fe       	sbrs	r9, 6
    1402:	42 c0       	rjmp	.+132    	; 0x1488 <SevSeg::DisplayString(char const*, unsigned char)+0x124>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:235 (discriminator 1)
			if (chr & (1<<5)) digitalWrite(segmentB, SegOn);
			if (chr & (1<<4)) digitalWrite(segmentC, SegOn);
			if (chr & (1<<3)) digitalWrite(segmentD, SegOn);
			if (chr & (1<<2)) digitalWrite(segmentE, SegOn);
			if (chr & (1<<1)) digitalWrite(segmentF, SegOn);
			if (chr & (1<<0)) digitalWrite(segmentG, SegOn);
    1404:	6b 81       	ldd	r22, Y+3	; 0x03
    1406:	8b 89       	ldd	r24, Y+19	; 0x13
    1408:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
    140c:	3d c0       	rjmp	.+122    	; 0x1488 <SevSeg::DisplayString(char const*, unsigned char)+0x124>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:194
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
	{
		switch(digit)
    140e:	13 30       	cpi	r17, 0x03	; 3
    1410:	69 f0       	breq	.+26     	; 0x142c <SevSeg::DisplayString(char const*, unsigned char)+0xc8>
    1412:	14 30       	cpi	r17, 0x04	; 4
    1414:	51 f6       	brne	.-108    	; 0x13aa <SevSeg::DisplayString(char const*, unsigned char)+0x46>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:206
				break;
			case 3:
				digitalWrite(digit3, DigitOn);
				break;
			case 4:
				digitalWrite(digit4, DigitOn);
    1416:	69 81       	ldd	r22, Y+1	; 0x01
    1418:	88 85       	ldd	r24, Y+8	; 0x08
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <SevSeg::DisplayString(char const*, unsigned char)+0xbc>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:197
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
	{
		switch(digit)
		{
			case 1:
				digitalWrite(digit1, DigitOn);
    141c:	69 81       	ldd	r22, Y+1	; 0x01
    141e:	8d 81       	ldd	r24, Y+5	; 0x05
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:206
				break;
			case 3:
				digitalWrite(digit3, DigitOn);
				break;
			case 4:
				digitalWrite(digit4, DigitOn);
    1420:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:207
				break;
    1424:	c2 cf       	rjmp	.-124    	; 0x13aa <SevSeg::DisplayString(char const*, unsigned char)+0x46>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:200
		{
			case 1:
				digitalWrite(digit1, DigitOn);
				break;
			case 2:
				digitalWrite(digit2, DigitOn);
    1426:	69 81       	ldd	r22, Y+1	; 0x01
    1428:	8e 81       	ldd	r24, Y+6	; 0x06
    142a:	fa cf       	rjmp	.-12     	; 0x1420 <SevSeg::DisplayString(char const*, unsigned char)+0xbc>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:203
				break;
			case 3:
				digitalWrite(digit3, DigitOn);
    142c:	69 81       	ldd	r22, Y+1	; 0x01
    142e:	8f 81       	ldd	r24, Y+7	; 0x07
    1430:	f7 cf       	rjmp	.-18     	; 0x1420 <SevSeg::DisplayString(char const*, unsigned char)+0xbc>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:228
			if (characterToDisplay & 0x20) digitalWrite(segmentF, SegOn);
			if (characterToDisplay & 0x40) digitalWrite(segmentG, SegOn);
		}
		else
		{
			const uint8_t chr = pgm_read_byte(&characterArray[characterToDisplay]);
    1432:	e9 2d       	mov	r30, r9
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	e8 59       	subi	r30, 0x98	; 152
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	94 90       	lpm	r9, Z
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:229
			if (chr & (1<<6)) digitalWrite(segmentA, SegOn);
    143c:	96 fe       	sbrs	r9, 6
    143e:	04 c0       	rjmp	.+8      	; 0x1448 <SevSeg::DisplayString(char const*, unsigned char)+0xe4>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:229 (discriminator 1)
    1440:	6b 81       	ldd	r22, Y+3	; 0x03
    1442:	8d 85       	ldd	r24, Y+13	; 0x0d
    1444:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:230
			if (chr & (1<<5)) digitalWrite(segmentB, SegOn);
    1448:	95 fe       	sbrs	r9, 5
    144a:	04 c0       	rjmp	.+8      	; 0x1454 <SevSeg::DisplayString(char const*, unsigned char)+0xf0>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:230 (discriminator 1)
    144c:	6b 81       	ldd	r22, Y+3	; 0x03
    144e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1450:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:231
			if (chr & (1<<4)) digitalWrite(segmentC, SegOn);
    1454:	94 fe       	sbrs	r9, 4
    1456:	04 c0       	rjmp	.+8      	; 0x1460 <SevSeg::DisplayString(char const*, unsigned char)+0xfc>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:231 (discriminator 1)
    1458:	6b 81       	ldd	r22, Y+3	; 0x03
    145a:	8f 85       	ldd	r24, Y+15	; 0x0f
    145c:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:232
			if (chr & (1<<3)) digitalWrite(segmentD, SegOn);
    1460:	93 fe       	sbrs	r9, 3
    1462:	04 c0       	rjmp	.+8      	; 0x146c <SevSeg::DisplayString(char const*, unsigned char)+0x108>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:232 (discriminator 1)
    1464:	6b 81       	ldd	r22, Y+3	; 0x03
    1466:	88 89       	ldd	r24, Y+16	; 0x10
    1468:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:233
			if (chr & (1<<2)) digitalWrite(segmentE, SegOn);
    146c:	92 fe       	sbrs	r9, 2
    146e:	04 c0       	rjmp	.+8      	; 0x1478 <SevSeg::DisplayString(char const*, unsigned char)+0x114>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:233 (discriminator 1)
    1470:	6b 81       	ldd	r22, Y+3	; 0x03
    1472:	89 89       	ldd	r24, Y+17	; 0x11
    1474:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:234
			if (chr & (1<<1)) digitalWrite(segmentF, SegOn);
    1478:	91 fe       	sbrs	r9, 1
    147a:	04 c0       	rjmp	.+8      	; 0x1484 <SevSeg::DisplayString(char const*, unsigned char)+0x120>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:234 (discriminator 1)
    147c:	6b 81       	ldd	r22, Y+3	; 0x03
    147e:	8a 89       	ldd	r24, Y+18	; 0x12
    1480:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:235
			if (chr & (1<<0)) digitalWrite(segmentG, SegOn);
    1484:	90 fc       	sbrc	r9, 0
    1486:	be cf       	rjmp	.-132    	; 0x1404 <SevSeg::DisplayString(char const*, unsigned char)+0xa0>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:238
		}
		//Service the decimal point, apostrophe and colon
		if ((DecAposColon & (1<<(digit-1))) && (digit < 5)) //Test DecAposColon to see if we need to turn on a decimal point
    1488:	c2 01       	movw	r24, r4
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	95 01       	movw	r18, r10
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <SevSeg::DisplayString(char const*, unsigned char)+0x130>
    1490:	35 95       	asr	r19
    1492:	27 95       	ror	r18
    1494:	8a 95       	dec	r24
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <SevSeg::DisplayString(char const*, unsigned char)+0x12c>
    1498:	20 ff       	sbrs	r18, 0
    149a:	06 c0       	rjmp	.+12     	; 0x14a8 <SevSeg::DisplayString(char const*, unsigned char)+0x144>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:238 (discriminator 1)
    149c:	15 30       	cpi	r17, 0x05	; 5
    149e:	20 f4       	brcc	.+8      	; 0x14a8 <SevSeg::DisplayString(char const*, unsigned char)+0x144>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:239
			digitalWrite(segmentDP, SegOn);
    14a0:	6b 81       	ldd	r22, Y+3	; 0x03
    14a2:	8c 89       	ldd	r24, Y+20	; 0x14
    14a4:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:241

		delayMicroseconds(brightnessDelay + 1); //Display this digit for a fraction of a second (between 1us and 5000us, 500-2000 is pretty good)
    14a8:	8e 89       	ldd	r24, Y+22	; 0x16
    14aa:	9f 89       	ldd	r25, Y+23	; 0x17
    14ac:	01 96       	adiw	r24, 0x01	; 1
    14ae:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <delayMicroseconds>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:246
		//The + 1 is a bit of a hack but it removes the possible zero display (0 causes display to become bright and flickery)
		//If you set this too long, the display will start to flicker. Set it to 25000 for some fun.

		//Turn off all segments
		digitalWrite(segmentA, SegOff);
    14b2:	6c 81       	ldd	r22, Y+4	; 0x04
    14b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b6:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:247
		digitalWrite(segmentB, SegOff);
    14ba:	6c 81       	ldd	r22, Y+4	; 0x04
    14bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    14be:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:248
		digitalWrite(segmentC, SegOff);
    14c2:	6c 81       	ldd	r22, Y+4	; 0x04
    14c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    14c6:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:249
		digitalWrite(segmentD, SegOff);
    14ca:	6c 81       	ldd	r22, Y+4	; 0x04
    14cc:	88 89       	ldd	r24, Y+16	; 0x10
    14ce:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:250
		digitalWrite(segmentE, SegOff);
    14d2:	6c 81       	ldd	r22, Y+4	; 0x04
    14d4:	89 89       	ldd	r24, Y+17	; 0x11
    14d6:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:251
		digitalWrite(segmentF, SegOff);
    14da:	6c 81       	ldd	r22, Y+4	; 0x04
    14dc:	8a 89       	ldd	r24, Y+18	; 0x12
    14de:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:252
		digitalWrite(segmentG, SegOff);
    14e2:	6c 81       	ldd	r22, Y+4	; 0x04
    14e4:	8b 89       	ldd	r24, Y+19	; 0x13
    14e6:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:253
		digitalWrite(segmentDP, SegOff);
    14ea:	6c 81       	ldd	r22, Y+4	; 0x04
    14ec:	8c 89       	ldd	r24, Y+20	; 0x14
    14ee:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:256

		//Turn off this digit
		switch(digit)
    14f2:	12 30       	cpi	r17, 0x02	; 2
    14f4:	c9 f0       	breq	.+50     	; 0x1528 <SevSeg::DisplayString(char const*, unsigned char)+0x1c4>
    14f6:	60 f4       	brcc	.+24     	; 0x1510 <SevSeg::DisplayString(char const*, unsigned char)+0x1ac>
    14f8:	11 30       	cpi	r17, 0x01	; 1
    14fa:	89 f0       	breq	.+34     	; 0x151e <SevSeg::DisplayString(char const*, unsigned char)+0x1ba>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:273 (discriminator 2)
			  digitalWrite(digit4, DigitOff);
			  break;
			//This only currently works for 4 digits
		}
		// The display is on for microSeconds(brightnessLevel + 1), now turn off for the remainder of the framePeriod
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
    14fc:	8e 89       	ldd	r24, Y+22	; 0x16
    14fe:	9f 89       	ldd	r25, Y+23	; 0x17
    1500:	97 01       	movw	r18, r14
    1502:	28 1b       	sub	r18, r24
    1504:	39 0b       	sbc	r19, r25
    1506:	c9 01       	movw	r24, r18
    1508:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <delayMicroseconds>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:192 (discriminator 2)
//After running through the 4 numbers, the display is turned off
//Will turn the display on for a given amount of time - this helps control brightness
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
    150c:	1f 5f       	subi	r17, 0xFF	; 255
    150e:	41 cf       	rjmp	.-382    	; 0x1392 <SevSeg::DisplayString(char const*, unsigned char)+0x2e>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:256
		digitalWrite(segmentF, SegOff);
		digitalWrite(segmentG, SegOff);
		digitalWrite(segmentDP, SegOff);

		//Turn off this digit
		switch(digit)
    1510:	13 30       	cpi	r17, 0x03	; 3
    1512:	69 f0       	breq	.+26     	; 0x152e <SevSeg::DisplayString(char const*, unsigned char)+0x1ca>
    1514:	14 30       	cpi	r17, 0x04	; 4
    1516:	91 f7       	brne	.-28     	; 0x14fc <SevSeg::DisplayString(char const*, unsigned char)+0x198>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:268
			  break;
			case 3:
			  digitalWrite(digit3, DigitOff);
			  break;
			case 4:
			  digitalWrite(digit4, DigitOff);
    1518:	6a 81       	ldd	r22, Y+2	; 0x02
    151a:	88 85       	ldd	r24, Y+8	; 0x08
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <SevSeg::DisplayString(char const*, unsigned char)+0x1be>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:259

		//Turn off this digit
		switch(digit)
		{
			case 1:
			  digitalWrite(digit1, DigitOff);
    151e:	6a 81       	ldd	r22, Y+2	; 0x02
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:268
			  break;
			case 3:
			  digitalWrite(digit3, DigitOff);
			  break;
			case 4:
			  digitalWrite(digit4, DigitOff);
    1522:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:269
			  break;
    1526:	ea cf       	rjmp	.-44     	; 0x14fc <SevSeg::DisplayString(char const*, unsigned char)+0x198>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:262
		{
			case 1:
			  digitalWrite(digit1, DigitOff);
			  break;
			case 2:
			  digitalWrite(digit2, DigitOff);
    1528:	6a 81       	ldd	r22, Y+2	; 0x02
    152a:	8e 81       	ldd	r24, Y+6	; 0x06
    152c:	fa cf       	rjmp	.-12     	; 0x1522 <SevSeg::DisplayString(char const*, unsigned char)+0x1be>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:265
			  break;
			case 3:
			  digitalWrite(digit3, DigitOff);
    152e:	6a 81       	ldd	r22, Y+2	; 0x02
    1530:	8f 81       	ldd	r24, Y+7	; 0x07
    1532:	f7 cf       	rjmp	.-18     	; 0x1522 <SevSeg::DisplayString(char const*, unsigned char)+0x1be>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:279
	}

	//After we've gone through the digits, we control the colon and apostrophe (if the display supports it)

	//Turn on the colon and/or apostrophe
	if ((digitColon != 255) || (digitApostrophe != 255))
    1534:	8a 85       	ldd	r24, Y+10	; 0x0a
    1536:	8f 3f       	cpi	r24, 0xFF	; 255
    1538:	19 f4       	brne	.+6      	; 0x1540 <SevSeg::DisplayString(char const*, unsigned char)+0x1dc>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:279 (discriminator 1)
    153a:	99 85       	ldd	r25, Y+9	; 0x09
    153c:	9f 3f       	cpi	r25, 0xFF	; 255
    153e:	e9 f1       	breq	.+122    	; 0x15ba <SevSeg::DisplayString(char const*, unsigned char)+0x256>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:281
	{
		if (DecAposColon & (1<<4)) //Test to see if we need to turn on the Colon
    1540:	74 fe       	sbrs	r7, 4
    1542:	07 c0       	rjmp	.+14     	; 0x1552 <SevSeg::DisplayString(char const*, unsigned char)+0x1ee>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:283
		{
			digitalWrite(digitColon, DigitOn);
    1544:	69 81       	ldd	r22, Y+1	; 0x01
    1546:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:284
			digitalWrite(segmentColon, SegOn);
    154a:	6b 81       	ldd	r22, Y+3	; 0x03
    154c:	8c 85       	ldd	r24, Y+12	; 0x0c
    154e:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:286
		}
		if (DecAposColon & (1<<5)) //Test DecAposColon to see if we need to turn on Apostrophe
    1552:	75 fe       	sbrs	r7, 5
    1554:	08 c0       	rjmp	.+16     	; 0x1566 <SevSeg::DisplayString(char const*, unsigned char)+0x202>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:288
		{
			digitalWrite(digitApostrophe, DigitOn);
    1556:	69 81       	ldd	r22, Y+1	; 0x01
    1558:	89 85       	ldd	r24, Y+9	; 0x09
    155a:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:289
			digitalWrite(segmentApostrophe, SegOn);
    155e:	6b 81       	ldd	r22, Y+3	; 0x03
    1560:	8b 85       	ldd	r24, Y+11	; 0x0b
    1562:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:291
		}
		delayMicroseconds(brightnessDelay + 1); //Display this digit for a fraction of a second (between 1us and 5000us, 500-2000 is pretty good)
    1566:	8e 89       	ldd	r24, Y+22	; 0x16
    1568:	9f 89       	ldd	r25, Y+23	; 0x17
    156a:	01 96       	adiw	r24, 0x01	; 1
    156c:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <delayMicroseconds>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:294

		//Turn off the colon and/or apostrophe
		digitalWrite(digitColon, DigitOff);
    1570:	6a 81       	ldd	r22, Y+2	; 0x02
    1572:	8a 85       	ldd	r24, Y+10	; 0x0a
    1574:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:295
		digitalWrite(segmentColon, SegOff);
    1578:	6c 81       	ldd	r22, Y+4	; 0x04
    157a:	8c 85       	ldd	r24, Y+12	; 0x0c
    157c:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:296
		digitalWrite(digitApostrophe, DigitOff);
    1580:	6a 81       	ldd	r22, Y+2	; 0x02
    1582:	89 85       	ldd	r24, Y+9	; 0x09
    1584:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:297
		digitalWrite(segmentApostrophe, SegOff);
    1588:	6c 81       	ldd	r22, Y+4	; 0x04
    158a:	8b 85       	ldd	r24, Y+11	; 0x0b
    158c:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <digitalWrite>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:298
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
    1590:	2e 89       	ldd	r18, Y+22	; 0x16
    1592:	3f 89       	ldd	r19, Y+23	; 0x17
    1594:	81 ed       	ldi	r24, 0xD1	; 209
    1596:	97 e0       	ldi	r25, 0x07	; 7
    1598:	82 1b       	sub	r24, r18
    159a:	93 0b       	sbc	r25, r19
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:301
	}

}
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	1f 91       	pop	r17
    15a2:	ff 90       	pop	r15
    15a4:	ef 90       	pop	r14
    15a6:	df 90       	pop	r13
    15a8:	cf 90       	pop	r12
    15aa:	bf 90       	pop	r11
    15ac:	af 90       	pop	r10
    15ae:	9f 90       	pop	r9
    15b0:	7f 90       	pop	r7
    15b2:	5f 90       	pop	r5
    15b4:	4f 90       	pop	r4
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:298
		//Turn off the colon and/or apostrophe
		digitalWrite(digitColon, DigitOff);
		digitalWrite(segmentColon, SegOff);
		digitalWrite(digitApostrophe, DigitOff);
		digitalWrite(segmentApostrophe, SegOff);
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
    15b6:	0c 94 58 0e 	jmp	0x1cb0	; 0x1cb0 <delayMicroseconds>
C:\Users\Noor\Desktop\DriveSync\MICROCONTOLLER\2022\Q4\003-1PH-SERVO-ATMega328P/SevSeg.cpp:301
	}

}
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	1f 91       	pop	r17
    15c0:	ff 90       	pop	r15
    15c2:	ef 90       	pop	r14
    15c4:	df 90       	pop	r13
    15c6:	cf 90       	pop	r12
    15c8:	bf 90       	pop	r11
    15ca:	af 90       	pop	r10
    15cc:	9f 90       	pop	r9
    15ce:	7f 90       	pop	r7
    15d0:	5f 90       	pop	r5
    15d2:	4f 90       	pop	r4
    15d4:	08 95       	ret

000015d6 <BlockNot::reset(unsigned long)>:
_ZN8BlockNot5resetEm():
c:\Users\Noor\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:48
    if(state == STOPPED)
        stop();
    initDuration(time);
    reset();
    if (global == GLOBAL_RESET) addToTimerList();
}
    15d6:	0f 93       	push	r16
    15d8:	1f 93       	push	r17
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	ec 01       	movw	r28, r24
    15e0:	41 15       	cp	r20, r1
    15e2:	51 05       	cpc	r21, r1
    15e4:	61 05       	cpc	r22, r1
    15e6:	71 05       	cpc	r23, r1
    15e8:	31 f4       	brne	.+12     	; 0x15f6 <BlockNot::reset(unsigned long)+0x20>
    15ea:	8b 89       	ldd	r24, Y+19	; 0x13
    15ec:	9c 89       	ldd	r25, Y+20	; 0x14
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	61 f0       	breq	.+24     	; 0x160a <BlockNot::reset(unsigned long)+0x34>
    15f2:	03 97       	sbiw	r24, 0x03	; 3
    15f4:	b8 f0       	brcs	.+46     	; 0x1624 <BlockNot::reset(unsigned long)+0x4e>
_ZN8BlockNot10resetTimerEm():
    15f6:	48 83       	st	Y, r20
    15f8:	59 83       	std	Y+1, r21	; 0x01
    15fa:	6a 83       	std	Y+2, r22	; 0x02
    15fc:	7b 83       	std	Y+3, r23	; 0x03
    15fe:	1a 8a       	std	Y+18, r1	; 0x12
_ZN8BlockNot5resetEm():
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	08 95       	ret
    160a:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <micros>
    160e:	08 85       	ldd	r16, Y+8	; 0x08
    1610:	19 85       	ldd	r17, Y+9	; 0x09
    1612:	2a 85       	ldd	r18, Y+10	; 0x0a
    1614:	3b 85       	ldd	r19, Y+11	; 0x0b
    1616:	ab 01       	movw	r20, r22
    1618:	bc 01       	movw	r22, r24
    161a:	40 0f       	add	r20, r16
    161c:	51 1f       	adc	r21, r17
    161e:	62 1f       	adc	r22, r18
    1620:	73 1f       	adc	r23, r19
    1622:	e9 cf       	rjmp	.-46     	; 0x15f6 <BlockNot::reset(unsigned long)+0x20>
    1624:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <millis>
    1628:	0c 81       	ldd	r16, Y+4	; 0x04
    162a:	1d 81       	ldd	r17, Y+5	; 0x05
    162c:	2e 81       	ldd	r18, Y+6	; 0x06
    162e:	3f 81       	ldd	r19, Y+7	; 0x07
    1630:	f2 cf       	rjmp	.-28     	; 0x1616 <BlockNot::reset(unsigned long)+0x40>

00001632 <BlockNot::initDuration(unsigned long)>:
_ZN8BlockNot12initDurationEm():
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	ec 01       	movw	r28, r24
    1638:	cb 01       	movw	r24, r22
    163a:	ba 01       	movw	r22, r20
    163c:	2b 89       	ldd	r18, Y+19	; 0x13
    163e:	3c 89       	ldd	r19, Y+20	; 0x14
    1640:	21 30       	cpi	r18, 0x01	; 1
    1642:	31 05       	cpc	r19, r1
    1644:	a1 f0       	breq	.+40     	; 0x166e <BlockNot::initDuration(unsigned long)+0x3c>
    1646:	30 f0       	brcs	.+12     	; 0x1654 <BlockNot::initDuration(unsigned long)+0x22>
    1648:	22 30       	cpi	r18, 0x02	; 2
    164a:	31 05       	cpc	r19, r1
    164c:	b9 f0       	breq	.+46     	; 0x167c <BlockNot::initDuration(unsigned long)+0x4a>
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	08 95       	ret
    1654:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__floatunsisf>
_ZN8BlockNot5cTime7micro_taSEd():
    1658:	2d eb       	ldi	r18, 0xBD	; 189
    165a:	37 e3       	ldi	r19, 0x37	; 55
    165c:	46 e8       	ldi	r20, 0x86	; 134
    165e:	55 e3       	ldi	r21, 0x35	; 53
_ZN8BlockNot5cTime7milli_taSEd():
    1660:	0e 94 22 10 	call	0x2044	; 0x2044 <__mulsf3>
_ZN8BlockNot12initDurationEm():
    1664:	6d 8b       	std	Y+21, r22	; 0x15
    1666:	7e 8b       	std	Y+22, r23	; 0x16
    1668:	8f 8b       	std	Y+23, r24	; 0x17
    166a:	98 8f       	std	Y+24, r25	; 0x18
    166c:	f0 cf       	rjmp	.-32     	; 0x164e <BlockNot::initDuration(unsigned long)+0x1c>
    166e:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__floatunsisf>
_ZN8BlockNot5cTime7milli_taSEd():
    1672:	2f e6       	ldi	r18, 0x6F	; 111
    1674:	32 e1       	ldi	r19, 0x12	; 18
    1676:	43 e8       	ldi	r20, 0x83	; 131
    1678:	5a e3       	ldi	r21, 0x3A	; 58
    167a:	f2 cf       	rjmp	.-28     	; 0x1660 <BlockNot::initDuration(unsigned long)+0x2e>
_ZN8BlockNot12initDurationEm():
    167c:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__floatunsisf>
    1680:	f1 cf       	rjmp	.-30     	; 0x1664 <BlockNot::initDuration(unsigned long)+0x32>

00001682 <BlockNot::initDuration(unsigned long, Unit)>:
_ZN8BlockNot12initDurationEm4Unit():
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	ec 01       	movw	r28, r24
    1688:	cb 01       	movw	r24, r22
    168a:	ba 01       	movw	r22, r20
    168c:	21 30       	cpi	r18, 0x01	; 1
    168e:	31 05       	cpc	r19, r1
    1690:	a1 f0       	breq	.+40     	; 0x16ba <BlockNot::initDuration(unsigned long, Unit)+0x38>
    1692:	30 f0       	brcs	.+12     	; 0x16a0 <BlockNot::initDuration(unsigned long, Unit)+0x1e>
    1694:	22 30       	cpi	r18, 0x02	; 2
    1696:	31 05       	cpc	r19, r1
    1698:	b9 f0       	breq	.+46     	; 0x16c8 <BlockNot::initDuration(unsigned long, Unit)+0x46>
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	08 95       	ret
    16a0:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__floatunsisf>
_ZN8BlockNot5cTime7micro_taSEd():
    16a4:	2d eb       	ldi	r18, 0xBD	; 189
    16a6:	37 e3       	ldi	r19, 0x37	; 55
    16a8:	46 e8       	ldi	r20, 0x86	; 134
    16aa:	55 e3       	ldi	r21, 0x35	; 53
_ZN8BlockNot5cTime7milli_taSEd():
    16ac:	0e 94 22 10 	call	0x2044	; 0x2044 <__mulsf3>
_ZN8BlockNot12initDurationEm4Unit():
    16b0:	6d 8b       	std	Y+21, r22	; 0x15
    16b2:	7e 8b       	std	Y+22, r23	; 0x16
    16b4:	8f 8b       	std	Y+23, r24	; 0x17
    16b6:	98 8f       	std	Y+24, r25	; 0x18
    16b8:	f0 cf       	rjmp	.-32     	; 0x169a <BlockNot::initDuration(unsigned long, Unit)+0x18>
    16ba:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__floatunsisf>
_ZN8BlockNot5cTime7milli_taSEd():
    16be:	2f e6       	ldi	r18, 0x6F	; 111
    16c0:	32 e1       	ldi	r19, 0x12	; 18
    16c2:	43 e8       	ldi	r20, 0x83	; 131
    16c4:	5a e3       	ldi	r21, 0x3A	; 58
    16c6:	f2 cf       	rjmp	.-28     	; 0x16ac <BlockNot::initDuration(unsigned long, Unit)+0x2a>
_ZN8BlockNot12initDurationEm4Unit():
    16c8:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__floatunsisf>
    16cc:	f1 cf       	rjmp	.-30     	; 0x16b0 <BlockNot::initDuration(unsigned long, Unit)+0x2e>

000016ce <BlockNot::setDuration(unsigned long, Unit, bool)>:
_ZN8BlockNot11setDurationEm4Unitb():
    16ce:	0f 93       	push	r16
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    16d4:	ec 01       	movw	r28, r24
    16d6:	0e 94 41 0b 	call	0x1682	; 0x1682 <BlockNot::initDuration(unsigned long, Unit)>
    16da:	00 23       	and	r16, r16
    16dc:	49 f0       	breq	.+18     	; 0x16f0 <BlockNot::setDuration(unsigned long, Unit, bool)+0x22>
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	50 e0       	ldi	r21, 0x00	; 0
    16e2:	ba 01       	movw	r22, r20
    16e4:	ce 01       	movw	r24, r28
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	0f 91       	pop	r16
    16ec:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <BlockNot::reset(unsigned long)>
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	0f 91       	pop	r16
    16f6:	08 95       	ret

000016f8 <BlockNot::timeSinceReset()>:
_ZN8BlockNot14timeSinceResetEv():
    16f8:	cf 92       	push	r12
    16fa:	df 92       	push	r13
    16fc:	ef 92       	push	r14
    16fe:	ff 92       	push	r15
    1700:	0f 93       	push	r16
    1702:	1f 93       	push	r17
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	ec 01       	movw	r28, r24
    170a:	cc 80       	ldd	r12, Y+4	; 0x04
    170c:	dd 80       	ldd	r13, Y+5	; 0x05
    170e:	ee 80       	ldd	r14, Y+6	; 0x06
    1710:	ff 80       	ldd	r15, Y+7	; 0x07
    1712:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <millis>
    1716:	2b 89       	ldd	r18, Y+19	; 0x13
    1718:	3c 89       	ldd	r19, Y+20	; 0x14
    171a:	21 15       	cp	r18, r1
    171c:	31 05       	cpc	r19, r1
    171e:	39 f0       	breq	.+14     	; 0x172e <BlockNot::timeSinceReset()+0x36>
    1720:	23 30       	cpi	r18, 0x03	; 3
    1722:	31 05       	cpc	r19, r1
    1724:	50 f0       	brcs	.+20     	; 0x173a <BlockNot::timeSinceReset()+0x42>
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	cb 01       	movw	r24, r22
    172c:	12 c0       	rjmp	.+36     	; 0x1752 <BlockNot::timeSinceReset()+0x5a>
    172e:	c8 84       	ldd	r12, Y+8	; 0x08
    1730:	d9 84       	ldd	r13, Y+9	; 0x09
    1732:	ea 84       	ldd	r14, Y+10	; 0x0a
    1734:	fb 84       	ldd	r15, Y+11	; 0x0b
    1736:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <micros>
    173a:	08 81       	ld	r16, Y
    173c:	19 81       	ldd	r17, Y+1	; 0x01
    173e:	2a 81       	ldd	r18, Y+2	; 0x02
    1740:	3b 81       	ldd	r19, Y+3	; 0x03
    1742:	c0 1a       	sub	r12, r16
    1744:	d1 0a       	sbc	r13, r17
    1746:	e2 0a       	sbc	r14, r18
    1748:	f3 0a       	sbc	r15, r19
    174a:	6c 0d       	add	r22, r12
    174c:	7d 1d       	adc	r23, r13
    174e:	8e 1d       	adc	r24, r14
    1750:	9f 1d       	adc	r25, r15
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	ff 90       	pop	r15
    175c:	ef 90       	pop	r14
    175e:	df 90       	pop	r13
    1760:	cf 90       	pop	r12
    1762:	08 95       	ret

00001764 <BlockNot::hasTriggered()>:
_ZN8BlockNot12hasTriggeredEv():
    1764:	cf 92       	push	r12
    1766:	df 92       	push	r13
    1768:	ef 92       	push	r14
    176a:	ff 92       	push	r15
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
    1770:	ec 01       	movw	r28, r24
    1772:	8b 89       	ldd	r24, Y+19	; 0x13
    1774:	9c 89       	ldd	r25, Y+20	; 0x14
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	91 05       	cpc	r25, r1
    177a:	21 f1       	breq	.+72     	; 0x17c4 <BlockNot::hasTriggered()+0x60>
    177c:	50 f0       	brcs	.+20     	; 0x1792 <BlockNot::hasTriggered()+0x2e>
    177e:	02 97       	sbiw	r24, 0x02	; 2
    1780:	09 f1       	breq	.+66     	; 0x17c4 <BlockNot::hasTriggered()+0x60>
    1782:	82 2f       	mov	r24, r18
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	ff 90       	pop	r15
    178a:	ef 90       	pop	r14
    178c:	df 90       	pop	r13
    178e:	cf 90       	pop	r12
    1790:	08 95       	ret
    1792:	ce 01       	movw	r24, r28
    1794:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <BlockNot::timeSinceReset()>
    1798:	6b 01       	movw	r12, r22
    179a:	7c 01       	movw	r14, r24
_ZNK8BlockNot5cTime7micro_tcvdEv():
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	34 e2       	ldi	r19, 0x24	; 36
    17a0:	44 e7       	ldi	r20, 0x74	; 116
    17a2:	59 e4       	ldi	r21, 0x49	; 73
_ZNK8BlockNot5cTime7milli_tcvdEv():
    17a4:	6d 89       	ldd	r22, Y+21	; 0x15
    17a6:	7e 89       	ldd	r23, Y+22	; 0x16
    17a8:	8f 89       	ldd	r24, Y+23	; 0x17
    17aa:	98 8d       	ldd	r25, Y+24	; 0x18
    17ac:	0e 94 22 10 	call	0x2044	; 0x2044 <__mulsf3>
_ZN8BlockNot12hasTriggeredEv():
    17b0:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__fixunssfsi>
    17b4:	21 e0       	ldi	r18, 0x01	; 1
    17b6:	c6 16       	cp	r12, r22
    17b8:	d7 06       	cpc	r13, r23
    17ba:	e8 06       	cpc	r14, r24
    17bc:	f9 06       	cpc	r15, r25
    17be:	08 f7       	brcc	.-62     	; 0x1782 <BlockNot::hasTriggered()+0x1e>
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	df cf       	rjmp	.-66     	; 0x1782 <BlockNot::hasTriggered()+0x1e>
    17c4:	ce 01       	movw	r24, r28
    17c6:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <BlockNot::timeSinceReset()>
    17ca:	6b 01       	movw	r12, r22
    17cc:	7c 01       	movw	r14, r24
_ZNK8BlockNot5cTime7milli_tcvdEv():
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	4a e7       	ldi	r20, 0x7A	; 122
    17d4:	54 e4       	ldi	r21, 0x44	; 68
    17d6:	e6 cf       	rjmp	.-52     	; 0x17a4 <BlockNot::hasTriggered()+0x40>

000017d8 <BlockNot::triggered(bool)>:
_ZN8BlockNot9triggeredEb():
    17d8:	0f 93       	push	r16
    17da:	1f 93       	push	r17
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    17e0:	8c 01       	movw	r16, r24
    17e2:	d6 2f       	mov	r29, r22
    17e4:	0e 94 b2 0b 	call	0x1764	; 0x1764 <BlockNot::hasTriggered()>
    17e8:	c8 2f       	mov	r28, r24
    17ea:	dd 23       	and	r29, r29
    17ec:	41 f0       	breq	.+16     	; 0x17fe <BlockNot::triggered(bool)+0x26>
    17ee:	88 23       	and	r24, r24
    17f0:	31 f0       	breq	.+12     	; 0x17fe <BlockNot::triggered(bool)+0x26>
    17f2:	40 e0       	ldi	r20, 0x00	; 0
    17f4:	50 e0       	ldi	r21, 0x00	; 0
    17f6:	ba 01       	movw	r22, r20
    17f8:	c8 01       	movw	r24, r16
    17fa:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <BlockNot::reset(unsigned long)>
    17fe:	f8 01       	movw	r30, r16
    1800:	85 8d       	ldd	r24, Z+29	; 0x1d
    1802:	96 8d       	ldd	r25, Z+30	; 0x1e
    1804:	89 2b       	or	r24, r25
    1806:	09 f0       	breq	.+2      	; 0x180a <BlockNot::triggered(bool)+0x32>
    1808:	c0 e0       	ldi	r28, 0x00	; 0
    180a:	8c 2f       	mov	r24, r28
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	08 95       	ret

00001816 <BlockNot::addToTimerList()>:
_ZN8BlockNot14addToTimerListEv():
    1816:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <BlockNot::firstTimer>
    181a:	30 91 2a 02 	lds	r19, 0x022A	; 0x80022a <BlockNot::firstTimer+0x1>
    181e:	23 2b       	or	r18, r19
    1820:	61 f4       	brne	.+24     	; 0x183a <BlockNot::addToTimerList()+0x24>
    1822:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <BlockNot::currentTimer+0x1>
    1826:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <BlockNot::currentTimer>
    182a:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <BlockNot::firstTimer+0x1>
    182e:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <BlockNot::firstTimer>
    1832:	fc 01       	movw	r30, r24
    1834:	10 a2       	std	Z+32, r1	; 0x20
    1836:	17 8e       	std	Z+31, r1	; 0x1f
    1838:	08 95       	ret
    183a:	e0 91 27 02 	lds	r30, 0x0227	; 0x800227 <BlockNot::currentTimer>
    183e:	f0 91 28 02 	lds	r31, 0x0228	; 0x800228 <BlockNot::currentTimer+0x1>
    1842:	90 a3       	std	Z+32, r25	; 0x20
    1844:	87 8f       	std	Z+31, r24	; 0x1f
    1846:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <BlockNot::currentTimer+0x1>
    184a:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <BlockNot::currentTimer>
    184e:	f1 cf       	rjmp	.-30     	; 0x1832 <BlockNot::addToTimerList()+0x1c>

00001850 <BlockNot::BlockNot(unsigned long, Unit)>:
_ZN8BlockNotC2Em4Unit():
c:\Users\Noor\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:50

BlockNot::BlockNot(unsigned long time, Unit units) {
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	ec 01       	movw	r28, r24
    1856:	1c 82       	std	Y+4, r1	; 0x04
    1858:	1d 82       	std	Y+5, r1	; 0x05
    185a:	1e 82       	std	Y+6, r1	; 0x06
    185c:	1f 82       	std	Y+7, r1	; 0x07
    185e:	18 86       	std	Y+8, r1	; 0x08
    1860:	19 86       	std	Y+9, r1	; 0x09
    1862:	1a 86       	std	Y+10, r1	; 0x0a
    1864:	1b 86       	std	Y+11, r1	; 0x0b
    1866:	1c 86       	std	Y+12, r1	; 0x0c
    1868:	1d 86       	std	Y+13, r1	; 0x0d
    186a:	1e 86       	std	Y+14, r1	; 0x0e
    186c:	1f 86       	std	Y+15, r1	; 0x0f
    186e:	19 8a       	std	Y+17, r1	; 0x11
    1870:	18 8a       	std	Y+16, r1	; 0x10
    1872:	1a 8a       	std	Y+18, r1	; 0x12
    1874:	1e 8e       	std	Y+30, r1	; 0x1e
    1876:	1d 8e       	std	Y+29, r1	; 0x1d
c:\Users\Noor\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:51
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	e0 91 25 02 	lds	r30, 0x0225	; 0x800225 <BlockNot::global>
    1880:	f0 91 26 02 	lds	r31, 0x0226	; 0x800226 <BlockNot::global+0x1>
    1884:	31 97       	sbiw	r30, 0x01	; 1
    1886:	11 f0       	breq	.+4      	; 0x188c <BlockNot::BlockNot(unsigned long, Unit)+0x3c>
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <BlockNot::global+0x1>
    1890:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <BlockNot::global>
c:\Users\Noor\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:52
    baseUnits = units;
    1894:	3c 8b       	std	Y+20, r19	; 0x14
    1896:	2b 8b       	std	Y+19, r18	; 0x13
c:\Users\Noor\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:53
    initDuration(time);
    1898:	ce 01       	movw	r24, r28
    189a:	0e 94 19 0b 	call	0x1632	; 0x1632 <BlockNot::initDuration(unsigned long)>
c:\Users\Noor\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:54
    reset();
    189e:	40 e0       	ldi	r20, 0x00	; 0
    18a0:	50 e0       	ldi	r21, 0x00	; 0
    18a2:	ba 01       	movw	r22, r20
    18a4:	ce 01       	movw	r24, r28
    18a6:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <BlockNot::reset(unsigned long)>
c:\Users\Noor\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:55
    if (global == GLOBAL_RESET) addToTimerList();
    18aa:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <BlockNot::global>
    18ae:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <BlockNot::global+0x1>
    18b2:	89 2b       	or	r24, r25
    18b4:	29 f4       	brne	.+10     	; 0x18c0 <BlockNot::BlockNot(unsigned long, Unit)+0x70>
c:\Users\Noor\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:55 (discriminator 1)
    18b6:	ce 01       	movw	r24, r28
c:\Users\Noor\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:56 (discriminator 1)
}
    18b8:	df 91       	pop	r29
    18ba:	cf 91       	pop	r28
c:\Users\Noor\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:55 (discriminator 1)
BlockNot::BlockNot(unsigned long time, Unit units) {
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    baseUnits = units;
    initDuration(time);
    reset();
    if (global == GLOBAL_RESET) addToTimerList();
    18bc:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <BlockNot::addToTimerList()>
c:\Users\Noor\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:56
}
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	08 95       	ret

000018c6 <map(long, long, long, long, long)>:
_Z3maplllll():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:53
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    18c6:	4f 92       	push	r4
    18c8:	5f 92       	push	r5
    18ca:	6f 92       	push	r6
    18cc:	7f 92       	push	r7
    18ce:	af 92       	push	r10
    18d0:	bf 92       	push	r11
    18d2:	cf 92       	push	r12
    18d4:	df 92       	push	r13
    18d6:	ef 92       	push	r14
    18d8:	ff 92       	push	r15
    18da:	0f 93       	push	r16
    18dc:	1f 93       	push	r17
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	29 01       	movw	r4, r18
    18e8:	3a 01       	movw	r6, r20
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:54
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    18ea:	9b 01       	movw	r18, r22
    18ec:	ac 01       	movw	r20, r24
    18ee:	24 19       	sub	r18, r4
    18f0:	35 09       	sbc	r19, r5
    18f2:	46 09       	sbc	r20, r6
    18f4:	57 09       	sbc	r21, r7
    18f6:	89 89       	ldd	r24, Y+17	; 0x11
    18f8:	9a 89       	ldd	r25, Y+18	; 0x12
    18fa:	ab 89       	ldd	r26, Y+19	; 0x13
    18fc:	bc 89       	ldd	r27, Y+20	; 0x14
    18fe:	bc 01       	movw	r22, r24
    1900:	cd 01       	movw	r24, r26
    1902:	6a 19       	sub	r22, r10
    1904:	7b 09       	sbc	r23, r11
    1906:	8c 09       	sbc	r24, r12
    1908:	9d 09       	sbc	r25, r13
    190a:	0e 94 8f 10 	call	0x211e	; 0x211e <__mulsi3>
    190e:	a8 01       	movw	r20, r16
    1910:	97 01       	movw	r18, r14
    1912:	24 19       	sub	r18, r4
    1914:	35 09       	sbc	r19, r5
    1916:	46 09       	sbc	r20, r6
    1918:	57 09       	sbc	r21, r7
    191a:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divmodsi4>
    191e:	ca 01       	movw	r24, r20
    1920:	b9 01       	movw	r22, r18
    1922:	6a 0d       	add	r22, r10
    1924:	7b 1d       	adc	r23, r11
    1926:	8c 1d       	adc	r24, r12
    1928:	9d 1d       	adc	r25, r13
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:55
}
    192a:	df 91       	pop	r29
    192c:	cf 91       	pop	r28
    192e:	1f 91       	pop	r17
    1930:	0f 91       	pop	r16
    1932:	ff 90       	pop	r15
    1934:	ef 90       	pop	r14
    1936:	df 90       	pop	r13
    1938:	cf 90       	pop	r12
    193a:	bf 90       	pop	r11
    193c:	af 90       	pop	r10
    193e:	7f 90       	pop	r7
    1940:	6f 90       	pop	r6
    1942:	5f 90       	pop	r5
    1944:	4f 90       	pop	r4
    1946:	08 95       	ret

00001948 <String::~String()>:
_ZN6StringD2Ev():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:513
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
  return operator[](loc);
    1948:	fc 01       	movw	r30, r24
    194a:	80 81       	ld	r24, Z
    194c:	91 81       	ldd	r25, Z+1	; 0x01
    194e:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <free>

00001952 <String::invalidate()>:
_ZN6String10invalidateEv():
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	ec 01       	movw	r28, r24
    1958:	88 81       	ld	r24, Y
    195a:	99 81       	ldd	r25, Y+1	; 0x01
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	11 f0       	breq	.+4      	; 0x1964 <String::invalidate()+0x12>
    1960:	0e 94 9c 11 	call	0x2338	; 0x2338 <free>
    1964:	19 82       	std	Y+1, r1	; 0x01
    1966:	18 82       	st	Y, r1
    1968:	1d 82       	std	Y+5, r1	; 0x05
    196a:	1c 82       	std	Y+4, r1	; 0x04
    196c:	1b 82       	std	Y+3, r1	; 0x03
    196e:	1a 82       	std	Y+2, r1	; 0x02
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	08 95       	ret

00001976 <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
    1976:	0f 93       	push	r16
    1978:	1f 93       	push	r17
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	ec 01       	movw	r28, r24
    1980:	8b 01       	movw	r16, r22
    1982:	6f 5f       	subi	r22, 0xFF	; 255
    1984:	7f 4f       	sbci	r23, 0xFF	; 255
    1986:	88 81       	ld	r24, Y
    1988:	99 81       	ldd	r25, Y+1	; 0x01
    198a:	0e 94 25 12 	call	0x244a	; 0x244a <realloc>
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	51 f0       	breq	.+20     	; 0x19a6 <String::changeBuffer(unsigned int)+0x30>
    1992:	99 83       	std	Y+1, r25	; 0x01
    1994:	88 83       	st	Y, r24
    1996:	1b 83       	std	Y+3, r17	; 0x03
    1998:	0a 83       	std	Y+2, r16	; 0x02
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	1f 91       	pop	r17
    19a2:	0f 91       	pop	r16
    19a4:	08 95       	ret
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	f9 cf       	rjmp	.-14     	; 0x199c <String::changeBuffer(unsigned int)+0x26>

000019aa <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	ec 01       	movw	r28, r24
    19b0:	88 81       	ld	r24, Y
    19b2:	99 81       	ldd	r25, Y+1	; 0x01
    19b4:	89 2b       	or	r24, r25
    19b6:	49 f0       	breq	.+18     	; 0x19ca <String::reserve(unsigned int)+0x20>
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	9b 81       	ldd	r25, Y+3	; 0x03
    19bc:	86 17       	cp	r24, r22
    19be:	97 07       	cpc	r25, r23
    19c0:	20 f0       	brcs	.+8      	; 0x19ca <String::reserve(unsigned int)+0x20>
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	df 91       	pop	r29
    19c6:	cf 91       	pop	r28
    19c8:	08 95       	ret
    19ca:	ce 01       	movw	r24, r28
    19cc:	0e 94 bb 0c 	call	0x1976	; 0x1976 <String::changeBuffer(unsigned int)>
    19d0:	88 23       	and	r24, r24
    19d2:	c1 f3       	breq	.-16     	; 0x19c4 <String::reserve(unsigned int)+0x1a>
    19d4:	8c 81       	ldd	r24, Y+4	; 0x04
    19d6:	9d 81       	ldd	r25, Y+5	; 0x05
    19d8:	89 2b       	or	r24, r25
    19da:	99 f7       	brne	.-26     	; 0x19c2 <String::reserve(unsigned int)+0x18>
    19dc:	e8 81       	ld	r30, Y
    19de:	f9 81       	ldd	r31, Y+1	; 0x01
    19e0:	10 82       	st	Z, r1
    19e2:	ef cf       	rjmp	.-34     	; 0x19c2 <String::reserve(unsigned int)+0x18>

000019e4 <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
    19e4:	ef 92       	push	r14
    19e6:	ff 92       	push	r15
    19e8:	0f 93       	push	r16
    19ea:	1f 93       	push	r17
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	ec 01       	movw	r28, r24
    19f2:	7b 01       	movw	r14, r22
    19f4:	8a 01       	movw	r16, r20
    19f6:	ba 01       	movw	r22, r20
    19f8:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <String::reserve(unsigned int)>
    19fc:	81 11       	cpse	r24, r1
    19fe:	0b c0       	rjmp	.+22     	; 0x1a16 <String::copy(char const*, unsigned int)+0x32>
    1a00:	ce 01       	movw	r24, r28
    1a02:	0e 94 a9 0c 	call	0x1952	; 0x1952 <String::invalidate()>
    1a06:	ce 01       	movw	r24, r28
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	1f 91       	pop	r17
    1a0e:	0f 91       	pop	r16
    1a10:	ff 90       	pop	r15
    1a12:	ef 90       	pop	r14
    1a14:	08 95       	ret
    1a16:	1d 83       	std	Y+5, r17	; 0x05
    1a18:	0c 83       	std	Y+4, r16	; 0x04
    1a1a:	b7 01       	movw	r22, r14
    1a1c:	88 81       	ld	r24, Y
    1a1e:	99 81       	ldd	r25, Y+1	; 0x01
    1a20:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <strcpy>
    1a24:	f0 cf       	rjmp	.-32     	; 0x1a06 <String::copy(char const*, unsigned int)+0x22>

00001a26 <String::String(char const*)>:
_ZN6String4initEv():
    1a26:	fc 01       	movw	r30, r24
    1a28:	11 82       	std	Z+1, r1	; 0x01
    1a2a:	10 82       	st	Z, r1
    1a2c:	13 82       	std	Z+3, r1	; 0x03
    1a2e:	12 82       	std	Z+2, r1	; 0x02
    1a30:	15 82       	std	Z+5, r1	; 0x05
    1a32:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
    1a34:	61 15       	cp	r22, r1
    1a36:	71 05       	cpc	r23, r1
    1a38:	51 f0       	breq	.+20     	; 0x1a4e <String::String(char const*)+0x28>
    1a3a:	fb 01       	movw	r30, r22
    1a3c:	01 90       	ld	r0, Z+
    1a3e:	00 20       	and	r0, r0
    1a40:	e9 f7       	brne	.-6      	; 0x1a3c <String::String(char const*)+0x16>
    1a42:	31 97       	sbiw	r30, 0x01	; 1
    1a44:	af 01       	movw	r20, r30
    1a46:	46 1b       	sub	r20, r22
    1a48:	57 0b       	sbc	r21, r23
    1a4a:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <String::copy(char const*, unsigned int)>
    1a4e:	08 95       	ret

00001a50 <String::operator=(char const*) [clone .part.3]>:
_ZN6StringaSEPKc():
    1a50:	fb 01       	movw	r30, r22
    1a52:	01 90       	ld	r0, Z+
    1a54:	00 20       	and	r0, r0
    1a56:	e9 f7       	brne	.-6      	; 0x1a52 <String::operator=(char const*) [clone .part.3]+0x2>
    1a58:	31 97       	sbiw	r30, 0x01	; 1
    1a5a:	af 01       	movw	r20, r30
    1a5c:	46 1b       	sub	r20, r22
    1a5e:	57 0b       	sbc	r21, r23
    1a60:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <String::copy(char const*, unsigned int)>

00001a64 <String::String(char)>:
_ZN6StringC2Ec():
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	00 d0       	rcall	.+0      	; 0x1a6a <String::String(char)+0x6>
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
_ZN6String4initEv():
    1a6e:	fc 01       	movw	r30, r24
    1a70:	11 82       	std	Z+1, r1	; 0x01
    1a72:	10 82       	st	Z, r1
    1a74:	13 82       	std	Z+3, r1	; 0x03
    1a76:	12 82       	std	Z+2, r1	; 0x02
    1a78:	15 82       	std	Z+5, r1	; 0x05
    1a7a:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Ec():
    1a7c:	69 83       	std	Y+1, r22	; 0x01
    1a7e:	1a 82       	std	Y+2, r1	; 0x02
_ZN6StringaSEPKc():
    1a80:	be 01       	movw	r22, r28
    1a82:	6f 5f       	subi	r22, 0xFF	; 255
    1a84:	7f 4f       	sbci	r23, 0xFF	; 255
    1a86:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <String::operator=(char const*) [clone .part.3]>
_ZN6StringC2Ec():
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	08 95       	ret

00001a94 <String::operator=(String const&)>:
_ZN6StringaSERKS_():
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	ec 01       	movw	r28, r24
    1a9a:	fb 01       	movw	r30, r22
    1a9c:	86 17       	cp	r24, r22
    1a9e:	97 07       	cpc	r25, r23
    1aa0:	49 f0       	breq	.+18     	; 0x1ab4 <String::operator=(String const&)+0x20>
    1aa2:	60 81       	ld	r22, Z
    1aa4:	71 81       	ldd	r23, Z+1	; 0x01
    1aa6:	61 15       	cp	r22, r1
    1aa8:	71 05       	cpc	r23, r1
    1aaa:	41 f0       	breq	.+16     	; 0x1abc <String::operator=(String const&)+0x28>
    1aac:	44 81       	ldd	r20, Z+4	; 0x04
    1aae:	55 81       	ldd	r21, Z+5	; 0x05
    1ab0:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <String::copy(char const*, unsigned int)>
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	08 95       	ret
    1abc:	0e 94 a9 0c 	call	0x1952	; 0x1952 <String::invalidate()>
    1ac0:	f9 cf       	rjmp	.-14     	; 0x1ab4 <String::operator=(String const&)+0x20>

00001ac2 <String::concat(char const*, unsigned int)>:
_ZN6String6concatEPKcj():
    1ac2:	ef 92       	push	r14
    1ac4:	ff 92       	push	r15
    1ac6:	0f 93       	push	r16
    1ac8:	1f 93       	push	r17
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	61 15       	cp	r22, r1
    1ad0:	71 05       	cpc	r23, r1
    1ad2:	41 f4       	brne	.+16     	; 0x1ae4 <String::concat(char const*, unsigned int)+0x22>
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	1f 91       	pop	r17
    1adc:	0f 91       	pop	r16
    1ade:	ff 90       	pop	r15
    1ae0:	ef 90       	pop	r14
    1ae2:	08 95       	ret
    1ae4:	41 15       	cp	r20, r1
    1ae6:	51 05       	cpc	r21, r1
    1ae8:	b1 f0       	breq	.+44     	; 0x1b16 <String::concat(char const*, unsigned int)+0x54>
    1aea:	7b 01       	movw	r14, r22
    1aec:	ec 01       	movw	r28, r24
    1aee:	0c 81       	ldd	r16, Y+4	; 0x04
    1af0:	1d 81       	ldd	r17, Y+5	; 0x05
    1af2:	04 0f       	add	r16, r20
    1af4:	15 1f       	adc	r17, r21
    1af6:	b8 01       	movw	r22, r16
    1af8:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <String::reserve(unsigned int)>
    1afc:	88 23       	and	r24, r24
    1afe:	51 f3       	breq	.-44     	; 0x1ad4 <String::concat(char const*, unsigned int)+0x12>
    1b00:	28 81       	ld	r18, Y
    1b02:	39 81       	ldd	r19, Y+1	; 0x01
    1b04:	8c 81       	ldd	r24, Y+4	; 0x04
    1b06:	9d 81       	ldd	r25, Y+5	; 0x05
    1b08:	b7 01       	movw	r22, r14
    1b0a:	82 0f       	add	r24, r18
    1b0c:	93 1f       	adc	r25, r19
    1b0e:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <strcpy>
    1b12:	1d 83       	std	Y+5, r17	; 0x05
    1b14:	0c 83       	std	Y+4, r16	; 0x04
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	de cf       	rjmp	.-68     	; 0x1ad6 <String::concat(char const*, unsigned int)+0x14>

00001b1a <operator+(StringSumHelper const&, String const&)>:
_ZplRK15StringSumHelperRK6String():
    1b1a:	cf 93       	push	r28
    1b1c:	df 93       	push	r29
    1b1e:	ec 01       	movw	r28, r24
    1b20:	fb 01       	movw	r30, r22
    1b22:	44 81       	ldd	r20, Z+4	; 0x04
    1b24:	55 81       	ldd	r21, Z+5	; 0x05
    1b26:	60 81       	ld	r22, Z
    1b28:	71 81       	ldd	r23, Z+1	; 0x01
    1b2a:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <String::concat(char const*, unsigned int)>
    1b2e:	81 11       	cpse	r24, r1
    1b30:	03 c0       	rjmp	.+6      	; 0x1b38 <operator+(StringSumHelper const&, String const&)+0x1e>
    1b32:	ce 01       	movw	r24, r28
    1b34:	0e 94 a9 0c 	call	0x1952	; 0x1952 <String::invalidate()>
    1b38:	ce 01       	movw	r24, r28
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	08 95       	ret

00001b40 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
_ZNK6String8getBytesEPhjj():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:538
  if (index >= len || !buffer) return 0;
  return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    1b40:	0f 93       	push	r16
    1b42:	1f 93       	push	r17
    1b44:	cf 93       	push	r28
    1b46:	df 93       	push	r29
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:539
  if (!bufsize || !buf) return;
    1b48:	41 15       	cp	r20, r1
    1b4a:	51 05       	cpc	r21, r1
    1b4c:	59 f0       	breq	.+22     	; 0x1b64 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:539 (discriminator 1)
    1b4e:	61 15       	cp	r22, r1
    1b50:	71 05       	cpc	r23, r1
    1b52:	41 f0       	breq	.+16     	; 0x1b64 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:540
  if (index >= len) {
    1b54:	fc 01       	movw	r30, r24
    1b56:	04 81       	ldd	r16, Z+4	; 0x04
    1b58:	15 81       	ldd	r17, Z+5	; 0x05
    1b5a:	20 17       	cp	r18, r16
    1b5c:	31 07       	cpc	r19, r17
    1b5e:	38 f0       	brcs	.+14     	; 0x1b6e <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2e>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:541
    buf[0] = 0;
    1b60:	fb 01       	movw	r30, r22
    1b62:	10 82       	st	Z, r1
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:548
  }
  unsigned int n = bufsize - 1;
  if (n > len - index) n = len - index;
  strncpy((char *)buf, buffer + index, n);
  buf[n] = 0;
}
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	1f 91       	pop	r17
    1b6a:	0f 91       	pop	r16
    1b6c:	08 95       	ret
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:544
  if (!bufsize || !buf) return;
  if (index >= len) {
    buf[0] = 0;
    return;
  }
  unsigned int n = bufsize - 1;
    1b6e:	41 50       	subi	r20, 0x01	; 1
    1b70:	51 09       	sbc	r21, r1
    1b72:	02 1b       	sub	r16, r18
    1b74:	13 0b       	sbc	r17, r19
    1b76:	40 17       	cp	r20, r16
    1b78:	51 07       	cpc	r21, r17
    1b7a:	08 f4       	brcc	.+2      	; 0x1b7e <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x3e>
    1b7c:	8a 01       	movw	r16, r20
    1b7e:	eb 01       	movw	r28, r22
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:546
  if (n > len - index) n = len - index;
  strncpy((char *)buf, buffer + index, n);
    1b80:	fc 01       	movw	r30, r24
    1b82:	60 81       	ld	r22, Z
    1b84:	71 81       	ldd	r23, Z+1	; 0x01
    1b86:	62 0f       	add	r22, r18
    1b88:	73 1f       	adc	r23, r19
    1b8a:	a8 01       	movw	r20, r16
    1b8c:	ce 01       	movw	r24, r28
    1b8e:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <strncpy>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:547
  buf[n] = 0;
    1b92:	c0 0f       	add	r28, r16
    1b94:	d1 1f       	adc	r29, r17
    1b96:	18 82       	st	Y, r1
    1b98:	e5 cf       	rjmp	.-54     	; 0x1b64 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>

00001b9a <initVariant>:
initVariant():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1b9a:	08 95       	ret

00001b9c <main>:
main():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    1b9c:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <init>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    1ba0:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <initVariant>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    1ba4:	0e 94 6d 07 	call	0xeda	; 0xeda <setup>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1ba8:	c0 e0       	ldi	r28, 0x00	; 0
    1baa:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    1bac:	0e 94 2e 07 	call	0xe5c	; 0xe5c <loop>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    1bb0:	20 97       	sbiw	r28, 0x00	; 0
    1bb2:	e1 f3       	breq	.-8      	; 0x1bac <main+0x10>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    1bb4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1bb8:	f9 cf       	rjmp	.-14     	; 0x1bac <main+0x10>

00001bba <__vector_16>:
__vector_16():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
    while (ms > 0UL && (micros() - start) >= 1000UL) {
      ms--;
      start += 1000UL;
    }
  }
}
    1bba:	1f 92       	push	r1
    1bbc:	0f 92       	push	r0
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	0f 92       	push	r0
    1bc2:	11 24       	eor	r1, r1
    1bc4:	2f 93       	push	r18
    1bc6:	3f 93       	push	r19
    1bc8:	8f 93       	push	r24
    1bca:	9f 93       	push	r25
    1bcc:	af 93       	push	r26
    1bce:	bf 93       	push	r27
    1bd0:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <timer0_millis>
    1bd4:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <timer0_millis+0x1>
    1bd8:	a0 91 32 02 	lds	r26, 0x0232	; 0x800232 <timer0_millis+0x2>
    1bdc:	b0 91 33 02 	lds	r27, 0x0233	; 0x800233 <timer0_millis+0x3>
    1be0:	30 91 2f 02 	lds	r19, 0x022F	; 0x80022f <timer0_fract>
    1be4:	26 e0       	ldi	r18, 0x06	; 6
    1be6:	23 0f       	add	r18, r19
    1be8:	2d 37       	cpi	r18, 0x7D	; 125
    1bea:	68 f1       	brcs	.+90     	; 0x1c46 <__vector_16+0x8c>
    1bec:	29 e8       	ldi	r18, 0x89	; 137
    1bee:	23 0f       	add	r18, r19
    1bf0:	03 96       	adiw	r24, 0x03	; 3
    1bf2:	a1 1d       	adc	r26, r1
    1bf4:	b1 1d       	adc	r27, r1
    1bf6:	20 93 2f 02 	sts	0x022F, r18	; 0x80022f <timer0_fract>
    1bfa:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <timer0_millis>
    1bfe:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <timer0_millis+0x1>
    1c02:	a0 93 32 02 	sts	0x0232, r26	; 0x800232 <timer0_millis+0x2>
    1c06:	b0 93 33 02 	sts	0x0233, r27	; 0x800233 <timer0_millis+0x3>
    1c0a:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <timer0_overflow_count>
    1c0e:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <timer0_overflow_count+0x1>
    1c12:	a0 91 2d 02 	lds	r26, 0x022D	; 0x80022d <timer0_overflow_count+0x2>
    1c16:	b0 91 2e 02 	lds	r27, 0x022E	; 0x80022e <timer0_overflow_count+0x3>
    1c1a:	01 96       	adiw	r24, 0x01	; 1
    1c1c:	a1 1d       	adc	r26, r1
    1c1e:	b1 1d       	adc	r27, r1
    1c20:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <timer0_overflow_count>
    1c24:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <timer0_overflow_count+0x1>
    1c28:	a0 93 2d 02 	sts	0x022D, r26	; 0x80022d <timer0_overflow_count+0x2>
    1c2c:	b0 93 2e 02 	sts	0x022E, r27	; 0x80022e <timer0_overflow_count+0x3>
    1c30:	bf 91       	pop	r27
    1c32:	af 91       	pop	r26
    1c34:	9f 91       	pop	r25
    1c36:	8f 91       	pop	r24
    1c38:	3f 91       	pop	r19
    1c3a:	2f 91       	pop	r18
    1c3c:	0f 90       	pop	r0
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	0f 90       	pop	r0
    1c42:	1f 90       	pop	r1
    1c44:	18 95       	reti
    1c46:	02 96       	adiw	r24, 0x02	; 2
    1c48:	a1 1d       	adc	r26, r1
    1c4a:	b1 1d       	adc	r27, r1
    1c4c:	d4 cf       	rjmp	.-88     	; 0x1bf6 <__vector_16+0x3c>

00001c4e <millis>:
millis():
    1c4e:	2f b7       	in	r18, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <timer0_millis>
    1c56:	70 91 31 02 	lds	r23, 0x0231	; 0x800231 <timer0_millis+0x1>
    1c5a:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <timer0_millis+0x2>
    1c5e:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <timer0_millis+0x3>
    1c62:	2f bf       	out	0x3f, r18	; 63
    1c64:	08 95       	ret

00001c66 <micros>:
micros():
    1c66:	3f b7       	in	r19, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <timer0_overflow_count>
    1c6e:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <timer0_overflow_count+0x1>
    1c72:	a0 91 2d 02 	lds	r26, 0x022D	; 0x80022d <timer0_overflow_count+0x2>
    1c76:	b0 91 2e 02 	lds	r27, 0x022E	; 0x80022e <timer0_overflow_count+0x3>
    1c7a:	26 b5       	in	r18, 0x26	; 38
    1c7c:	a8 9b       	sbis	0x15, 0	; 21
    1c7e:	05 c0       	rjmp	.+10     	; 0x1c8a <micros+0x24>
    1c80:	2f 3f       	cpi	r18, 0xFF	; 255
    1c82:	19 f0       	breq	.+6      	; 0x1c8a <micros+0x24>
    1c84:	01 96       	adiw	r24, 0x01	; 1
    1c86:	a1 1d       	adc	r26, r1
    1c88:	b1 1d       	adc	r27, r1
    1c8a:	3f bf       	out	0x3f, r19	; 63
    1c8c:	ba 2f       	mov	r27, r26
    1c8e:	a9 2f       	mov	r26, r25
    1c90:	98 2f       	mov	r25, r24
    1c92:	88 27       	eor	r24, r24
    1c94:	bc 01       	movw	r22, r24
    1c96:	cd 01       	movw	r24, r26
    1c98:	62 0f       	add	r22, r18
    1c9a:	71 1d       	adc	r23, r1
    1c9c:	81 1d       	adc	r24, r1
    1c9e:	91 1d       	adc	r25, r1
    1ca0:	43 e0       	ldi	r20, 0x03	; 3
    1ca2:	66 0f       	add	r22, r22
    1ca4:	77 1f       	adc	r23, r23
    1ca6:	88 1f       	adc	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	4a 95       	dec	r20
    1cac:	d1 f7       	brne	.-12     	; 0x1ca2 <micros+0x3c>
    1cae:	08 95       	ret

00001cb0 <delayMicroseconds>:
delayMicroseconds():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:761
              // 2 cycles to jump back to delay cycle.
  }

#elif F_CPU >= 8000000L
  // for the 8 MHz clock
  __asm__ __volatile__ (
    1cb0:	00 00       	nop
    1cb2:	00 00       	nop
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:767
    "nop" "\n\t"
    "nop"); //just waiting 2 cycles

  // for a 1 and 2 microsecond delay, simply return.  the overhead
  // of the function call takes 16 (18) cycles, which is 2us
  if (us <= 2) return; // = 3 cycles, (4 when true)
    1cb4:	83 30       	cpi	r24, 0x03	; 3
    1cb6:	91 05       	cpc	r25, r1
    1cb8:	28 f0       	brcs	.+10     	; 0x1cc4 <delayMicroseconds+0x14>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:772

  // the following loop takes 1/2 of a microsecond (4 cycles)
  // per iteration, so execute it twice for each microsecond of
  // delay requested.
  us <<= 1; //x2 us, = 2 cycles
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:777

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // us is at least 6 so we can substract 5
  us -= 5; // = 2 cycles
    1cbe:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	f1 f7       	brne	.-4      	; 0x1cc0 <delayMicroseconds+0x10>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    1cc4:	08 95       	ret

00001cc6 <init>:
init():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    1cc6:	78 94       	sei
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    1cc8:	84 b5       	in	r24, 0x24	; 36
    1cca:	83 60       	ori	r24, 0x03	; 3
    1ccc:	84 bd       	out	0x24, r24	; 36
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    1cce:	85 b5       	in	r24, 0x25	; 37
    1cd0:	83 60       	ori	r24, 0x03	; 3
    1cd2:	85 bd       	out	0x25, r24	; 37
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    1cd4:	ee e6       	ldi	r30, 0x6E	; 110
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	81 60       	ori	r24, 0x01	; 1
    1cdc:	80 83       	st	Z, r24
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    1cde:	e1 e8       	ldi	r30, 0x81	; 129
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	82 e0       	ldi	r24, 0x02	; 2
    1ce4:	80 83       	st	Z, r24
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    1ce6:	80 81       	ld	r24, Z
    1ce8:	81 60       	ori	r24, 0x01	; 1
    1cea:	80 83       	st	Z, r24
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    1cec:	e0 e8       	ldi	r30, 0x80	; 128
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	81 60       	ori	r24, 0x01	; 1
    1cf4:	80 83       	st	Z, r24
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    1cf6:	e1 eb       	ldi	r30, 0xB1	; 177
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	84 60       	ori	r24, 0x04	; 4
    1cfe:	80 83       	st	Z, r24
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    1d00:	e0 eb       	ldi	r30, 0xB0	; 176
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	81 60       	ori	r24, 0x01	; 1
    1d08:	80 83       	st	Z, r24
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    1d0a:	86 e8       	ldi	r24, 0x86	; 134
    1d0c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    1d10:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    1d14:	08 95       	ret

00001d16 <analogRead>:
analogRead():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    1d16:	88 30       	cpi	r24, 0x08	; 8
    1d18:	20 f0       	brcs	.+8      	; 0x1d22 <analogRead+0xc>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 1)
    1d1a:	8d 30       	cpi	r24, 0x0D	; 13
    1d1c:	08 f4       	brcc	.+2      	; 0x1d20 <analogRead+0xa>
    1d1e:	8d e0       	ldi	r24, 0x0D	; 13
    1d20:	8e 50       	subi	r24, 0x0E	; 14
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:69 (discriminator 4)
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    1d22:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    1d26:	90 e4       	ldi	r25, 0x40	; 64
    1d28:	29 9f       	mul	r18, r25
    1d2a:	90 01       	movw	r18, r0
    1d2c:	11 24       	eor	r1, r1
    1d2e:	87 70       	andi	r24, 0x07	; 7
    1d30:	82 2b       	or	r24, r18
    1d32:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:77 (discriminator 4)
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    1d36:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1d3a:	80 64       	ori	r24, 0x40	; 64
    1d3c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:80 (discriminator 1)

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
    1d40:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1d44:	86 fd       	sbrc	r24, 6
    1d46:	fc cf       	rjmp	.-8      	; 0x1d40 <analogRead+0x2a>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
    1d48:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
    1d4c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:96
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
}
    1d50:	08 95       	ret

00001d52 <turnOffPWM>:
turnOffPWM():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    1d52:	84 30       	cpi	r24, 0x04	; 4
    1d54:	81 f0       	breq	.+32     	; 0x1d76 <turnOffPWM+0x24>
    1d56:	28 f4       	brcc	.+10     	; 0x1d62 <turnOffPWM+0x10>
    1d58:	82 30       	cpi	r24, 0x02	; 2
    1d5a:	e9 f0       	breq	.+58     	; 0x1d96 <turnOffPWM+0x44>
    1d5c:	83 30       	cpi	r24, 0x03	; 3
    1d5e:	f9 f0       	breq	.+62     	; 0x1d9e <turnOffPWM+0x4c>
    1d60:	08 95       	ret
    1d62:	88 30       	cpi	r24, 0x08	; 8
    1d64:	71 f0       	breq	.+28     	; 0x1d82 <turnOffPWM+0x30>
    1d66:	89 30       	cpi	r24, 0x09	; 9
    1d68:	91 f0       	breq	.+36     	; 0x1d8e <turnOffPWM+0x3c>
    1d6a:	85 30       	cpi	r24, 0x05	; 5
    1d6c:	b9 f4       	brne	.+46     	; 0x1d9c <turnOffPWM+0x4a>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1d6e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1d72:	8f 7d       	andi	r24, 0xDF	; 223
    1d74:	03 c0       	rjmp	.+6      	; 0x1d7c <turnOffPWM+0x2a>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    1d76:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1d7a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1d7c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    1d80:	08 95       	ret
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    1d82:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1d86:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1d88:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    1d8c:	08 95       	ret
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1d8e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1d92:	8f 7d       	andi	r24, 0xDF	; 223
    1d94:	f9 cf       	rjmp	.-14     	; 0x1d88 <turnOffPWM+0x36>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    1d96:	84 b5       	in	r24, 0x24	; 36
    1d98:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1d9a:	84 bd       	out	0x24, r24	; 36
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    1d9c:	08 95       	ret
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1d9e:	84 b5       	in	r24, 0x24	; 36
    1da0:	8f 7d       	andi	r24, 0xDF	; 223
    1da2:	fb cf       	rjmp	.-10     	; 0x1d9a <turnOffPWM+0x48>

00001da4 <pinMode>:
pinMode():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	fc 01       	movw	r30, r24
    1dac:	e1 50       	subi	r30, 0x01	; 1
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	24 91       	lpm	r18, Z
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    1db2:	8a 5e       	subi	r24, 0xEA	; 234
    1db4:	9e 4f       	sbci	r25, 0xFE	; 254
    1db6:	fc 01       	movw	r30, r24
    1db8:	84 91       	lpm	r24, Z
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    1dba:	88 23       	and	r24, r24
    1dbc:	c9 f0       	breq	.+50     	; 0x1df0 <pinMode+0x4c>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	ef 5b       	subi	r30, 0xBF	; 191
    1dc8:	fe 4f       	sbci	r31, 0xFE	; 254
    1dca:	a5 91       	lpm	r26, Z+
    1dcc:	b4 91       	lpm	r27, Z
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    1dce:	fc 01       	movw	r30, r24
    1dd0:	e9 5c       	subi	r30, 0xC9	; 201
    1dd2:	fe 4f       	sbci	r31, 0xFE	; 254
    1dd4:	c5 91       	lpm	r28, Z+
    1dd6:	d4 91       	lpm	r29, Z
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    1dd8:	61 11       	cpse	r22, r1
    1dda:	0d c0       	rjmp	.+26     	; 0x1df6 <pinMode+0x52>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    1ddc:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    1dde:	f8 94       	cli
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    1de0:	8c 91       	ld	r24, X
    1de2:	20 95       	com	r18
    1de4:	82 23       	and	r24, r18
    1de6:	8c 93       	st	X, r24
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    1de8:	88 81       	ld	r24, Y
    1dea:	28 23       	and	r18, r24
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    1dec:	28 83       	st	Y, r18
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    1dee:	9f bf       	out	0x3f, r25	; 63
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	08 95       	ret
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    1df6:	62 30       	cpi	r22, 0x02	; 2
    1df8:	51 f4       	brne	.+20     	; 0x1e0e <pinMode+0x6a>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    1dfa:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    1dfc:	f8 94       	cli
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    1dfe:	3c 91       	ld	r19, X
    1e00:	82 2f       	mov	r24, r18
    1e02:	80 95       	com	r24
    1e04:	83 23       	and	r24, r19
    1e06:	8c 93       	st	X, r24
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    1e08:	e8 81       	ld	r30, Y
    1e0a:	2e 2b       	or	r18, r30
    1e0c:	ef cf       	rjmp	.-34     	; 0x1dec <pinMode+0x48>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    1e0e:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    1e10:	f8 94       	cli
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    1e12:	ec 91       	ld	r30, X
    1e14:	2e 2b       	or	r18, r30
    1e16:	2c 93       	st	X, r18
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    1e18:	8f bf       	out	0x3f, r24	; 63
    1e1a:	ea cf       	rjmp	.-44     	; 0x1df0 <pinMode+0x4c>

00001e1c <digitalWrite>:
digitalWrite():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1e1c:	1f 93       	push	r17
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	f9 01       	movw	r30, r18
    1e28:	e8 51       	subi	r30, 0x18	; 24
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	84 91       	lpm	r24, Z
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    1e2e:	f9 01       	movw	r30, r18
    1e30:	e1 50       	subi	r30, 0x01	; 1
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	d4 91       	lpm	r29, Z
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    1e36:	f9 01       	movw	r30, r18
    1e38:	ea 5e       	subi	r30, 0xEA	; 234
    1e3a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e3c:	c4 91       	lpm	r28, Z
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    1e3e:	cc 23       	and	r28, r28
    1e40:	a9 f0       	breq	.+42     	; 0x1e6c <digitalWrite+0x50>
    1e42:	16 2f       	mov	r17, r22
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1e44:	81 11       	cpse	r24, r1
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    1e46:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <turnOffPWM>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    1e4a:	ec 2f       	mov	r30, r28
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	ee 0f       	add	r30, r30
    1e50:	ff 1f       	adc	r31, r31
    1e52:	e9 5c       	subi	r30, 0xC9	; 201
    1e54:	fe 4f       	sbci	r31, 0xFE	; 254
    1e56:	a5 91       	lpm	r26, Z+
    1e58:	b4 91       	lpm	r27, Z
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    1e5a:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    1e5c:	f8 94       	cli
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    1e5e:	ec 91       	ld	r30, X
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    1e60:	11 11       	cpse	r17, r1
    1e62:	08 c0       	rjmp	.+16     	; 0x1e74 <digitalWrite+0x58>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    1e64:	d0 95       	com	r29
    1e66:	de 23       	and	r29, r30
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    1e68:	dc 93       	st	X, r29
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    1e6a:	8f bf       	out	0x3f, r24	; 63
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	1f 91       	pop	r17
    1e72:	08 95       	ret
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    1e74:	de 2b       	or	r29, r30
    1e76:	f8 cf       	rjmp	.-16     	; 0x1e68 <digitalWrite+0x4c>

00001e78 <digitalRead>:
digitalRead():
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    1e78:	cf 93       	push	r28
    1e7a:	df 93       	push	r29
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	f9 01       	movw	r30, r18
    1e82:	e8 51       	subi	r30, 0x18	; 24
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	84 91       	lpm	r24, Z
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    1e88:	f9 01       	movw	r30, r18
    1e8a:	e1 50       	subi	r30, 0x01	; 1
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	d4 91       	lpm	r29, Z
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    1e90:	f9 01       	movw	r30, r18
    1e92:	ea 5e       	subi	r30, 0xEA	; 234
    1e94:	fe 4f       	sbci	r31, 0xFE	; 254
    1e96:	c4 91       	lpm	r28, Z
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    1e98:	cc 23       	and	r28, r28
    1e9a:	a1 f0       	breq	.+40     	; 0x1ec4 <digitalRead+0x4c>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1e9c:	81 11       	cpse	r24, r1
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    1e9e:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <turnOffPWM>
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    1ea2:	ec 2f       	mov	r30, r28
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	ee 0f       	add	r30, r30
    1ea8:	ff 1f       	adc	r31, r31
    1eaa:	e3 5d       	subi	r30, 0xD3	; 211
    1eac:	fe 4f       	sbci	r31, 0xFE	; 254
    1eae:	a5 91       	lpm	r26, Z+
    1eb0:	b4 91       	lpm	r27, Z
    1eb2:	ec 91       	ld	r30, X
    1eb4:	ed 23       	and	r30, r29
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <digitalRead+0x46>
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	08 95       	ret
C:\Users\Noor\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	fa cf       	rjmp	.-12     	; 0x1ebe <digitalRead+0x46>

00001eca <__fixunssfsi>:
__fixunssfsi():
    1eca:	0e 94 01 10 	call	0x2002	; 0x2002 <__fp_splitA>
    1ece:	88 f0       	brcs	.+34     	; 0x1ef2 <__fixunssfsi+0x28>
    1ed0:	9f 57       	subi	r25, 0x7F	; 127
    1ed2:	98 f0       	brcs	.+38     	; 0x1efa <__fixunssfsi+0x30>
    1ed4:	b9 2f       	mov	r27, r25
    1ed6:	99 27       	eor	r25, r25
    1ed8:	b7 51       	subi	r27, 0x17	; 23
    1eda:	b0 f0       	brcs	.+44     	; 0x1f08 <__fixunssfsi+0x3e>
    1edc:	e1 f0       	breq	.+56     	; 0x1f16 <__fixunssfsi+0x4c>
    1ede:	66 0f       	add	r22, r22
    1ee0:	77 1f       	adc	r23, r23
    1ee2:	88 1f       	adc	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	1a f0       	brmi	.+6      	; 0x1eee <__fixunssfsi+0x24>
    1ee8:	ba 95       	dec	r27
    1eea:	c9 f7       	brne	.-14     	; 0x1ede <__fixunssfsi+0x14>
    1eec:	14 c0       	rjmp	.+40     	; 0x1f16 <__fixunssfsi+0x4c>
    1eee:	b1 30       	cpi	r27, 0x01	; 1
    1ef0:	91 f0       	breq	.+36     	; 0x1f16 <__fixunssfsi+0x4c>
    1ef2:	0e 94 1b 10 	call	0x2036	; 0x2036 <__fp_zero>
    1ef6:	b1 e0       	ldi	r27, 0x01	; 1
    1ef8:	08 95       	ret
    1efa:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__fp_zero>
    1efe:	67 2f       	mov	r22, r23
    1f00:	78 2f       	mov	r23, r24
    1f02:	88 27       	eor	r24, r24
    1f04:	b8 5f       	subi	r27, 0xF8	; 248
    1f06:	39 f0       	breq	.+14     	; 0x1f16 <__fixunssfsi+0x4c>
    1f08:	b9 3f       	cpi	r27, 0xF9	; 249
    1f0a:	cc f3       	brlt	.-14     	; 0x1efe <__fixunssfsi+0x34>
    1f0c:	86 95       	lsr	r24
    1f0e:	77 95       	ror	r23
    1f10:	67 95       	ror	r22
    1f12:	b3 95       	inc	r27
    1f14:	d9 f7       	brne	.-10     	; 0x1f0c <__fixunssfsi+0x42>
    1f16:	3e f4       	brtc	.+14     	; 0x1f26 <__fixunssfsi+0x5c>
    1f18:	90 95       	com	r25
    1f1a:	80 95       	com	r24
    1f1c:	70 95       	com	r23
    1f1e:	61 95       	neg	r22
    1f20:	7f 4f       	sbci	r23, 0xFF	; 255
    1f22:	8f 4f       	sbci	r24, 0xFF	; 255
    1f24:	9f 4f       	sbci	r25, 0xFF	; 255
    1f26:	08 95       	ret

00001f28 <__floatunsisf>:
__floatunsisf():
    1f28:	e8 94       	clt
    1f2a:	09 c0       	rjmp	.+18     	; 0x1f3e <__floatsisf+0x12>

00001f2c <__floatsisf>:
    1f2c:	97 fb       	bst	r25, 7
    1f2e:	3e f4       	brtc	.+14     	; 0x1f3e <__floatsisf+0x12>
    1f30:	90 95       	com	r25
    1f32:	80 95       	com	r24
    1f34:	70 95       	com	r23
    1f36:	61 95       	neg	r22
    1f38:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3e:	99 23       	and	r25, r25
    1f40:	a9 f0       	breq	.+42     	; 0x1f6c <__floatsisf+0x40>
    1f42:	f9 2f       	mov	r31, r25
    1f44:	96 e9       	ldi	r25, 0x96	; 150
    1f46:	bb 27       	eor	r27, r27
    1f48:	93 95       	inc	r25
    1f4a:	f6 95       	lsr	r31
    1f4c:	87 95       	ror	r24
    1f4e:	77 95       	ror	r23
    1f50:	67 95       	ror	r22
    1f52:	b7 95       	ror	r27
    1f54:	f1 11       	cpse	r31, r1
    1f56:	f8 cf       	rjmp	.-16     	; 0x1f48 <__floatsisf+0x1c>
    1f58:	fa f4       	brpl	.+62     	; 0x1f98 <__floatsisf+0x6c>
    1f5a:	bb 0f       	add	r27, r27
    1f5c:	11 f4       	brne	.+4      	; 0x1f62 <__floatsisf+0x36>
    1f5e:	60 ff       	sbrs	r22, 0
    1f60:	1b c0       	rjmp	.+54     	; 0x1f98 <__floatsisf+0x6c>
    1f62:	6f 5f       	subi	r22, 0xFF	; 255
    1f64:	7f 4f       	sbci	r23, 0xFF	; 255
    1f66:	8f 4f       	sbci	r24, 0xFF	; 255
    1f68:	9f 4f       	sbci	r25, 0xFF	; 255
    1f6a:	16 c0       	rjmp	.+44     	; 0x1f98 <__floatsisf+0x6c>
    1f6c:	88 23       	and	r24, r24
    1f6e:	11 f0       	breq	.+4      	; 0x1f74 <__floatsisf+0x48>
    1f70:	96 e9       	ldi	r25, 0x96	; 150
    1f72:	11 c0       	rjmp	.+34     	; 0x1f96 <__floatsisf+0x6a>
    1f74:	77 23       	and	r23, r23
    1f76:	21 f0       	breq	.+8      	; 0x1f80 <__floatsisf+0x54>
    1f78:	9e e8       	ldi	r25, 0x8E	; 142
    1f7a:	87 2f       	mov	r24, r23
    1f7c:	76 2f       	mov	r23, r22
    1f7e:	05 c0       	rjmp	.+10     	; 0x1f8a <__floatsisf+0x5e>
    1f80:	66 23       	and	r22, r22
    1f82:	71 f0       	breq	.+28     	; 0x1fa0 <__floatsisf+0x74>
    1f84:	96 e8       	ldi	r25, 0x86	; 134
    1f86:	86 2f       	mov	r24, r22
    1f88:	70 e0       	ldi	r23, 0x00	; 0
    1f8a:	60 e0       	ldi	r22, 0x00	; 0
    1f8c:	2a f0       	brmi	.+10     	; 0x1f98 <__floatsisf+0x6c>
    1f8e:	9a 95       	dec	r25
    1f90:	66 0f       	add	r22, r22
    1f92:	77 1f       	adc	r23, r23
    1f94:	88 1f       	adc	r24, r24
    1f96:	da f7       	brpl	.-10     	; 0x1f8e <__floatsisf+0x62>
    1f98:	88 0f       	add	r24, r24
    1f9a:	96 95       	lsr	r25
    1f9c:	87 95       	ror	r24
    1f9e:	97 f9       	bld	r25, 7
    1fa0:	08 95       	ret

00001fa2 <__fp_inf>:
__fp_inf():
    1fa2:	97 f9       	bld	r25, 7
    1fa4:	9f 67       	ori	r25, 0x7F	; 127
    1fa6:	80 e8       	ldi	r24, 0x80	; 128
    1fa8:	70 e0       	ldi	r23, 0x00	; 0
    1faa:	60 e0       	ldi	r22, 0x00	; 0
    1fac:	08 95       	ret

00001fae <__fp_nan>:
__fp_nan():
    1fae:	9f ef       	ldi	r25, 0xFF	; 255
    1fb0:	80 ec       	ldi	r24, 0xC0	; 192
    1fb2:	08 95       	ret

00001fb4 <__fp_pscA>:
__fp_pscA():
    1fb4:	00 24       	eor	r0, r0
    1fb6:	0a 94       	dec	r0
    1fb8:	16 16       	cp	r1, r22
    1fba:	17 06       	cpc	r1, r23
    1fbc:	18 06       	cpc	r1, r24
    1fbe:	09 06       	cpc	r0, r25
    1fc0:	08 95       	ret

00001fc2 <__fp_pscB>:
__fp_pscB():
    1fc2:	00 24       	eor	r0, r0
    1fc4:	0a 94       	dec	r0
    1fc6:	12 16       	cp	r1, r18
    1fc8:	13 06       	cpc	r1, r19
    1fca:	14 06       	cpc	r1, r20
    1fcc:	05 06       	cpc	r0, r21
    1fce:	08 95       	ret

00001fd0 <__fp_round>:
__fp_round():
    1fd0:	09 2e       	mov	r0, r25
    1fd2:	03 94       	inc	r0
    1fd4:	00 0c       	add	r0, r0
    1fd6:	11 f4       	brne	.+4      	; 0x1fdc <__fp_round+0xc>
    1fd8:	88 23       	and	r24, r24
    1fda:	52 f0       	brmi	.+20     	; 0x1ff0 <__fp_round+0x20>
    1fdc:	bb 0f       	add	r27, r27
    1fde:	40 f4       	brcc	.+16     	; 0x1ff0 <__fp_round+0x20>
    1fe0:	bf 2b       	or	r27, r31
    1fe2:	11 f4       	brne	.+4      	; 0x1fe8 <__fp_round+0x18>
    1fe4:	60 ff       	sbrs	r22, 0
    1fe6:	04 c0       	rjmp	.+8      	; 0x1ff0 <__fp_round+0x20>
    1fe8:	6f 5f       	subi	r22, 0xFF	; 255
    1fea:	7f 4f       	sbci	r23, 0xFF	; 255
    1fec:	8f 4f       	sbci	r24, 0xFF	; 255
    1fee:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff0:	08 95       	ret

00001ff2 <__fp_split3>:
__fp_split3():
    1ff2:	57 fd       	sbrc	r21, 7
    1ff4:	90 58       	subi	r25, 0x80	; 128
    1ff6:	44 0f       	add	r20, r20
    1ff8:	55 1f       	adc	r21, r21
    1ffa:	59 f0       	breq	.+22     	; 0x2012 <__fp_splitA+0x10>
    1ffc:	5f 3f       	cpi	r21, 0xFF	; 255
    1ffe:	71 f0       	breq	.+28     	; 0x201c <__fp_splitA+0x1a>
    2000:	47 95       	ror	r20

00002002 <__fp_splitA>:
    2002:	88 0f       	add	r24, r24
    2004:	97 fb       	bst	r25, 7
    2006:	99 1f       	adc	r25, r25
    2008:	61 f0       	breq	.+24     	; 0x2022 <__fp_splitA+0x20>
    200a:	9f 3f       	cpi	r25, 0xFF	; 255
    200c:	79 f0       	breq	.+30     	; 0x202c <__fp_splitA+0x2a>
    200e:	87 95       	ror	r24
    2010:	08 95       	ret
    2012:	12 16       	cp	r1, r18
    2014:	13 06       	cpc	r1, r19
    2016:	14 06       	cpc	r1, r20
    2018:	55 1f       	adc	r21, r21
    201a:	f2 cf       	rjmp	.-28     	; 0x2000 <__fp_split3+0xe>
    201c:	46 95       	lsr	r20
    201e:	f1 df       	rcall	.-30     	; 0x2002 <__fp_splitA>
    2020:	08 c0       	rjmp	.+16     	; 0x2032 <__fp_splitA+0x30>
    2022:	16 16       	cp	r1, r22
    2024:	17 06       	cpc	r1, r23
    2026:	18 06       	cpc	r1, r24
    2028:	99 1f       	adc	r25, r25
    202a:	f1 cf       	rjmp	.-30     	; 0x200e <__fp_splitA+0xc>
    202c:	86 95       	lsr	r24
    202e:	71 05       	cpc	r23, r1
    2030:	61 05       	cpc	r22, r1
    2032:	08 94       	sec
    2034:	08 95       	ret

00002036 <__fp_zero>:
__fp_zero():
    2036:	e8 94       	clt

00002038 <__fp_szero>:
    2038:	bb 27       	eor	r27, r27
    203a:	66 27       	eor	r22, r22
    203c:	77 27       	eor	r23, r23
    203e:	cb 01       	movw	r24, r22
    2040:	97 f9       	bld	r25, 7
    2042:	08 95       	ret

00002044 <__mulsf3>:
__mulsf3():
    2044:	0e 94 35 10 	call	0x206a	; 0x206a <__mulsf3x>
    2048:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__fp_round>
    204c:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__fp_pscA>
    2050:	38 f0       	brcs	.+14     	; 0x2060 <__mulsf3+0x1c>
    2052:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__fp_pscB>
    2056:	20 f0       	brcs	.+8      	; 0x2060 <__mulsf3+0x1c>
    2058:	95 23       	and	r25, r21
    205a:	11 f0       	breq	.+4      	; 0x2060 <__mulsf3+0x1c>
    205c:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__fp_inf>
    2060:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <__fp_nan>
    2064:	11 24       	eor	r1, r1
    2066:	0c 94 1c 10 	jmp	0x2038	; 0x2038 <__fp_szero>

0000206a <__mulsf3x>:
__mulsf3x():
    206a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__fp_split3>
    206e:	70 f3       	brcs	.-36     	; 0x204c <__mulsf3+0x8>

00002070 <__mulsf3_pse>:
    2070:	95 9f       	mul	r25, r21
    2072:	c1 f3       	breq	.-16     	; 0x2064 <__mulsf3+0x20>
    2074:	95 0f       	add	r25, r21
    2076:	50 e0       	ldi	r21, 0x00	; 0
    2078:	55 1f       	adc	r21, r21
    207a:	62 9f       	mul	r22, r18
    207c:	f0 01       	movw	r30, r0
    207e:	72 9f       	mul	r23, r18
    2080:	bb 27       	eor	r27, r27
    2082:	f0 0d       	add	r31, r0
    2084:	b1 1d       	adc	r27, r1
    2086:	63 9f       	mul	r22, r19
    2088:	aa 27       	eor	r26, r26
    208a:	f0 0d       	add	r31, r0
    208c:	b1 1d       	adc	r27, r1
    208e:	aa 1f       	adc	r26, r26
    2090:	64 9f       	mul	r22, r20
    2092:	66 27       	eor	r22, r22
    2094:	b0 0d       	add	r27, r0
    2096:	a1 1d       	adc	r26, r1
    2098:	66 1f       	adc	r22, r22
    209a:	82 9f       	mul	r24, r18
    209c:	22 27       	eor	r18, r18
    209e:	b0 0d       	add	r27, r0
    20a0:	a1 1d       	adc	r26, r1
    20a2:	62 1f       	adc	r22, r18
    20a4:	73 9f       	mul	r23, r19
    20a6:	b0 0d       	add	r27, r0
    20a8:	a1 1d       	adc	r26, r1
    20aa:	62 1f       	adc	r22, r18
    20ac:	83 9f       	mul	r24, r19
    20ae:	a0 0d       	add	r26, r0
    20b0:	61 1d       	adc	r22, r1
    20b2:	22 1f       	adc	r18, r18
    20b4:	74 9f       	mul	r23, r20
    20b6:	33 27       	eor	r19, r19
    20b8:	a0 0d       	add	r26, r0
    20ba:	61 1d       	adc	r22, r1
    20bc:	23 1f       	adc	r18, r19
    20be:	84 9f       	mul	r24, r20
    20c0:	60 0d       	add	r22, r0
    20c2:	21 1d       	adc	r18, r1
    20c4:	82 2f       	mov	r24, r18
    20c6:	76 2f       	mov	r23, r22
    20c8:	6a 2f       	mov	r22, r26
    20ca:	11 24       	eor	r1, r1
    20cc:	9f 57       	subi	r25, 0x7F	; 127
    20ce:	50 40       	sbci	r21, 0x00	; 0
    20d0:	9a f0       	brmi	.+38     	; 0x20f8 <__mulsf3_pse+0x88>
    20d2:	f1 f0       	breq	.+60     	; 0x2110 <__mulsf3_pse+0xa0>
    20d4:	88 23       	and	r24, r24
    20d6:	4a f0       	brmi	.+18     	; 0x20ea <__mulsf3_pse+0x7a>
    20d8:	ee 0f       	add	r30, r30
    20da:	ff 1f       	adc	r31, r31
    20dc:	bb 1f       	adc	r27, r27
    20de:	66 1f       	adc	r22, r22
    20e0:	77 1f       	adc	r23, r23
    20e2:	88 1f       	adc	r24, r24
    20e4:	91 50       	subi	r25, 0x01	; 1
    20e6:	50 40       	sbci	r21, 0x00	; 0
    20e8:	a9 f7       	brne	.-22     	; 0x20d4 <__mulsf3_pse+0x64>
    20ea:	9e 3f       	cpi	r25, 0xFE	; 254
    20ec:	51 05       	cpc	r21, r1
    20ee:	80 f0       	brcs	.+32     	; 0x2110 <__mulsf3_pse+0xa0>
    20f0:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__fp_inf>
    20f4:	0c 94 1c 10 	jmp	0x2038	; 0x2038 <__fp_szero>
    20f8:	5f 3f       	cpi	r21, 0xFF	; 255
    20fa:	e4 f3       	brlt	.-8      	; 0x20f4 <__mulsf3_pse+0x84>
    20fc:	98 3e       	cpi	r25, 0xE8	; 232
    20fe:	d4 f3       	brlt	.-12     	; 0x20f4 <__mulsf3_pse+0x84>
    2100:	86 95       	lsr	r24
    2102:	77 95       	ror	r23
    2104:	67 95       	ror	r22
    2106:	b7 95       	ror	r27
    2108:	f7 95       	ror	r31
    210a:	e7 95       	ror	r30
    210c:	9f 5f       	subi	r25, 0xFF	; 255
    210e:	c1 f7       	brne	.-16     	; 0x2100 <__mulsf3_pse+0x90>
    2110:	fe 2b       	or	r31, r30
    2112:	88 0f       	add	r24, r24
    2114:	91 1d       	adc	r25, r1
    2116:	96 95       	lsr	r25
    2118:	87 95       	ror	r24
    211a:	97 f9       	bld	r25, 7
    211c:	08 95       	ret

0000211e <__mulsi3>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    211e:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    2120:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    2122:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    2124:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    2128:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    212a:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    212c:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    212e:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    2130:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    2132:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    2134:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    2136:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    2138:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    213a:	11 24       	eor	r1, r1
__mulsi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    213c:	08 95       	ret

0000213e <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    213e:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    2140:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    2142:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    2144:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    2146:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    2148:	0d c0       	rjmp	.+26     	; 0x2164 <__udivmodsi4_ep>

0000214a <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    214a:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    214c:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    214e:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    2150:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    2152:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    2154:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    2156:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    2158:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    215a:	20 f0       	brcs	.+8      	; 0x2164 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    215c:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    215e:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    2160:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    2162:	f5 0b       	sbc	r31, r21

00002164 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    2164:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    2166:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    2168:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    216a:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    216c:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    216e:	69 f7       	brne	.-38     	; 0x214a <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    2170:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    2172:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    2174:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    2176:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    2178:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    217a:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    217c:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    217e:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    2180:	08 95       	ret

00002182 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    2182:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    2184:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    2186:	1e f4       	brtc	.+6      	; 0x218e <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    2188:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    218a:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    218e:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    2190:	07 d0       	rcall	.+14     	; 0x21a0 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    2192:	0e 94 9f 10 	call	0x213e	; 0x213e <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    2196:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    2198:	03 d0       	rcall	.+6      	; 0x21a0 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    219a:	4e f4       	brtc	.+18     	; 0x21ae <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    219c:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__negsi2>

000021a0 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    21a0:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    21a2:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    21a4:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    21a6:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    21a8:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    21aa:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    21ac:	5f 4f       	sbci	r21, 0xFF	; 255

000021ae <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    21ae:	08 95       	ret

000021b0 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    21b0:	90 95       	com	r25
    21b2:	80 95       	com	r24
    21b4:	70 95       	com	r23
    21b6:	61 95       	neg	r22
    21b8:	7f 4f       	sbci	r23, 0xFF	; 255
    21ba:	8f 4f       	sbci	r24, 0xFF	; 255
    21bc:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    21be:	08 95       	ret

000021c0 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    21c0:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    21c4:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    21c6:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    21c8:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    21ca:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    21cc:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    21ce:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    21d0:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    21d2:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    21d4:	08 95       	ret

000021d6 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    21d6:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    21d8:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    21da:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    21dc:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    21de:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    21e0:	09 94       	ijmp

000021e2 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    21e2:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    21e4:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    21e6:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    21e8:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    21ea:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    21ec:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    21ee:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    21f0:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    21f2:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    21f4:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    21f6:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    21f8:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    21fa:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    21fc:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    21fe:	08 95       	ret

00002200 <malloc>:
malloc():
    2200:	0f 93       	push	r16
    2202:	1f 93       	push	r17
    2204:	cf 93       	push	r28
    2206:	df 93       	push	r29
    2208:	82 30       	cpi	r24, 0x02	; 2
    220a:	91 05       	cpc	r25, r1
    220c:	10 f4       	brcc	.+4      	; 0x2212 <malloc+0x12>
    220e:	82 e0       	ldi	r24, 0x02	; 2
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <__flp>
    2216:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <__flp+0x1>
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	a0 e0       	ldi	r26, 0x00	; 0
    2222:	30 97       	sbiw	r30, 0x00	; 0
    2224:	99 f4       	brne	.+38     	; 0x224c <malloc+0x4c>
    2226:	21 15       	cp	r18, r1
    2228:	31 05       	cpc	r19, r1
    222a:	09 f4       	brne	.+2      	; 0x222e <malloc+0x2e>
    222c:	4a c0       	rjmp	.+148    	; 0x22c2 <malloc+0xc2>
    222e:	28 1b       	sub	r18, r24
    2230:	39 0b       	sbc	r19, r25
    2232:	24 30       	cpi	r18, 0x04	; 4
    2234:	31 05       	cpc	r19, r1
    2236:	d8 f5       	brcc	.+118    	; 0x22ae <malloc+0xae>
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	9b 81       	ldd	r25, Y+3	; 0x03
    223c:	61 15       	cp	r22, r1
    223e:	71 05       	cpc	r23, r1
    2240:	89 f1       	breq	.+98     	; 0x22a4 <malloc+0xa4>
    2242:	fb 01       	movw	r30, r22
    2244:	93 83       	std	Z+3, r25	; 0x03
    2246:	82 83       	std	Z+2, r24	; 0x02
    2248:	fe 01       	movw	r30, r28
    224a:	11 c0       	rjmp	.+34     	; 0x226e <malloc+0x6e>
    224c:	40 81       	ld	r20, Z
    224e:	51 81       	ldd	r21, Z+1	; 0x01
    2250:	02 81       	ldd	r16, Z+2	; 0x02
    2252:	13 81       	ldd	r17, Z+3	; 0x03
    2254:	48 17       	cp	r20, r24
    2256:	59 07       	cpc	r21, r25
    2258:	e0 f0       	brcs	.+56     	; 0x2292 <malloc+0x92>
    225a:	48 17       	cp	r20, r24
    225c:	59 07       	cpc	r21, r25
    225e:	99 f4       	brne	.+38     	; 0x2286 <malloc+0x86>
    2260:	10 97       	sbiw	r26, 0x00	; 0
    2262:	61 f0       	breq	.+24     	; 0x227c <malloc+0x7c>
    2264:	12 96       	adiw	r26, 0x02	; 2
    2266:	0c 93       	st	X, r16
    2268:	12 97       	sbiw	r26, 0x02	; 2
    226a:	13 96       	adiw	r26, 0x03	; 3
    226c:	1c 93       	st	X, r17
    226e:	32 96       	adiw	r30, 0x02	; 2
    2270:	cf 01       	movw	r24, r30
    2272:	df 91       	pop	r29
    2274:	cf 91       	pop	r28
    2276:	1f 91       	pop	r17
    2278:	0f 91       	pop	r16
    227a:	08 95       	ret
    227c:	00 93 36 02 	sts	0x0236, r16	; 0x800236 <__flp>
    2280:	10 93 37 02 	sts	0x0237, r17	; 0x800237 <__flp+0x1>
    2284:	f4 cf       	rjmp	.-24     	; 0x226e <malloc+0x6e>
    2286:	21 15       	cp	r18, r1
    2288:	31 05       	cpc	r19, r1
    228a:	51 f0       	breq	.+20     	; 0x22a0 <malloc+0xa0>
    228c:	42 17       	cp	r20, r18
    228e:	53 07       	cpc	r21, r19
    2290:	38 f0       	brcs	.+14     	; 0x22a0 <malloc+0xa0>
    2292:	a9 01       	movw	r20, r18
    2294:	db 01       	movw	r26, r22
    2296:	9a 01       	movw	r18, r20
    2298:	bd 01       	movw	r22, r26
    229a:	df 01       	movw	r26, r30
    229c:	f8 01       	movw	r30, r16
    229e:	c1 cf       	rjmp	.-126    	; 0x2222 <malloc+0x22>
    22a0:	ef 01       	movw	r28, r30
    22a2:	f9 cf       	rjmp	.-14     	; 0x2296 <malloc+0x96>
    22a4:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <__flp+0x1>
    22a8:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <__flp>
    22ac:	cd cf       	rjmp	.-102    	; 0x2248 <malloc+0x48>
    22ae:	fe 01       	movw	r30, r28
    22b0:	e2 0f       	add	r30, r18
    22b2:	f3 1f       	adc	r31, r19
    22b4:	81 93       	st	Z+, r24
    22b6:	91 93       	st	Z+, r25
    22b8:	22 50       	subi	r18, 0x02	; 2
    22ba:	31 09       	sbc	r19, r1
    22bc:	39 83       	std	Y+1, r19	; 0x01
    22be:	28 83       	st	Y, r18
    22c0:	d7 cf       	rjmp	.-82     	; 0x2270 <malloc+0x70>
    22c2:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <__brkval>
    22c6:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <__brkval+0x1>
    22ca:	23 2b       	or	r18, r19
    22cc:	41 f4       	brne	.+16     	; 0x22de <malloc+0xde>
    22ce:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    22d2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    22d6:	30 93 35 02 	sts	0x0235, r19	; 0x800235 <__brkval+0x1>
    22da:	20 93 34 02 	sts	0x0234, r18	; 0x800234 <__brkval>
    22de:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    22e2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    22e6:	21 15       	cp	r18, r1
    22e8:	31 05       	cpc	r19, r1
    22ea:	41 f4       	brne	.+16     	; 0x22fc <malloc+0xfc>
    22ec:	2d b7       	in	r18, 0x3d	; 61
    22ee:	3e b7       	in	r19, 0x3e	; 62
    22f0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    22f4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    22f8:	24 1b       	sub	r18, r20
    22fa:	35 0b       	sbc	r19, r21
    22fc:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <__brkval>
    2300:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <__brkval+0x1>
    2304:	e2 17       	cp	r30, r18
    2306:	f3 07       	cpc	r31, r19
    2308:	a0 f4       	brcc	.+40     	; 0x2332 <malloc+0x132>
    230a:	2e 1b       	sub	r18, r30
    230c:	3f 0b       	sbc	r19, r31
    230e:	28 17       	cp	r18, r24
    2310:	39 07       	cpc	r19, r25
    2312:	78 f0       	brcs	.+30     	; 0x2332 <malloc+0x132>
    2314:	ac 01       	movw	r20, r24
    2316:	4e 5f       	subi	r20, 0xFE	; 254
    2318:	5f 4f       	sbci	r21, 0xFF	; 255
    231a:	24 17       	cp	r18, r20
    231c:	35 07       	cpc	r19, r21
    231e:	48 f0       	brcs	.+18     	; 0x2332 <malloc+0x132>
    2320:	4e 0f       	add	r20, r30
    2322:	5f 1f       	adc	r21, r31
    2324:	50 93 35 02 	sts	0x0235, r21	; 0x800235 <__brkval+0x1>
    2328:	40 93 34 02 	sts	0x0234, r20	; 0x800234 <__brkval>
    232c:	81 93       	st	Z+, r24
    232e:	91 93       	st	Z+, r25
    2330:	9f cf       	rjmp	.-194    	; 0x2270 <malloc+0x70>
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	e0 e0       	ldi	r30, 0x00	; 0
    2336:	9c cf       	rjmp	.-200    	; 0x2270 <malloc+0x70>

00002338 <free>:
free():
    2338:	cf 93       	push	r28
    233a:	df 93       	push	r29
    233c:	00 97       	sbiw	r24, 0x00	; 0
    233e:	e9 f0       	breq	.+58     	; 0x237a <free+0x42>
    2340:	fc 01       	movw	r30, r24
    2342:	32 97       	sbiw	r30, 0x02	; 2
    2344:	13 82       	std	Z+3, r1	; 0x03
    2346:	12 82       	std	Z+2, r1	; 0x02
    2348:	a0 91 36 02 	lds	r26, 0x0236	; 0x800236 <__flp>
    234c:	b0 91 37 02 	lds	r27, 0x0237	; 0x800237 <__flp+0x1>
    2350:	ed 01       	movw	r28, r26
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	10 97       	sbiw	r26, 0x00	; 0
    2358:	a1 f4       	brne	.+40     	; 0x2382 <free+0x4a>
    235a:	20 81       	ld	r18, Z
    235c:	31 81       	ldd	r19, Z+1	; 0x01
    235e:	82 0f       	add	r24, r18
    2360:	93 1f       	adc	r25, r19
    2362:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <__brkval>
    2366:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <__brkval+0x1>
    236a:	28 17       	cp	r18, r24
    236c:	39 07       	cpc	r19, r25
    236e:	09 f0       	breq	.+2      	; 0x2372 <free+0x3a>
    2370:	61 c0       	rjmp	.+194    	; 0x2434 <free+0xfc>
    2372:	f0 93 35 02 	sts	0x0235, r31	; 0x800235 <__brkval+0x1>
    2376:	e0 93 34 02 	sts	0x0234, r30	; 0x800234 <__brkval>
    237a:	df 91       	pop	r29
    237c:	cf 91       	pop	r28
    237e:	08 95       	ret
    2380:	ea 01       	movw	r28, r20
    2382:	ce 17       	cp	r28, r30
    2384:	df 07       	cpc	r29, r31
    2386:	e8 f5       	brcc	.+122    	; 0x2402 <free+0xca>
    2388:	4a 81       	ldd	r20, Y+2	; 0x02
    238a:	5b 81       	ldd	r21, Y+3	; 0x03
    238c:	9e 01       	movw	r18, r28
    238e:	41 15       	cp	r20, r1
    2390:	51 05       	cpc	r21, r1
    2392:	b1 f7       	brne	.-20     	; 0x2380 <free+0x48>
    2394:	e9 01       	movw	r28, r18
    2396:	fb 83       	std	Y+3, r31	; 0x03
    2398:	ea 83       	std	Y+2, r30	; 0x02
    239a:	49 91       	ld	r20, Y+
    239c:	59 91       	ld	r21, Y+
    239e:	c4 0f       	add	r28, r20
    23a0:	d5 1f       	adc	r29, r21
    23a2:	ec 17       	cp	r30, r28
    23a4:	fd 07       	cpc	r31, r29
    23a6:	61 f4       	brne	.+24     	; 0x23c0 <free+0x88>
    23a8:	80 81       	ld	r24, Z
    23aa:	91 81       	ldd	r25, Z+1	; 0x01
    23ac:	02 96       	adiw	r24, 0x02	; 2
    23ae:	84 0f       	add	r24, r20
    23b0:	95 1f       	adc	r25, r21
    23b2:	e9 01       	movw	r28, r18
    23b4:	99 83       	std	Y+1, r25	; 0x01
    23b6:	88 83       	st	Y, r24
    23b8:	82 81       	ldd	r24, Z+2	; 0x02
    23ba:	93 81       	ldd	r25, Z+3	; 0x03
    23bc:	9b 83       	std	Y+3, r25	; 0x03
    23be:	8a 83       	std	Y+2, r24	; 0x02
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	e0 e0       	ldi	r30, 0x00	; 0
    23c4:	12 96       	adiw	r26, 0x02	; 2
    23c6:	8d 91       	ld	r24, X+
    23c8:	9c 91       	ld	r25, X
    23ca:	13 97       	sbiw	r26, 0x03	; 3
    23cc:	00 97       	sbiw	r24, 0x00	; 0
    23ce:	b9 f5       	brne	.+110    	; 0x243e <free+0x106>
    23d0:	2d 91       	ld	r18, X+
    23d2:	3c 91       	ld	r19, X
    23d4:	11 97       	sbiw	r26, 0x01	; 1
    23d6:	cd 01       	movw	r24, r26
    23d8:	02 96       	adiw	r24, 0x02	; 2
    23da:	82 0f       	add	r24, r18
    23dc:	93 1f       	adc	r25, r19
    23de:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <__brkval>
    23e2:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <__brkval+0x1>
    23e6:	28 17       	cp	r18, r24
    23e8:	39 07       	cpc	r19, r25
    23ea:	39 f6       	brne	.-114    	; 0x237a <free+0x42>
    23ec:	30 97       	sbiw	r30, 0x00	; 0
    23ee:	51 f5       	brne	.+84     	; 0x2444 <free+0x10c>
    23f0:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <__flp+0x1>
    23f4:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <__flp>
    23f8:	b0 93 35 02 	sts	0x0235, r27	; 0x800235 <__brkval+0x1>
    23fc:	a0 93 34 02 	sts	0x0234, r26	; 0x800234 <__brkval>
    2400:	bc cf       	rjmp	.-136    	; 0x237a <free+0x42>
    2402:	d3 83       	std	Z+3, r29	; 0x03
    2404:	c2 83       	std	Z+2, r28	; 0x02
    2406:	40 81       	ld	r20, Z
    2408:	51 81       	ldd	r21, Z+1	; 0x01
    240a:	84 0f       	add	r24, r20
    240c:	95 1f       	adc	r25, r21
    240e:	c8 17       	cp	r28, r24
    2410:	d9 07       	cpc	r29, r25
    2412:	61 f4       	brne	.+24     	; 0x242c <free+0xf4>
    2414:	4e 5f       	subi	r20, 0xFE	; 254
    2416:	5f 4f       	sbci	r21, 0xFF	; 255
    2418:	88 81       	ld	r24, Y
    241a:	99 81       	ldd	r25, Y+1	; 0x01
    241c:	48 0f       	add	r20, r24
    241e:	59 1f       	adc	r21, r25
    2420:	51 83       	std	Z+1, r21	; 0x01
    2422:	40 83       	st	Z, r20
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	9b 81       	ldd	r25, Y+3	; 0x03
    2428:	93 83       	std	Z+3, r25	; 0x03
    242a:	82 83       	std	Z+2, r24	; 0x02
    242c:	21 15       	cp	r18, r1
    242e:	31 05       	cpc	r19, r1
    2430:	09 f0       	breq	.+2      	; 0x2434 <free+0xfc>
    2432:	b0 cf       	rjmp	.-160    	; 0x2394 <free+0x5c>
    2434:	f0 93 37 02 	sts	0x0237, r31	; 0x800237 <__flp+0x1>
    2438:	e0 93 36 02 	sts	0x0236, r30	; 0x800236 <__flp>
    243c:	9e cf       	rjmp	.-196    	; 0x237a <free+0x42>
    243e:	fd 01       	movw	r30, r26
    2440:	dc 01       	movw	r26, r24
    2442:	c0 cf       	rjmp	.-128    	; 0x23c4 <free+0x8c>
    2444:	13 82       	std	Z+3, r1	; 0x03
    2446:	12 82       	std	Z+2, r1	; 0x02
    2448:	d7 cf       	rjmp	.-82     	; 0x23f8 <free+0xc0>

0000244a <realloc>:
realloc():
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	a0 e0       	ldi	r26, 0x00	; 0
    244e:	eb e2       	ldi	r30, 0x2B	; 43
    2450:	f2 e1       	ldi	r31, 0x12	; 18
    2452:	0c 94 ba 15 	jmp	0x2b74	; 0x2b74 <__prologue_saves__+0x4>
    2456:	8c 01       	movw	r16, r24
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	51 f4       	brne	.+20     	; 0x2470 <realloc+0x26>
    245c:	cb 01       	movw	r24, r22
    245e:	0e 94 00 11 	call	0x2200	; 0x2200 <malloc>
    2462:	8c 01       	movw	r16, r24
    2464:	c8 01       	movw	r24, r16
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	e0 e1       	ldi	r30, 0x10	; 16
    246c:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <__epilogue_restores__+0x4>
    2470:	fc 01       	movw	r30, r24
    2472:	e6 0f       	add	r30, r22
    2474:	f7 1f       	adc	r31, r23
    2476:	9c 01       	movw	r18, r24
    2478:	22 50       	subi	r18, 0x02	; 2
    247a:	31 09       	sbc	r19, r1
    247c:	e2 17       	cp	r30, r18
    247e:	f3 07       	cpc	r31, r19
    2480:	08 f4       	brcc	.+2      	; 0x2484 <realloc+0x3a>
    2482:	9d c0       	rjmp	.+314    	; 0x25be <realloc+0x174>
    2484:	d9 01       	movw	r26, r18
    2486:	cd 91       	ld	r28, X+
    2488:	dc 91       	ld	r29, X
    248a:	11 97       	sbiw	r26, 0x01	; 1
    248c:	c6 17       	cp	r28, r22
    248e:	d7 07       	cpc	r29, r23
    2490:	98 f0       	brcs	.+38     	; 0x24b8 <realloc+0x6e>
    2492:	c5 30       	cpi	r28, 0x05	; 5
    2494:	d1 05       	cpc	r29, r1
    2496:	30 f3       	brcs	.-52     	; 0x2464 <realloc+0x1a>
    2498:	ce 01       	movw	r24, r28
    249a:	04 97       	sbiw	r24, 0x04	; 4
    249c:	86 17       	cp	r24, r22
    249e:	97 07       	cpc	r25, r23
    24a0:	08 f3       	brcs	.-62     	; 0x2464 <realloc+0x1a>
    24a2:	c6 1b       	sub	r28, r22
    24a4:	d7 0b       	sbc	r29, r23
    24a6:	22 97       	sbiw	r28, 0x02	; 2
    24a8:	c1 93       	st	Z+, r28
    24aa:	d1 93       	st	Z+, r29
    24ac:	6d 93       	st	X+, r22
    24ae:	7c 93       	st	X, r23
    24b0:	cf 01       	movw	r24, r30
    24b2:	0e 94 9c 11 	call	0x2338	; 0x2338 <free>
    24b6:	d6 cf       	rjmp	.-84     	; 0x2464 <realloc+0x1a>
    24b8:	5b 01       	movw	r10, r22
    24ba:	ac 1a       	sub	r10, r28
    24bc:	bd 0a       	sbc	r11, r29
    24be:	4c 01       	movw	r8, r24
    24c0:	8c 0e       	add	r8, r28
    24c2:	9d 1e       	adc	r9, r29
    24c4:	a0 91 36 02 	lds	r26, 0x0236	; 0x800236 <__flp>
    24c8:	b0 91 37 02 	lds	r27, 0x0237	; 0x800237 <__flp+0x1>
    24cc:	51 2c       	mov	r5, r1
    24ce:	41 2c       	mov	r4, r1
    24d0:	f1 2c       	mov	r15, r1
    24d2:	e1 2c       	mov	r14, r1
    24d4:	10 97       	sbiw	r26, 0x00	; 0
    24d6:	31 f5       	brne	.+76     	; 0x2524 <realloc+0xda>
    24d8:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <__brkval>
    24dc:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <__brkval+0x1>
    24e0:	88 15       	cp	r24, r8
    24e2:	99 05       	cpc	r25, r9
    24e4:	09 f0       	breq	.+2      	; 0x24e8 <realloc+0x9e>
    24e6:	5c c0       	rjmp	.+184    	; 0x25a0 <realloc+0x156>
    24e8:	46 16       	cp	r4, r22
    24ea:	57 06       	cpc	r5, r23
    24ec:	08 f0       	brcs	.+2      	; 0x24f0 <realloc+0xa6>
    24ee:	58 c0       	rjmp	.+176    	; 0x25a0 <realloc+0x156>
    24f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    24f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	41 f4       	brne	.+16     	; 0x250c <realloc+0xc2>
    24fc:	8d b7       	in	r24, 0x3d	; 61
    24fe:	9e b7       	in	r25, 0x3e	; 62
    2500:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2504:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2508:	84 1b       	sub	r24, r20
    250a:	95 0b       	sbc	r25, r21
    250c:	e8 17       	cp	r30, r24
    250e:	f9 07       	cpc	r31, r25
    2510:	08 f0       	brcs	.+2      	; 0x2514 <realloc+0xca>
    2512:	55 c0       	rjmp	.+170    	; 0x25be <realloc+0x174>
    2514:	f0 93 35 02 	sts	0x0235, r31	; 0x800235 <__brkval+0x1>
    2518:	e0 93 34 02 	sts	0x0234, r30	; 0x800234 <__brkval>
    251c:	f9 01       	movw	r30, r18
    251e:	71 83       	std	Z+1, r23	; 0x01
    2520:	60 83       	st	Z, r22
    2522:	a0 cf       	rjmp	.-192    	; 0x2464 <realloc+0x1a>
    2524:	8d 91       	ld	r24, X+
    2526:	9c 91       	ld	r25, X
    2528:	11 97       	sbiw	r26, 0x01	; 1
    252a:	12 96       	adiw	r26, 0x02	; 2
    252c:	6c 90       	ld	r6, X
    252e:	12 97       	sbiw	r26, 0x02	; 2
    2530:	13 96       	adiw	r26, 0x03	; 3
    2532:	7c 90       	ld	r7, X
    2534:	13 97       	sbiw	r26, 0x03	; 3
    2536:	a8 15       	cp	r26, r8
    2538:	b9 05       	cpc	r27, r9
    253a:	59 f5       	brne	.+86     	; 0x2592 <realloc+0x148>
    253c:	6c 01       	movw	r12, r24
    253e:	42 e0       	ldi	r20, 0x02	; 2
    2540:	c4 0e       	add	r12, r20
    2542:	d1 1c       	adc	r13, r1
    2544:	ca 14       	cp	r12, r10
    2546:	db 04       	cpc	r13, r11
    2548:	20 f1       	brcs	.+72     	; 0x2592 <realloc+0x148>
    254a:	ac 01       	movw	r20, r24
    254c:	4a 19       	sub	r20, r10
    254e:	5b 09       	sbc	r21, r11
    2550:	da 01       	movw	r26, r20
    2552:	12 96       	adiw	r26, 0x02	; 2
    2554:	15 97       	sbiw	r26, 0x05	; 5
    2556:	80 f0       	brcs	.+32     	; 0x2578 <realloc+0x12e>
    2558:	62 82       	std	Z+2, r6	; 0x02
    255a:	73 82       	std	Z+3, r7	; 0x03
    255c:	51 83       	std	Z+1, r21	; 0x01
    255e:	40 83       	st	Z, r20
    2560:	d9 01       	movw	r26, r18
    2562:	6d 93       	st	X+, r22
    2564:	7c 93       	st	X, r23
    2566:	e1 14       	cp	r14, r1
    2568:	f1 04       	cpc	r15, r1
    256a:	71 f0       	breq	.+28     	; 0x2588 <realloc+0x13e>
    256c:	d7 01       	movw	r26, r14
    256e:	13 96       	adiw	r26, 0x03	; 3
    2570:	fc 93       	st	X, r31
    2572:	ee 93       	st	-X, r30
    2574:	12 97       	sbiw	r26, 0x02	; 2
    2576:	76 cf       	rjmp	.-276    	; 0x2464 <realloc+0x1a>
    2578:	22 96       	adiw	r28, 0x02	; 2
    257a:	8c 0f       	add	r24, r28
    257c:	9d 1f       	adc	r25, r29
    257e:	f9 01       	movw	r30, r18
    2580:	91 83       	std	Z+1, r25	; 0x01
    2582:	80 83       	st	Z, r24
    2584:	f3 01       	movw	r30, r6
    2586:	ef cf       	rjmp	.-34     	; 0x2566 <realloc+0x11c>
    2588:	f0 93 37 02 	sts	0x0237, r31	; 0x800237 <__flp+0x1>
    258c:	e0 93 36 02 	sts	0x0236, r30	; 0x800236 <__flp>
    2590:	69 cf       	rjmp	.-302    	; 0x2464 <realloc+0x1a>
    2592:	48 16       	cp	r4, r24
    2594:	59 06       	cpc	r5, r25
    2596:	08 f4       	brcc	.+2      	; 0x259a <realloc+0x150>
    2598:	2c 01       	movw	r4, r24
    259a:	7d 01       	movw	r14, r26
    259c:	d3 01       	movw	r26, r6
    259e:	9a cf       	rjmp	.-204    	; 0x24d4 <realloc+0x8a>
    25a0:	cb 01       	movw	r24, r22
    25a2:	0e 94 00 11 	call	0x2200	; 0x2200 <malloc>
    25a6:	7c 01       	movw	r14, r24
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	49 f0       	breq	.+18     	; 0x25be <realloc+0x174>
    25ac:	ae 01       	movw	r20, r28
    25ae:	b8 01       	movw	r22, r16
    25b0:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <memcpy>
    25b4:	c8 01       	movw	r24, r16
    25b6:	0e 94 9c 11 	call	0x2338	; 0x2338 <free>
    25ba:	87 01       	movw	r16, r14
    25bc:	53 cf       	rjmp	.-346    	; 0x2464 <realloc+0x1a>
    25be:	10 e0       	ldi	r17, 0x00	; 0
    25c0:	00 e0       	ldi	r16, 0x00	; 0
    25c2:	50 cf       	rjmp	.-352    	; 0x2464 <realloc+0x1a>

000025c4 <memcpy>:
memcpy():
    25c4:	fb 01       	movw	r30, r22
    25c6:	dc 01       	movw	r26, r24
    25c8:	02 c0       	rjmp	.+4      	; 0x25ce <memcpy+0xa>
    25ca:	01 90       	ld	r0, Z+
    25cc:	0d 92       	st	X+, r0
    25ce:	41 50       	subi	r20, 0x01	; 1
    25d0:	50 40       	sbci	r21, 0x00	; 0
    25d2:	d8 f7       	brcc	.-10     	; 0x25ca <memcpy+0x6>
    25d4:	08 95       	ret

000025d6 <strcpy>:
strcpy():
    25d6:	fb 01       	movw	r30, r22
    25d8:	dc 01       	movw	r26, r24
    25da:	01 90       	ld	r0, Z+
    25dc:	0d 92       	st	X+, r0
    25de:	00 20       	and	r0, r0
    25e0:	e1 f7       	brne	.-8      	; 0x25da <strcpy+0x4>
    25e2:	08 95       	ret

000025e4 <strncpy>:
strncpy():
    25e4:	fb 01       	movw	r30, r22
    25e6:	dc 01       	movw	r26, r24
    25e8:	41 50       	subi	r20, 0x01	; 1
    25ea:	50 40       	sbci	r21, 0x00	; 0
    25ec:	48 f0       	brcs	.+18     	; 0x2600 <strncpy+0x1c>
    25ee:	01 90       	ld	r0, Z+
    25f0:	0d 92       	st	X+, r0
    25f2:	00 20       	and	r0, r0
    25f4:	c9 f7       	brne	.-14     	; 0x25e8 <strncpy+0x4>
    25f6:	01 c0       	rjmp	.+2      	; 0x25fa <strncpy+0x16>
    25f8:	1d 92       	st	X+, r1
    25fa:	41 50       	subi	r20, 0x01	; 1
    25fc:	50 40       	sbci	r21, 0x00	; 0
    25fe:	e0 f7       	brcc	.-8      	; 0x25f8 <strncpy+0x14>
    2600:	08 95       	ret

00002602 <sprintf>:
sprintf():
    2602:	ae e0       	ldi	r26, 0x0E	; 14
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	e7 e0       	ldi	r30, 0x07	; 7
    2608:	f3 e1       	ldi	r31, 0x13	; 19
    260a:	0c 94 c6 15 	jmp	0x2b8c	; 0x2b8c <__prologue_saves__+0x1c>
    260e:	0d 89       	ldd	r16, Y+21	; 0x15
    2610:	1e 89       	ldd	r17, Y+22	; 0x16
    2612:	86 e0       	ldi	r24, 0x06	; 6
    2614:	8c 83       	std	Y+4, r24	; 0x04
    2616:	1a 83       	std	Y+2, r17	; 0x02
    2618:	09 83       	std	Y+1, r16	; 0x01
    261a:	8f ef       	ldi	r24, 0xFF	; 255
    261c:	9f e7       	ldi	r25, 0x7F	; 127
    261e:	9e 83       	std	Y+6, r25	; 0x06
    2620:	8d 83       	std	Y+5, r24	; 0x05
    2622:	ae 01       	movw	r20, r28
    2624:	47 5e       	subi	r20, 0xE7	; 231
    2626:	5f 4f       	sbci	r21, 0xFF	; 255
    2628:	6f 89       	ldd	r22, Y+23	; 0x17
    262a:	78 8d       	ldd	r23, Y+24	; 0x18
    262c:	ce 01       	movw	r24, r28
    262e:	01 96       	adiw	r24, 0x01	; 1
    2630:	0e 94 24 13 	call	0x2648	; 0x2648 <vfprintf>
    2634:	2f 81       	ldd	r18, Y+7	; 0x07
    2636:	38 85       	ldd	r19, Y+8	; 0x08
    2638:	02 0f       	add	r16, r18
    263a:	13 1f       	adc	r17, r19
    263c:	f8 01       	movw	r30, r16
    263e:	10 82       	st	Z, r1
    2640:	2e 96       	adiw	r28, 0x0e	; 14
    2642:	e4 e0       	ldi	r30, 0x04	; 4
    2644:	0c 94 e2 15 	jmp	0x2bc4	; 0x2bc4 <__epilogue_restores__+0x1c>

00002648 <vfprintf>:
vfprintf():
    2648:	ab e0       	ldi	r26, 0x0B	; 11
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	ea e2       	ldi	r30, 0x2A	; 42
    264e:	f3 e1       	ldi	r31, 0x13	; 19
    2650:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__prologue_saves__>
    2654:	7c 01       	movw	r14, r24
    2656:	3b 01       	movw	r6, r22
    2658:	8a 01       	movw	r16, r20
    265a:	fc 01       	movw	r30, r24
    265c:	17 82       	std	Z+7, r1	; 0x07
    265e:	16 82       	std	Z+6, r1	; 0x06
    2660:	83 81       	ldd	r24, Z+3	; 0x03
    2662:	81 ff       	sbrs	r24, 1
    2664:	c8 c1       	rjmp	.+912    	; 0x29f6 <vfprintf+0x3ae>
    2666:	ce 01       	movw	r24, r28
    2668:	01 96       	adiw	r24, 0x01	; 1
    266a:	5c 01       	movw	r10, r24
    266c:	f7 01       	movw	r30, r14
    266e:	93 81       	ldd	r25, Z+3	; 0x03
    2670:	f3 01       	movw	r30, r6
    2672:	93 fd       	sbrc	r25, 3
    2674:	85 91       	lpm	r24, Z+
    2676:	93 ff       	sbrs	r25, 3
    2678:	81 91       	ld	r24, Z+
    267a:	3f 01       	movw	r6, r30
    267c:	88 23       	and	r24, r24
    267e:	09 f4       	brne	.+2      	; 0x2682 <vfprintf+0x3a>
    2680:	53 c1       	rjmp	.+678    	; 0x2928 <vfprintf+0x2e0>
    2682:	85 32       	cpi	r24, 0x25	; 37
    2684:	39 f4       	brne	.+14     	; 0x2694 <vfprintf+0x4c>
    2686:	93 fd       	sbrc	r25, 3
    2688:	85 91       	lpm	r24, Z+
    268a:	93 ff       	sbrs	r25, 3
    268c:	81 91       	ld	r24, Z+
    268e:	3f 01       	movw	r6, r30
    2690:	85 32       	cpi	r24, 0x25	; 37
    2692:	29 f4       	brne	.+10     	; 0x269e <vfprintf+0x56>
    2694:	b7 01       	movw	r22, r14
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	0e 94 14 15 	call	0x2a28	; 0x2a28 <fputc>
    269c:	e7 cf       	rjmp	.-50     	; 0x266c <vfprintf+0x24>
    269e:	91 2c       	mov	r9, r1
    26a0:	21 2c       	mov	r2, r1
    26a2:	31 2c       	mov	r3, r1
    26a4:	ff e1       	ldi	r31, 0x1F	; 31
    26a6:	f3 15       	cp	r31, r3
    26a8:	38 f0       	brcs	.+14     	; 0x26b8 <vfprintf+0x70>
    26aa:	8b 32       	cpi	r24, 0x2B	; 43
    26ac:	11 f1       	breq	.+68     	; 0x26f2 <vfprintf+0xaa>
    26ae:	90 f4       	brcc	.+36     	; 0x26d4 <vfprintf+0x8c>
    26b0:	80 32       	cpi	r24, 0x20	; 32
    26b2:	09 f1       	breq	.+66     	; 0x26f6 <vfprintf+0xae>
    26b4:	83 32       	cpi	r24, 0x23	; 35
    26b6:	29 f1       	breq	.+74     	; 0x2702 <vfprintf+0xba>
    26b8:	37 fc       	sbrc	r3, 7
    26ba:	3c c0       	rjmp	.+120    	; 0x2734 <vfprintf+0xec>
    26bc:	20 ed       	ldi	r18, 0xD0	; 208
    26be:	28 0f       	add	r18, r24
    26c0:	2a 30       	cpi	r18, 0x0A	; 10
    26c2:	50 f5       	brcc	.+84     	; 0x2718 <vfprintf+0xd0>
    26c4:	36 fe       	sbrs	r3, 6
    26c6:	20 c0       	rjmp	.+64     	; 0x2708 <vfprintf+0xc0>
    26c8:	8a e0       	ldi	r24, 0x0A	; 10
    26ca:	98 9e       	mul	r9, r24
    26cc:	20 0d       	add	r18, r0
    26ce:	11 24       	eor	r1, r1
    26d0:	92 2e       	mov	r9, r18
    26d2:	06 c0       	rjmp	.+12     	; 0x26e0 <vfprintf+0x98>
    26d4:	8d 32       	cpi	r24, 0x2D	; 45
    26d6:	91 f0       	breq	.+36     	; 0x26fc <vfprintf+0xb4>
    26d8:	80 33       	cpi	r24, 0x30	; 48
    26da:	71 f7       	brne	.-36     	; 0x26b8 <vfprintf+0x70>
    26dc:	68 94       	set
    26de:	30 f8       	bld	r3, 0
    26e0:	f3 01       	movw	r30, r6
    26e2:	93 fd       	sbrc	r25, 3
    26e4:	85 91       	lpm	r24, Z+
    26e6:	93 ff       	sbrs	r25, 3
    26e8:	81 91       	ld	r24, Z+
    26ea:	3f 01       	movw	r6, r30
    26ec:	81 11       	cpse	r24, r1
    26ee:	da cf       	rjmp	.-76     	; 0x26a4 <vfprintf+0x5c>
    26f0:	21 c0       	rjmp	.+66     	; 0x2734 <vfprintf+0xec>
    26f2:	68 94       	set
    26f4:	31 f8       	bld	r3, 1
    26f6:	68 94       	set
    26f8:	32 f8       	bld	r3, 2
    26fa:	f2 cf       	rjmp	.-28     	; 0x26e0 <vfprintf+0x98>
    26fc:	68 94       	set
    26fe:	33 f8       	bld	r3, 3
    2700:	ef cf       	rjmp	.-34     	; 0x26e0 <vfprintf+0x98>
    2702:	68 94       	set
    2704:	34 f8       	bld	r3, 4
    2706:	ec cf       	rjmp	.-40     	; 0x26e0 <vfprintf+0x98>
    2708:	ea e0       	ldi	r30, 0x0A	; 10
    270a:	2e 9e       	mul	r2, r30
    270c:	20 0d       	add	r18, r0
    270e:	11 24       	eor	r1, r1
    2710:	22 2e       	mov	r2, r18
    2712:	68 94       	set
    2714:	35 f8       	bld	r3, 5
    2716:	e4 cf       	rjmp	.-56     	; 0x26e0 <vfprintf+0x98>
    2718:	8e 32       	cpi	r24, 0x2E	; 46
    271a:	29 f4       	brne	.+10     	; 0x2726 <vfprintf+0xde>
    271c:	36 fc       	sbrc	r3, 6
    271e:	04 c1       	rjmp	.+520    	; 0x2928 <vfprintf+0x2e0>
    2720:	68 94       	set
    2722:	36 f8       	bld	r3, 6
    2724:	dd cf       	rjmp	.-70     	; 0x26e0 <vfprintf+0x98>
    2726:	8c 36       	cpi	r24, 0x6C	; 108
    2728:	19 f4       	brne	.+6      	; 0x2730 <vfprintf+0xe8>
    272a:	68 94       	set
    272c:	37 f8       	bld	r3, 7
    272e:	d8 cf       	rjmp	.-80     	; 0x26e0 <vfprintf+0x98>
    2730:	88 36       	cpi	r24, 0x68	; 104
    2732:	b1 f2       	breq	.-84     	; 0x26e0 <vfprintf+0x98>
    2734:	98 2f       	mov	r25, r24
    2736:	9f 7d       	andi	r25, 0xDF	; 223
    2738:	95 54       	subi	r25, 0x45	; 69
    273a:	93 30       	cpi	r25, 0x03	; 3
    273c:	e0 f0       	brcs	.+56     	; 0x2776 <vfprintf+0x12e>
    273e:	83 36       	cpi	r24, 0x63	; 99
    2740:	a1 f1       	breq	.+104    	; 0x27aa <vfprintf+0x162>
    2742:	83 37       	cpi	r24, 0x73	; 115
    2744:	c1 f1       	breq	.+112    	; 0x27b6 <vfprintf+0x16e>
    2746:	83 35       	cpi	r24, 0x53	; 83
    2748:	09 f0       	breq	.+2      	; 0x274c <vfprintf+0x104>
    274a:	63 c0       	rjmp	.+198    	; 0x2812 <vfprintf+0x1ca>
    274c:	28 01       	movw	r4, r16
    274e:	f2 e0       	ldi	r31, 0x02	; 2
    2750:	4f 0e       	add	r4, r31
    2752:	51 1c       	adc	r5, r1
    2754:	f8 01       	movw	r30, r16
    2756:	c0 80       	ld	r12, Z
    2758:	d1 80       	ldd	r13, Z+1	; 0x01
    275a:	69 2d       	mov	r22, r9
    275c:	70 e0       	ldi	r23, 0x00	; 0
    275e:	36 fc       	sbrc	r3, 6
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <vfprintf+0x11e>
    2762:	6f ef       	ldi	r22, 0xFF	; 255
    2764:	7f ef       	ldi	r23, 0xFF	; 255
    2766:	c6 01       	movw	r24, r12
    2768:	0e 94 fe 14 	call	0x29fc	; 0x29fc <strnlen_P>
    276c:	4c 01       	movw	r8, r24
    276e:	68 94       	set
    2770:	37 f8       	bld	r3, 7
    2772:	82 01       	movw	r16, r4
    2774:	0a c0       	rjmp	.+20     	; 0x278a <vfprintf+0x142>
    2776:	0c 5f       	subi	r16, 0xFC	; 252
    2778:	1f 4f       	sbci	r17, 0xFF	; 255
    277a:	ff e3       	ldi	r31, 0x3F	; 63
    277c:	f9 83       	std	Y+1, r31	; 0x01
    277e:	88 24       	eor	r8, r8
    2780:	83 94       	inc	r8
    2782:	91 2c       	mov	r9, r1
    2784:	65 01       	movw	r12, r10
    2786:	e8 94       	clt
    2788:	37 f8       	bld	r3, 7
    278a:	33 fe       	sbrs	r3, 3
    278c:	2d c0       	rjmp	.+90     	; 0x27e8 <vfprintf+0x1a0>
    278e:	52 2c       	mov	r5, r2
    2790:	81 14       	cp	r8, r1
    2792:	91 04       	cpc	r9, r1
    2794:	71 f5       	brne	.+92     	; 0x27f2 <vfprintf+0x1aa>
    2796:	55 20       	and	r5, r5
    2798:	09 f4       	brne	.+2      	; 0x279c <vfprintf+0x154>
    279a:	68 cf       	rjmp	.-304    	; 0x266c <vfprintf+0x24>
    279c:	b7 01       	movw	r22, r14
    279e:	80 e2       	ldi	r24, 0x20	; 32
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	0e 94 14 15 	call	0x2a28	; 0x2a28 <fputc>
    27a6:	5a 94       	dec	r5
    27a8:	f6 cf       	rjmp	.-20     	; 0x2796 <vfprintf+0x14e>
    27aa:	f8 01       	movw	r30, r16
    27ac:	80 81       	ld	r24, Z
    27ae:	89 83       	std	Y+1, r24	; 0x01
    27b0:	0e 5f       	subi	r16, 0xFE	; 254
    27b2:	1f 4f       	sbci	r17, 0xFF	; 255
    27b4:	e4 cf       	rjmp	.-56     	; 0x277e <vfprintf+0x136>
    27b6:	28 01       	movw	r4, r16
    27b8:	f2 e0       	ldi	r31, 0x02	; 2
    27ba:	4f 0e       	add	r4, r31
    27bc:	51 1c       	adc	r5, r1
    27be:	f8 01       	movw	r30, r16
    27c0:	c0 80       	ld	r12, Z
    27c2:	d1 80       	ldd	r13, Z+1	; 0x01
    27c4:	69 2d       	mov	r22, r9
    27c6:	70 e0       	ldi	r23, 0x00	; 0
    27c8:	36 fc       	sbrc	r3, 6
    27ca:	02 c0       	rjmp	.+4      	; 0x27d0 <vfprintf+0x188>
    27cc:	6f ef       	ldi	r22, 0xFF	; 255
    27ce:	7f ef       	ldi	r23, 0xFF	; 255
    27d0:	c6 01       	movw	r24, r12
    27d2:	0e 94 09 15 	call	0x2a12	; 0x2a12 <strnlen>
    27d6:	4c 01       	movw	r8, r24
    27d8:	82 01       	movw	r16, r4
    27da:	d5 cf       	rjmp	.-86     	; 0x2786 <vfprintf+0x13e>
    27dc:	b7 01       	movw	r22, r14
    27de:	80 e2       	ldi	r24, 0x20	; 32
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	0e 94 14 15 	call	0x2a28	; 0x2a28 <fputc>
    27e6:	2a 94       	dec	r2
    27e8:	28 14       	cp	r2, r8
    27ea:	19 04       	cpc	r1, r9
    27ec:	09 f0       	breq	.+2      	; 0x27f0 <vfprintf+0x1a8>
    27ee:	b0 f7       	brcc	.-20     	; 0x27dc <vfprintf+0x194>
    27f0:	ce cf       	rjmp	.-100    	; 0x278e <vfprintf+0x146>
    27f2:	f6 01       	movw	r30, r12
    27f4:	37 fc       	sbrc	r3, 7
    27f6:	85 91       	lpm	r24, Z+
    27f8:	37 fe       	sbrs	r3, 7
    27fa:	81 91       	ld	r24, Z+
    27fc:	6f 01       	movw	r12, r30
    27fe:	b7 01       	movw	r22, r14
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	0e 94 14 15 	call	0x2a28	; 0x2a28 <fputc>
    2806:	51 10       	cpse	r5, r1
    2808:	5a 94       	dec	r5
    280a:	f1 e0       	ldi	r31, 0x01	; 1
    280c:	8f 1a       	sub	r8, r31
    280e:	91 08       	sbc	r9, r1
    2810:	bf cf       	rjmp	.-130    	; 0x2790 <vfprintf+0x148>
    2812:	84 36       	cpi	r24, 0x64	; 100
    2814:	19 f0       	breq	.+6      	; 0x281c <vfprintf+0x1d4>
    2816:	89 36       	cpi	r24, 0x69	; 105
    2818:	09 f0       	breq	.+2      	; 0x281c <vfprintf+0x1d4>
    281a:	77 c0       	rjmp	.+238    	; 0x290a <vfprintf+0x2c2>
    281c:	f8 01       	movw	r30, r16
    281e:	37 fe       	sbrs	r3, 7
    2820:	6b c0       	rjmp	.+214    	; 0x28f8 <vfprintf+0x2b0>
    2822:	60 81       	ld	r22, Z
    2824:	71 81       	ldd	r23, Z+1	; 0x01
    2826:	82 81       	ldd	r24, Z+2	; 0x02
    2828:	93 81       	ldd	r25, Z+3	; 0x03
    282a:	0c 5f       	subi	r16, 0xFC	; 252
    282c:	1f 4f       	sbci	r17, 0xFF	; 255
    282e:	f3 2d       	mov	r31, r3
    2830:	ff 76       	andi	r31, 0x6F	; 111
    2832:	3f 2e       	mov	r3, r31
    2834:	97 ff       	sbrs	r25, 7
    2836:	09 c0       	rjmp	.+18     	; 0x284a <vfprintf+0x202>
    2838:	90 95       	com	r25
    283a:	80 95       	com	r24
    283c:	70 95       	com	r23
    283e:	61 95       	neg	r22
    2840:	7f 4f       	sbci	r23, 0xFF	; 255
    2842:	8f 4f       	sbci	r24, 0xFF	; 255
    2844:	9f 4f       	sbci	r25, 0xFF	; 255
    2846:	68 94       	set
    2848:	37 f8       	bld	r3, 7
    284a:	2a e0       	ldi	r18, 0x0A	; 10
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	a5 01       	movw	r20, r10
    2850:	0e 94 44 15 	call	0x2a88	; 0x2a88 <__ultoa_invert>
    2854:	c8 2e       	mov	r12, r24
    2856:	ca 18       	sub	r12, r10
    2858:	8c 2c       	mov	r8, r12
    285a:	43 2c       	mov	r4, r3
    285c:	36 fe       	sbrs	r3, 6
    285e:	0c c0       	rjmp	.+24     	; 0x2878 <vfprintf+0x230>
    2860:	e8 94       	clt
    2862:	40 f8       	bld	r4, 0
    2864:	c9 14       	cp	r12, r9
    2866:	40 f4       	brcc	.+16     	; 0x2878 <vfprintf+0x230>
    2868:	34 fe       	sbrs	r3, 4
    286a:	05 c0       	rjmp	.+10     	; 0x2876 <vfprintf+0x22e>
    286c:	32 fc       	sbrc	r3, 2
    286e:	03 c0       	rjmp	.+6      	; 0x2876 <vfprintf+0x22e>
    2870:	f3 2d       	mov	r31, r3
    2872:	fe 7e       	andi	r31, 0xEE	; 238
    2874:	4f 2e       	mov	r4, r31
    2876:	89 2c       	mov	r8, r9
    2878:	44 fe       	sbrs	r4, 4
    287a:	95 c0       	rjmp	.+298    	; 0x29a6 <vfprintf+0x35e>
    287c:	fe 01       	movw	r30, r28
    287e:	ec 0d       	add	r30, r12
    2880:	f1 1d       	adc	r31, r1
    2882:	80 81       	ld	r24, Z
    2884:	80 33       	cpi	r24, 0x30	; 48
    2886:	09 f0       	breq	.+2      	; 0x288a <vfprintf+0x242>
    2888:	87 c0       	rjmp	.+270    	; 0x2998 <vfprintf+0x350>
    288a:	24 2d       	mov	r18, r4
    288c:	29 7e       	andi	r18, 0xE9	; 233
    288e:	42 2e       	mov	r4, r18
    2890:	84 2d       	mov	r24, r4
    2892:	88 70       	andi	r24, 0x08	; 8
    2894:	58 2e       	mov	r5, r24
    2896:	43 fc       	sbrc	r4, 3
    2898:	95 c0       	rjmp	.+298    	; 0x29c4 <vfprintf+0x37c>
    289a:	40 fe       	sbrs	r4, 0
    289c:	8f c0       	rjmp	.+286    	; 0x29bc <vfprintf+0x374>
    289e:	9c 2c       	mov	r9, r12
    28a0:	82 14       	cp	r8, r2
    28a2:	18 f4       	brcc	.+6      	; 0x28aa <vfprintf+0x262>
    28a4:	2c 0c       	add	r2, r12
    28a6:	92 2c       	mov	r9, r2
    28a8:	98 18       	sub	r9, r8
    28aa:	44 fe       	sbrs	r4, 4
    28ac:	91 c0       	rjmp	.+290    	; 0x29d0 <vfprintf+0x388>
    28ae:	b7 01       	movw	r22, r14
    28b0:	80 e3       	ldi	r24, 0x30	; 48
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	0e 94 14 15 	call	0x2a28	; 0x2a28 <fputc>
    28b8:	42 fe       	sbrs	r4, 2
    28ba:	09 c0       	rjmp	.+18     	; 0x28ce <vfprintf+0x286>
    28bc:	88 e7       	ldi	r24, 0x78	; 120
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	41 fe       	sbrs	r4, 1
    28c2:	02 c0       	rjmp	.+4      	; 0x28c8 <vfprintf+0x280>
    28c4:	88 e5       	ldi	r24, 0x58	; 88
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	b7 01       	movw	r22, r14
    28ca:	0e 94 14 15 	call	0x2a28	; 0x2a28 <fputc>
    28ce:	c9 14       	cp	r12, r9
    28d0:	08 f4       	brcc	.+2      	; 0x28d4 <vfprintf+0x28c>
    28d2:	8a c0       	rjmp	.+276    	; 0x29e8 <vfprintf+0x3a0>
    28d4:	ca 94       	dec	r12
    28d6:	d1 2c       	mov	r13, r1
    28d8:	9f ef       	ldi	r25, 0xFF	; 255
    28da:	c9 1a       	sub	r12, r25
    28dc:	d9 0a       	sbc	r13, r25
    28de:	ca 0c       	add	r12, r10
    28e0:	db 1c       	adc	r13, r11
    28e2:	f6 01       	movw	r30, r12
    28e4:	82 91       	ld	r24, -Z
    28e6:	6f 01       	movw	r12, r30
    28e8:	b7 01       	movw	r22, r14
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	0e 94 14 15 	call	0x2a28	; 0x2a28 <fputc>
    28f0:	ac 14       	cp	r10, r12
    28f2:	bd 04       	cpc	r11, r13
    28f4:	b1 f7       	brne	.-20     	; 0x28e2 <vfprintf+0x29a>
    28f6:	4f cf       	rjmp	.-354    	; 0x2796 <vfprintf+0x14e>
    28f8:	60 81       	ld	r22, Z
    28fa:	71 81       	ldd	r23, Z+1	; 0x01
    28fc:	07 2e       	mov	r0, r23
    28fe:	00 0c       	add	r0, r0
    2900:	88 0b       	sbc	r24, r24
    2902:	99 0b       	sbc	r25, r25
    2904:	0e 5f       	subi	r16, 0xFE	; 254
    2906:	1f 4f       	sbci	r17, 0xFF	; 255
    2908:	92 cf       	rjmp	.-220    	; 0x282e <vfprintf+0x1e6>
    290a:	d3 2c       	mov	r13, r3
    290c:	e8 94       	clt
    290e:	d4 f8       	bld	r13, 4
    2910:	2a e0       	ldi	r18, 0x0A	; 10
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	85 37       	cpi	r24, 0x75	; 117
    2916:	39 f1       	breq	.+78     	; 0x2966 <vfprintf+0x31e>
    2918:	23 2d       	mov	r18, r3
    291a:	29 7f       	andi	r18, 0xF9	; 249
    291c:	d2 2e       	mov	r13, r18
    291e:	8f 36       	cpi	r24, 0x6F	; 111
    2920:	01 f1       	breq	.+64     	; 0x2962 <vfprintf+0x31a>
    2922:	48 f4       	brcc	.+18     	; 0x2936 <vfprintf+0x2ee>
    2924:	88 35       	cpi	r24, 0x58	; 88
    2926:	a9 f0       	breq	.+42     	; 0x2952 <vfprintf+0x30a>
    2928:	f7 01       	movw	r30, r14
    292a:	86 81       	ldd	r24, Z+6	; 0x06
    292c:	97 81       	ldd	r25, Z+7	; 0x07
    292e:	2b 96       	adiw	r28, 0x0b	; 11
    2930:	e2 e1       	ldi	r30, 0x12	; 18
    2932:	0c 94 d4 15 	jmp	0x2ba8	; 0x2ba8 <__epilogue_restores__>
    2936:	80 37       	cpi	r24, 0x70	; 112
    2938:	49 f0       	breq	.+18     	; 0x294c <vfprintf+0x304>
    293a:	88 37       	cpi	r24, 0x78	; 120
    293c:	a9 f7       	brne	.-22     	; 0x2928 <vfprintf+0x2e0>
    293e:	d4 fe       	sbrs	r13, 4
    2940:	02 c0       	rjmp	.+4      	; 0x2946 <vfprintf+0x2fe>
    2942:	68 94       	set
    2944:	d2 f8       	bld	r13, 2
    2946:	20 e1       	ldi	r18, 0x10	; 16
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	0d c0       	rjmp	.+26     	; 0x2966 <vfprintf+0x31e>
    294c:	68 94       	set
    294e:	d4 f8       	bld	r13, 4
    2950:	f6 cf       	rjmp	.-20     	; 0x293e <vfprintf+0x2f6>
    2952:	34 fe       	sbrs	r3, 4
    2954:	03 c0       	rjmp	.+6      	; 0x295c <vfprintf+0x314>
    2956:	82 2f       	mov	r24, r18
    2958:	86 60       	ori	r24, 0x06	; 6
    295a:	d8 2e       	mov	r13, r24
    295c:	20 e1       	ldi	r18, 0x10	; 16
    295e:	32 e0       	ldi	r19, 0x02	; 2
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <vfprintf+0x31e>
    2962:	28 e0       	ldi	r18, 0x08	; 8
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	f8 01       	movw	r30, r16
    2968:	d7 fe       	sbrs	r13, 7
    296a:	0f c0       	rjmp	.+30     	; 0x298a <vfprintf+0x342>
    296c:	60 81       	ld	r22, Z
    296e:	71 81       	ldd	r23, Z+1	; 0x01
    2970:	82 81       	ldd	r24, Z+2	; 0x02
    2972:	93 81       	ldd	r25, Z+3	; 0x03
    2974:	0c 5f       	subi	r16, 0xFC	; 252
    2976:	1f 4f       	sbci	r17, 0xFF	; 255
    2978:	a5 01       	movw	r20, r10
    297a:	0e 94 44 15 	call	0x2a88	; 0x2a88 <__ultoa_invert>
    297e:	c8 2e       	mov	r12, r24
    2980:	ca 18       	sub	r12, r10
    2982:	3d 2c       	mov	r3, r13
    2984:	e8 94       	clt
    2986:	37 f8       	bld	r3, 7
    2988:	67 cf       	rjmp	.-306    	; 0x2858 <vfprintf+0x210>
    298a:	60 81       	ld	r22, Z
    298c:	71 81       	ldd	r23, Z+1	; 0x01
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	0e 5f       	subi	r16, 0xFE	; 254
    2994:	1f 4f       	sbci	r17, 0xFF	; 255
    2996:	f0 cf       	rjmp	.-32     	; 0x2978 <vfprintf+0x330>
    2998:	42 fc       	sbrc	r4, 2
    299a:	02 c0       	rjmp	.+4      	; 0x29a0 <vfprintf+0x358>
    299c:	83 94       	inc	r8
    299e:	78 cf       	rjmp	.-272    	; 0x2890 <vfprintf+0x248>
    29a0:	83 94       	inc	r8
    29a2:	83 94       	inc	r8
    29a4:	75 cf       	rjmp	.-278    	; 0x2890 <vfprintf+0x248>
    29a6:	84 2d       	mov	r24, r4
    29a8:	86 78       	andi	r24, 0x86	; 134
    29aa:	09 f4       	brne	.+2      	; 0x29ae <vfprintf+0x366>
    29ac:	71 cf       	rjmp	.-286    	; 0x2890 <vfprintf+0x248>
    29ae:	f6 cf       	rjmp	.-20     	; 0x299c <vfprintf+0x354>
    29b0:	b7 01       	movw	r22, r14
    29b2:	80 e2       	ldi	r24, 0x20	; 32
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	0e 94 14 15 	call	0x2a28	; 0x2a28 <fputc>
    29ba:	83 94       	inc	r8
    29bc:	82 14       	cp	r8, r2
    29be:	c0 f3       	brcs	.-16     	; 0x29b0 <vfprintf+0x368>
    29c0:	51 2c       	mov	r5, r1
    29c2:	73 cf       	rjmp	.-282    	; 0x28aa <vfprintf+0x262>
    29c4:	52 2c       	mov	r5, r2
    29c6:	58 18       	sub	r5, r8
    29c8:	82 14       	cp	r8, r2
    29ca:	08 f4       	brcc	.+2      	; 0x29ce <vfprintf+0x386>
    29cc:	6e cf       	rjmp	.-292    	; 0x28aa <vfprintf+0x262>
    29ce:	f8 cf       	rjmp	.-16     	; 0x29c0 <vfprintf+0x378>
    29d0:	84 2d       	mov	r24, r4
    29d2:	86 78       	andi	r24, 0x86	; 134
    29d4:	09 f4       	brne	.+2      	; 0x29d8 <vfprintf+0x390>
    29d6:	7b cf       	rjmp	.-266    	; 0x28ce <vfprintf+0x286>
    29d8:	8b e2       	ldi	r24, 0x2B	; 43
    29da:	41 fe       	sbrs	r4, 1
    29dc:	80 e2       	ldi	r24, 0x20	; 32
    29de:	47 fc       	sbrc	r4, 7
    29e0:	8d e2       	ldi	r24, 0x2D	; 45
    29e2:	b7 01       	movw	r22, r14
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	71 cf       	rjmp	.-286    	; 0x28ca <vfprintf+0x282>
    29e8:	b7 01       	movw	r22, r14
    29ea:	80 e3       	ldi	r24, 0x30	; 48
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	0e 94 14 15 	call	0x2a28	; 0x2a28 <fputc>
    29f2:	9a 94       	dec	r9
    29f4:	6c cf       	rjmp	.-296    	; 0x28ce <vfprintf+0x286>
    29f6:	8f ef       	ldi	r24, 0xFF	; 255
    29f8:	9f ef       	ldi	r25, 0xFF	; 255
    29fa:	99 cf       	rjmp	.-206    	; 0x292e <vfprintf+0x2e6>

000029fc <strnlen_P>:
strnlen_P():
    29fc:	fc 01       	movw	r30, r24
    29fe:	05 90       	lpm	r0, Z+
    2a00:	61 50       	subi	r22, 0x01	; 1
    2a02:	70 40       	sbci	r23, 0x00	; 0
    2a04:	01 10       	cpse	r0, r1
    2a06:	d8 f7       	brcc	.-10     	; 0x29fe <strnlen_P+0x2>
    2a08:	80 95       	com	r24
    2a0a:	90 95       	com	r25
    2a0c:	8e 0f       	add	r24, r30
    2a0e:	9f 1f       	adc	r25, r31
    2a10:	08 95       	ret

00002a12 <strnlen>:
strnlen():
    2a12:	fc 01       	movw	r30, r24
    2a14:	61 50       	subi	r22, 0x01	; 1
    2a16:	70 40       	sbci	r23, 0x00	; 0
    2a18:	01 90       	ld	r0, Z+
    2a1a:	01 10       	cpse	r0, r1
    2a1c:	d8 f7       	brcc	.-10     	; 0x2a14 <strnlen+0x2>
    2a1e:	80 95       	com	r24
    2a20:	90 95       	com	r25
    2a22:	8e 0f       	add	r24, r30
    2a24:	9f 1f       	adc	r25, r31
    2a26:	08 95       	ret

00002a28 <fputc>:
fputc():
    2a28:	0f 93       	push	r16
    2a2a:	1f 93       	push	r17
    2a2c:	cf 93       	push	r28
    2a2e:	df 93       	push	r29
    2a30:	18 2f       	mov	r17, r24
    2a32:	09 2f       	mov	r16, r25
    2a34:	eb 01       	movw	r28, r22
    2a36:	8b 81       	ldd	r24, Y+3	; 0x03
    2a38:	81 fd       	sbrc	r24, 1
    2a3a:	09 c0       	rjmp	.+18     	; 0x2a4e <fputc+0x26>
    2a3c:	1f ef       	ldi	r17, 0xFF	; 255
    2a3e:	0f ef       	ldi	r16, 0xFF	; 255
    2a40:	81 2f       	mov	r24, r17
    2a42:	90 2f       	mov	r25, r16
    2a44:	df 91       	pop	r29
    2a46:	cf 91       	pop	r28
    2a48:	1f 91       	pop	r17
    2a4a:	0f 91       	pop	r16
    2a4c:	08 95       	ret
    2a4e:	82 ff       	sbrs	r24, 2
    2a50:	14 c0       	rjmp	.+40     	; 0x2a7a <fputc+0x52>
    2a52:	2e 81       	ldd	r18, Y+6	; 0x06
    2a54:	3f 81       	ldd	r19, Y+7	; 0x07
    2a56:	8c 81       	ldd	r24, Y+4	; 0x04
    2a58:	9d 81       	ldd	r25, Y+5	; 0x05
    2a5a:	28 17       	cp	r18, r24
    2a5c:	39 07       	cpc	r19, r25
    2a5e:	3c f4       	brge	.+14     	; 0x2a6e <fputc+0x46>
    2a60:	e8 81       	ld	r30, Y
    2a62:	f9 81       	ldd	r31, Y+1	; 0x01
    2a64:	cf 01       	movw	r24, r30
    2a66:	01 96       	adiw	r24, 0x01	; 1
    2a68:	99 83       	std	Y+1, r25	; 0x01
    2a6a:	88 83       	st	Y, r24
    2a6c:	10 83       	st	Z, r17
    2a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a70:	9f 81       	ldd	r25, Y+7	; 0x07
    2a72:	01 96       	adiw	r24, 0x01	; 1
    2a74:	9f 83       	std	Y+7, r25	; 0x07
    2a76:	8e 83       	std	Y+6, r24	; 0x06
    2a78:	e3 cf       	rjmp	.-58     	; 0x2a40 <fputc+0x18>
    2a7a:	e8 85       	ldd	r30, Y+8	; 0x08
    2a7c:	f9 85       	ldd	r31, Y+9	; 0x09
    2a7e:	81 2f       	mov	r24, r17
    2a80:	09 95       	icall
    2a82:	89 2b       	or	r24, r25
    2a84:	a1 f3       	breq	.-24     	; 0x2a6e <fputc+0x46>
    2a86:	da cf       	rjmp	.-76     	; 0x2a3c <fputc+0x14>

00002a88 <__ultoa_invert>:
__ultoa_invert():
    2a88:	fa 01       	movw	r30, r20
    2a8a:	aa 27       	eor	r26, r26
    2a8c:	28 30       	cpi	r18, 0x08	; 8
    2a8e:	51 f1       	breq	.+84     	; 0x2ae4 <__ultoa_invert+0x5c>
    2a90:	20 31       	cpi	r18, 0x10	; 16
    2a92:	81 f1       	breq	.+96     	; 0x2af4 <__ultoa_invert+0x6c>
    2a94:	e8 94       	clt
    2a96:	6f 93       	push	r22
    2a98:	6e 7f       	andi	r22, 0xFE	; 254
    2a9a:	6e 5f       	subi	r22, 0xFE	; 254
    2a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a9e:	8f 4f       	sbci	r24, 0xFF	; 255
    2aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa2:	af 4f       	sbci	r26, 0xFF	; 255
    2aa4:	b1 e0       	ldi	r27, 0x01	; 1
    2aa6:	3e d0       	rcall	.+124    	; 0x2b24 <__ultoa_invert+0x9c>
    2aa8:	b4 e0       	ldi	r27, 0x04	; 4
    2aaa:	3c d0       	rcall	.+120    	; 0x2b24 <__ultoa_invert+0x9c>
    2aac:	67 0f       	add	r22, r23
    2aae:	78 1f       	adc	r23, r24
    2ab0:	89 1f       	adc	r24, r25
    2ab2:	9a 1f       	adc	r25, r26
    2ab4:	a1 1d       	adc	r26, r1
    2ab6:	68 0f       	add	r22, r24
    2ab8:	79 1f       	adc	r23, r25
    2aba:	8a 1f       	adc	r24, r26
    2abc:	91 1d       	adc	r25, r1
    2abe:	a1 1d       	adc	r26, r1
    2ac0:	6a 0f       	add	r22, r26
    2ac2:	71 1d       	adc	r23, r1
    2ac4:	81 1d       	adc	r24, r1
    2ac6:	91 1d       	adc	r25, r1
    2ac8:	a1 1d       	adc	r26, r1
    2aca:	20 d0       	rcall	.+64     	; 0x2b0c <__ultoa_invert+0x84>
    2acc:	09 f4       	brne	.+2      	; 0x2ad0 <__ultoa_invert+0x48>
    2ace:	68 94       	set
    2ad0:	3f 91       	pop	r19
    2ad2:	2a e0       	ldi	r18, 0x0A	; 10
    2ad4:	26 9f       	mul	r18, r22
    2ad6:	11 24       	eor	r1, r1
    2ad8:	30 19       	sub	r19, r0
    2ada:	30 5d       	subi	r19, 0xD0	; 208
    2adc:	31 93       	st	Z+, r19
    2ade:	de f6       	brtc	.-74     	; 0x2a96 <__ultoa_invert+0xe>
    2ae0:	cf 01       	movw	r24, r30
    2ae2:	08 95       	ret
    2ae4:	46 2f       	mov	r20, r22
    2ae6:	47 70       	andi	r20, 0x07	; 7
    2ae8:	40 5d       	subi	r20, 0xD0	; 208
    2aea:	41 93       	st	Z+, r20
    2aec:	b3 e0       	ldi	r27, 0x03	; 3
    2aee:	0f d0       	rcall	.+30     	; 0x2b0e <__ultoa_invert+0x86>
    2af0:	c9 f7       	brne	.-14     	; 0x2ae4 <__ultoa_invert+0x5c>
    2af2:	f6 cf       	rjmp	.-20     	; 0x2ae0 <__ultoa_invert+0x58>
    2af4:	46 2f       	mov	r20, r22
    2af6:	4f 70       	andi	r20, 0x0F	; 15
    2af8:	40 5d       	subi	r20, 0xD0	; 208
    2afa:	4a 33       	cpi	r20, 0x3A	; 58
    2afc:	18 f0       	brcs	.+6      	; 0x2b04 <__ultoa_invert+0x7c>
    2afe:	49 5d       	subi	r20, 0xD9	; 217
    2b00:	31 fd       	sbrc	r19, 1
    2b02:	40 52       	subi	r20, 0x20	; 32
    2b04:	41 93       	st	Z+, r20
    2b06:	02 d0       	rcall	.+4      	; 0x2b0c <__ultoa_invert+0x84>
    2b08:	a9 f7       	brne	.-22     	; 0x2af4 <__ultoa_invert+0x6c>
    2b0a:	ea cf       	rjmp	.-44     	; 0x2ae0 <__ultoa_invert+0x58>
    2b0c:	b4 e0       	ldi	r27, 0x04	; 4
    2b0e:	a6 95       	lsr	r26
    2b10:	97 95       	ror	r25
    2b12:	87 95       	ror	r24
    2b14:	77 95       	ror	r23
    2b16:	67 95       	ror	r22
    2b18:	ba 95       	dec	r27
    2b1a:	c9 f7       	brne	.-14     	; 0x2b0e <__ultoa_invert+0x86>
    2b1c:	00 97       	sbiw	r24, 0x00	; 0
    2b1e:	61 05       	cpc	r22, r1
    2b20:	71 05       	cpc	r23, r1
    2b22:	08 95       	ret
    2b24:	9b 01       	movw	r18, r22
    2b26:	ac 01       	movw	r20, r24
    2b28:	0a 2e       	mov	r0, r26
    2b2a:	06 94       	lsr	r0
    2b2c:	57 95       	ror	r21
    2b2e:	47 95       	ror	r20
    2b30:	37 95       	ror	r19
    2b32:	27 95       	ror	r18
    2b34:	ba 95       	dec	r27
    2b36:	c9 f7       	brne	.-14     	; 0x2b2a <__ultoa_invert+0xa2>
    2b38:	62 0f       	add	r22, r18
    2b3a:	73 1f       	adc	r23, r19
    2b3c:	84 1f       	adc	r24, r20
    2b3e:	95 1f       	adc	r25, r21
    2b40:	a0 1d       	adc	r26, r0
    2b42:	08 95       	ret

00002b44 <eeprom_read_byte>:
eeprom_read_byte():
    2b44:	f9 99       	sbic	0x1f, 1	; 31
    2b46:	fe cf       	rjmp	.-4      	; 0x2b44 <eeprom_read_byte>
    2b48:	92 bd       	out	0x22, r25	; 34
    2b4a:	81 bd       	out	0x21, r24	; 33
    2b4c:	f8 9a       	sbi	0x1f, 0	; 31
    2b4e:	99 27       	eor	r25, r25
    2b50:	80 b5       	in	r24, 0x20	; 32
    2b52:	08 95       	ret

00002b54 <eeprom_write_byte>:
eeprom_write_byte():
    2b54:	26 2f       	mov	r18, r22

00002b56 <eeprom_write_r18>:
    2b56:	f9 99       	sbic	0x1f, 1	; 31
    2b58:	fe cf       	rjmp	.-4      	; 0x2b56 <eeprom_write_r18>
    2b5a:	1f ba       	out	0x1f, r1	; 31
    2b5c:	92 bd       	out	0x22, r25	; 34
    2b5e:	81 bd       	out	0x21, r24	; 33
    2b60:	20 bd       	out	0x20, r18	; 32
    2b62:	0f b6       	in	r0, 0x3f	; 63
    2b64:	f8 94       	cli
    2b66:	fa 9a       	sbi	0x1f, 2	; 31
    2b68:	f9 9a       	sbi	0x1f, 1	; 31
    2b6a:	0f be       	out	0x3f, r0	; 63
    2b6c:	01 96       	adiw	r24, 0x01	; 1
    2b6e:	08 95       	ret

00002b70 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    2b70:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    2b72:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    2b74:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    2b76:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    2b78:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    2b7a:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    2b7c:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    2b7e:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    2b80:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    2b82:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    2b84:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    2b86:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    2b88:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    2b8a:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    2b8c:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    2b8e:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    2b90:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    2b92:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    2b94:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    2b96:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    2b98:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    2b9a:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    2b9c:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    2b9e:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    2ba0:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    2ba2:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    2ba4:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    2ba6:	09 94       	ijmp

00002ba8 <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    2ba8:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    2baa:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    2bac:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    2bae:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    2bb0:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    2bb2:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    2bb4:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    2bb6:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    2bb8:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    2bba:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    2bbc:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    2bbe:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    2bc0:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    2bc2:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    2bc4:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    2bc6:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    2bc8:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    2bca:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    2bcc:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    2bce:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    2bd0:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    2bd2:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    2bd4:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    2bd6:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    2bd8:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    2bda:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    2bdc:	08 95       	ret

00002bde <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    2bde:	f8 94       	cli

00002be0 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    2be0:	ff cf       	rjmp	.-2      	; 0x2be0 <__stop_program>
