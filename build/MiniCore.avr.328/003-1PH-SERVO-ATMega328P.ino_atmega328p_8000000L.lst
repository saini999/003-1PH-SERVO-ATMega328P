
C:\Users\Admin\AppData\Local\Temp\arduino-sketch-991CF91F8D5979041AB7FD13FE098E03/003-1PH-SERVO-ATMega328P.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
       8:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
       c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      10:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      14:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      18:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      1c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      20:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      24:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      28:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      2c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      30:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      34:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      38:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      3c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      40:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__vector_16>
      44:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      48:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      4c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      50:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      54:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      58:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      5c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      60:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
      64:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	23 00       	.word	0x0023	; ????
      6e:	26 00       	.word	0x0026	; ????
      70:	29 00       	.word	0x0029	; ????

00000072 <port_to_mode_PGM>:
      72:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000007c <port_to_output_PGM>:
      7c:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03 02 02 03                                .......

0000009d <digital_pin_to_bit_mask_PGM>:
      9d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      ad:	04 08 10 20 40 80 40                                ... @.@

000000b4 <digital_pin_to_timer_PGM>:
      b4:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
      c4:	00 00 00 00 00 00 00                                .......

000000cb <characterArray>:
      cb:	7e 30 6d 79 33 5b 5f 70 7f 7b 77 1f 4e 3d 4f 47     ~0my3[_p.{w.N=OG
	...
      eb:	00 00 22 00 00 00 00 20 4e 78 00 00 04 01 00 00     ..".... Nx......
      fb:	7e 30 6d 79 33 5b 5f 70 7f 7b 00 00 00 00 00 00     ~0my3[_p.{......
     10b:	00 77 1f 4e 3d 4f 47 5e 37 30 38 00 0e 00 15 7e     .w.N=OG^708....~
     11b:	67 73 05 5b 0f 3e 00 00 00 3b 00 4e 00 78 00 08     gs.[.>...;.N.x..
     12b:	02 77 1f 0d 3d 6f 47 5e 17 10 38 00 30 00 15 1d     .w..=oG^..8.0...
     13b:	67 73 05 5b 0f 1c 00 00 00 00 00 00 00 00 00 00     gs.[............
	...

0000014c <__ctors_start>:
__ctors_start():
     14c:	4e 0d       	add	r20, r14

0000014e <__ctors_end>:
__dtors_end():
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf ef       	ldi	r28, 0xFF	; 255
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     15a:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     15c:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     15e:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     160:	ee ee       	ldi	r30, 0xEE	; 238
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     162:	f8 e2       	ldi	r31, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     166:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     168:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     16a:	ae 35       	cpi	r26, 0x5E	; 94
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     16c:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     170:	22 e0       	ldi	r18, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     172:	ae e5       	ldi	r26, 0x5E	; 94
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     174:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     17a:	a0 34       	cpi	r26, 0x40	; 64
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     17c:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>

00000180 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     180:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     182:	c7 ea       	ldi	r28, 0xA7	; 167
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     184:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     186:	04 c0       	rjmp	.+8      	; 0x190 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     188:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     18a:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     18c:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     190:	c6 3a       	cpi	r28, 0xA6	; 166
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     192:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     194:	c9 f7       	brne	.-14     	; 0x188 <__do_global_ctors+0x8>
     196:	0e 94 3b 08 	call	0x1076	; 0x1076 <main>
     19a:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <_exit>

0000019e <__bad_interrupt>:
__vector_22():
     19e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a2 <turnOffPWM>:
turnOffPWM():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     1a2:	84 30       	cpi	r24, 0x04	; 4
     1a4:	81 f0       	breq	.+32     	; 0x1c6 <turnOffPWM+0x24>
     1a6:	28 f4       	brcc	.+10     	; 0x1b2 <turnOffPWM+0x10>
     1a8:	82 30       	cpi	r24, 0x02	; 2
     1aa:	e9 f0       	breq	.+58     	; 0x1e6 <turnOffPWM+0x44>
     1ac:	83 30       	cpi	r24, 0x03	; 3
     1ae:	f9 f0       	breq	.+62     	; 0x1ee <turnOffPWM+0x4c>
     1b0:	08 95       	ret
     1b2:	88 30       	cpi	r24, 0x08	; 8
     1b4:	71 f0       	breq	.+28     	; 0x1d2 <turnOffPWM+0x30>
     1b6:	89 30       	cpi	r24, 0x09	; 9
     1b8:	91 f0       	breq	.+36     	; 0x1de <turnOffPWM+0x3c>
     1ba:	85 30       	cpi	r24, 0x05	; 5
     1bc:	b9 f4       	brne	.+46     	; 0x1ec <turnOffPWM+0x4a>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     1be:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     1c2:	8f 7d       	andi	r24, 0xDF	; 223
     1c4:	03 c0       	rjmp	.+6      	; 0x1cc <turnOffPWM+0x2a>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     1c6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     1ca:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     1cc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     1d0:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     1d2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     1d6:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     1d8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     1dc:	08 95       	ret
     1de:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     1e2:	8f 7d       	andi	r24, 0xDF	; 223
     1e4:	f9 cf       	rjmp	.-14     	; 0x1d8 <turnOffPWM+0x36>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     1e6:	84 b5       	in	r24, 0x24	; 36
     1e8:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     1ea:	84 bd       	out	0x24, r24	; 36
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     1ec:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     1ee:	84 b5       	in	r24, 0x24	; 36
     1f0:	8f 7d       	andi	r24, 0xDF	; 223
     1f2:	fb cf       	rjmp	.-10     	; 0x1ea <turnOffPWM+0x48>

000001f4 <digitalWrite>:
digitalWrite():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     1f4:	1f 93       	push	r17
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     1fa:	28 2f       	mov	r18, r24
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	f9 01       	movw	r30, r18
     200:	ec 54       	subi	r30, 0x4C	; 76
     202:	ff 4f       	sbci	r31, 0xFF	; 255
     204:	84 91       	lpm	r24, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     206:	f9 01       	movw	r30, r18
     208:	e3 56       	subi	r30, 0x63	; 99
     20a:	ff 4f       	sbci	r31, 0xFF	; 255
     20c:	d4 91       	lpm	r29, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     20e:	f9 01       	movw	r30, r18
     210:	ea 57       	subi	r30, 0x7A	; 122
     212:	ff 4f       	sbci	r31, 0xFF	; 255
     214:	c4 91       	lpm	r28, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     216:	cc 23       	and	r28, r28
     218:	a9 f0       	breq	.+42     	; 0x244 <digitalWrite+0x50>
     21a:	16 2f       	mov	r17, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     21c:	81 11       	cpse	r24, r1
     21e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <turnOffPWM>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     222:	ec 2f       	mov	r30, r28
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	ee 0f       	add	r30, r30
     228:	ff 1f       	adc	r31, r31
     22a:	e4 58       	subi	r30, 0x84	; 132
     22c:	ff 4f       	sbci	r31, 0xFF	; 255
     22e:	a5 91       	lpm	r26, Z+
     230:	b4 91       	lpm	r27, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     232:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     234:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     236:	ec 91       	ld	r30, X
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     238:	11 11       	cpse	r17, r1
     23a:	08 c0       	rjmp	.+16     	; 0x24c <digitalWrite+0x58>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     23c:	d0 95       	com	r29
     23e:	de 23       	and	r29, r30
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     240:	dc 93       	st	X, r29
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     242:	8f bf       	out	0x3f, r24	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	1f 91       	pop	r17
     24a:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     24c:	de 2b       	or	r29, r30
     24e:	f8 cf       	rjmp	.-16     	; 0x240 <digitalWrite+0x4c>

00000250 <pinMode>:
pinMode():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	fc 01       	movw	r30, r24
     258:	e3 56       	subi	r30, 0x63	; 99
     25a:	ff 4f       	sbci	r31, 0xFF	; 255
     25c:	24 91       	lpm	r18, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     25e:	8a 57       	subi	r24, 0x7A	; 122
     260:	9f 4f       	sbci	r25, 0xFF	; 255
     262:	fc 01       	movw	r30, r24
     264:	84 91       	lpm	r24, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     266:	88 23       	and	r24, r24
     268:	d1 f0       	breq	.+52     	; 0x29e <pinMode+0x4e>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	88 0f       	add	r24, r24
     26e:	99 1f       	adc	r25, r25
     270:	fc 01       	movw	r30, r24
     272:	ee 58       	subi	r30, 0x8E	; 142
     274:	ff 4f       	sbci	r31, 0xFF	; 255
     276:	a5 91       	lpm	r26, Z+
     278:	b4 91       	lpm	r27, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     27a:	fc 01       	movw	r30, r24
     27c:	e4 58       	subi	r30, 0x84	; 132
     27e:	ff 4f       	sbci	r31, 0xFF	; 255
     280:	c5 91       	lpm	r28, Z+
     282:	d4 91       	lpm	r29, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     284:	61 11       	cpse	r22, r1
     286:	0e c0       	rjmp	.+28     	; 0x2a4 <pinMode+0x54>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     288:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     28a:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     28c:	8c 91       	ld	r24, X
     28e:	e2 2f       	mov	r30, r18
     290:	e0 95       	com	r30
     292:	8e 23       	and	r24, r30
     294:	8c 93       	st	X, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     296:	28 81       	ld	r18, Y
     298:	e2 23       	and	r30, r18
     29a:	e8 83       	st	Y, r30
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     29c:	9f bf       	out	0x3f, r25	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     2a4:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     2a6:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     2a8:	ec 91       	ld	r30, X
     2aa:	e2 2b       	or	r30, r18
     2ac:	ec 93       	st	X, r30
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     2ae:	8f bf       	out	0x3f, r24	; 63
     2b0:	f6 cf       	rjmp	.-20     	; 0x29e <pinMode+0x4e>

000002b2 <analogRead>:
analogRead():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
     2b2:	8e 50       	subi	r24, 0x0E	; 14
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:69
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
     2b4:	80 64       	ori	r24, 0x40	; 64
     2b6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:77
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
     2ba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     2be:	80 64       	ori	r24, 0x40	; 64
     2c0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:80

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
     2c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     2c8:	86 fd       	sbrc	r24, 6
     2ca:	fc cf       	rjmp	.-8      	; 0x2c4 <analogRead+0x12>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
     2cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
     2d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:96
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
}
     2d4:	08 95       	ret

000002d6 <delayMicroseconds>:
delayMicroseconds():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:761
              // 2 cycles to jump back to delay cycle.
  }

#elif F_CPU >= 8000000L
  // for the 8 MHz clock
  __asm__ __volatile__ (
     2d6:	00 00       	nop
     2d8:	00 00       	nop
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:767
    "nop" "\n\t"
    "nop"); //just waiting 2 cycles

  // for a 1 and 2 microsecond delay, simply return.  the overhead
  // of the function call takes 16 (18) cycles, which is 2us
  if (us <= 2) return; // = 3 cycles, (4 when true)
     2da:	83 30       	cpi	r24, 0x03	; 3
     2dc:	91 05       	cpc	r25, r1
     2de:	28 f0       	brcs	.+10     	; 0x2ea <delayMicroseconds+0x14>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:772

  // the following loop takes 1/2 of a microsecond (4 cycles)
  // per iteration, so execute it twice for each microsecond of
  // delay requested.
  us <<= 1; //x2 us, = 2 cycles
     2e0:	88 0f       	add	r24, r24
     2e2:	99 1f       	adc	r25, r25
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:777

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // us is at least 6 so we can substract 5
  us -= 5; // = 2 cycles
     2e4:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <delayMicroseconds+0x10>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     2ea:	08 95       	ret

000002ec <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]>:
DisplayString():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:189
/*******************************************************************************************/
//Given a string such as "-A32", we display -A32
//Each digit is displayed for ~2000us, and cycles through the 4 digits
//After running through the 4 numbers, the display is turned off
//Will turn the display on for a given amount of time - this helps control brightness
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
     2ec:	6f 92       	push	r6
     2ee:	7f 92       	push	r7
     2f0:	9f 92       	push	r9
     2f2:	bf 92       	push	r11
     2f4:	cf 92       	push	r12
     2f6:	df 92       	push	r13
     2f8:	ef 92       	push	r14
     2fa:	ff 92       	push	r15
     2fc:	1f 93       	push	r17
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	7c 01       	movw	r14, r24
     304:	96 2e       	mov	r9, r22
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:192
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
     306:	11 e0       	ldi	r17, 0x01	; 1
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:238
			if (chr & (1<<2)) digitalWrite(segmentE, SegOn);
			if (chr & (1<<1)) digitalWrite(segmentF, SegOn);
			if (chr & (1<<0)) digitalWrite(segmentG, SegOn);
		}
		//Service the decimal point, apostrophe and colon
		if ((DecAposColon & (1<<(digit-1))) && (digit < 5)) //Test DecAposColon to see if we need to turn on a decimal point
     308:	c6 2e       	mov	r12, r22
     30a:	d1 2c       	mov	r13, r1
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:273
			  digitalWrite(digit4, DigitOff);
			  break;
			//This only currently works for 4 digits
		}
		// The display is on for microSeconds(brightnessLevel + 1), now turn off for the remainder of the framePeriod
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     30c:	81 ed       	ldi	r24, 0xD1	; 209
     30e:	68 2e       	mov	r6, r24
     310:	87 e0       	ldi	r24, 0x07	; 7
     312:	78 2e       	mov	r7, r24
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:192
//After running through the 4 numbers, the display is turned off
//Will turn the display on for a given amount of time - this helps control brightness
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
     314:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <display1+0x15>
     318:	81 17       	cp	r24, r17
     31a:	08 f4       	brcc	.+2      	; 0x31e <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]+0x32>
     31c:	0d c1       	rjmp	.+538    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:194
	{
		switch(digit)
     31e:	c1 2f       	mov	r28, r17
     320:	d0 e0       	ldi	r29, 0x00	; 0
     322:	12 30       	cpi	r17, 0x02	; 2
     324:	09 f4       	brne	.+2      	; 0x328 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]+0x3c>
     326:	55 c0       	rjmp	.+170    	; 0x3d2 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]+0xe6>
     328:	08 f0       	brcs	.+2      	; 0x32c <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]+0x40>
     32a:	47 c0       	rjmp	.+142    	; 0x3ba <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]+0xce>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:197
		{
			case 1:
				digitalWrite(digit1, DigitOn);
     32c:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <display1+0x1>
     330:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <display1+0x5>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:194
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
	{
		switch(digit)
     334:	11 30       	cpi	r17, 0x01	; 1
     336:	09 f4       	brne	.+2      	; 0x33a <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]+0x4e>
     338:	49 c0       	rjmp	.+146    	; 0x3cc <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]+0xe0>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:215

		//Here we access the array of segments
		//This could be cleaned up a bit but it works
		//displayCharacter(toDisplay[digit-1]); //Now display this digit
		// displayArray (defined in SevSeg.h) decides which segments are turned on for each number or symbol
		unsigned char characterToDisplay = toDisplay[digit-1];
     33a:	f7 01       	movw	r30, r14
     33c:	ec 0f       	add	r30, r28
     33e:	fd 1f       	adc	r31, r29
     340:	31 97       	sbiw	r30, 0x01	; 1
     342:	b0 80       	ld	r11, Z
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:216
		if (characterToDisplay & 0x80)	// bit 7 enables bit-per-segment control
     344:	b7 fe       	sbrs	r11, 7
     346:	4f c0       	rjmp	.+158    	; 0x3e6 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]+0xfa>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:218
		{	// Each bit of characterToDisplay turns on a single segment (from A-to-G)
			if (characterToDisplay & 0x01) digitalWrite(segmentA, SegOn);
     348:	b0 fe       	sbrs	r11, 0
     34a:	06 c0       	rjmp	.+12     	; 0x358 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]+0x6c>
     34c:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <display1+0x3>
     350:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <display1+0xd>
     354:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:219
			if (characterToDisplay & 0x02) digitalWrite(segmentB, SegOn);
     358:	b1 fe       	sbrs	r11, 1
     35a:	06 c0       	rjmp	.+12     	; 0x368 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]+0x7c>
     35c:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <display1+0x3>
     360:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <display1+0xe>
     364:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:220
			if (characterToDisplay & 0x04) digitalWrite(segmentC, SegOn);
     368:	b2 fe       	sbrs	r11, 2
     36a:	06 c0       	rjmp	.+12     	; 0x378 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]+0x8c>
     36c:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <display1+0x3>
     370:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <display1+0xf>
     374:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:221
			if (characterToDisplay & 0x08) digitalWrite(segmentD, SegOn);
     378:	b3 fe       	sbrs	r11, 3
     37a:	06 c0       	rjmp	.+12     	; 0x388 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]+0x9c>
     37c:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <display1+0x3>
     380:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <display1+0x10>
     384:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:222
			if (characterToDisplay & 0x10) digitalWrite(segmentE, SegOn);
     388:	b4 fe       	sbrs	r11, 4
     38a:	06 c0       	rjmp	.+12     	; 0x398 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]+0xac>
     38c:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <display1+0x3>
     390:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <display1+0x11>
     394:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:223
			if (characterToDisplay & 0x20) digitalWrite(segmentF, SegOn);
     398:	b5 fe       	sbrs	r11, 5
     39a:	06 c0       	rjmp	.+12     	; 0x3a8 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]+0xbc>
     39c:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <display1+0x3>
     3a0:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <display1+0x12>
     3a4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:224
			if (characterToDisplay & 0x40) digitalWrite(segmentG, SegOn);
     3a8:	b6 fe       	sbrs	r11, 6
     3aa:	54 c0       	rjmp	.+168    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:235
			if (chr & (1<<5)) digitalWrite(segmentB, SegOn);
			if (chr & (1<<4)) digitalWrite(segmentC, SegOn);
			if (chr & (1<<3)) digitalWrite(segmentD, SegOn);
			if (chr & (1<<2)) digitalWrite(segmentE, SegOn);
			if (chr & (1<<1)) digitalWrite(segmentF, SegOn);
			if (chr & (1<<0)) digitalWrite(segmentG, SegOn);
     3ac:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <display1+0x3>
     3b0:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <display1+0x13>
     3b4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
     3b8:	4d c0       	rjmp	.+154    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:194
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
	{
		switch(digit)
     3ba:	13 30       	cpi	r17, 0x03	; 3
     3bc:	79 f0       	breq	.+30     	; 0x3dc <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]+0xf0>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:206
				break;
			case 3:
				digitalWrite(digit3, DigitOn);
				break;
			case 4:
				digitalWrite(digit4, DigitOn);
     3be:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <display1+0x1>
     3c2:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <display1+0x8>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:194
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
	{
		switch(digit)
     3c6:	14 30       	cpi	r17, 0x04	; 4
     3c8:	09 f0       	breq	.+2      	; 0x3cc <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]+0xe0>
     3ca:	b7 cf       	rjmp	.-146    	; 0x33a <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]+0x4e>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:206
				break;
			case 3:
				digitalWrite(digit3, DigitOn);
				break;
			case 4:
				digitalWrite(digit4, DigitOn);
     3cc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
     3d0:	b4 cf       	rjmp	.-152    	; 0x33a <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]+0x4e>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:200
		{
			case 1:
				digitalWrite(digit1, DigitOn);
				break;
			case 2:
				digitalWrite(digit2, DigitOn);
     3d2:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <display1+0x1>
     3d6:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <display1+0x6>
     3da:	f8 cf       	rjmp	.-16     	; 0x3cc <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]+0xe0>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:203
				break;
			case 3:
				digitalWrite(digit3, DigitOn);
     3dc:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <display1+0x1>
     3e0:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <display1+0x7>
     3e4:	f3 cf       	rjmp	.-26     	; 0x3cc <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]+0xe0>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:228
			if (characterToDisplay & 0x20) digitalWrite(segmentF, SegOn);
			if (characterToDisplay & 0x40) digitalWrite(segmentG, SegOn);
		}
		else
		{
			const uint8_t chr = pgm_read_byte(&characterArray[characterToDisplay]);
     3e6:	eb 2d       	mov	r30, r11
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	e5 53       	subi	r30, 0x35	; 53
     3ec:	ff 4f       	sbci	r31, 0xFF	; 255
     3ee:	b4 90       	lpm	r11, Z
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:229
			if (chr & (1<<6)) digitalWrite(segmentA, SegOn);
     3f0:	b6 fe       	sbrs	r11, 6
     3f2:	06 c0       	rjmp	.+12     	; 0x400 <__LOCK_REGION_LENGTH__>
     3f4:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <display1+0x3>
     3f8:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <display1+0xd>
     3fc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:230
			if (chr & (1<<5)) digitalWrite(segmentB, SegOn);
     400:	b5 fe       	sbrs	r11, 5
     402:	06 c0       	rjmp	.+12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     404:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <display1+0x3>
     408:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <display1+0xe>
     40c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:231
			if (chr & (1<<4)) digitalWrite(segmentC, SegOn);
     410:	b4 fe       	sbrs	r11, 4
     412:	06 c0       	rjmp	.+12     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     414:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <display1+0x3>
     418:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <display1+0xf>
     41c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:232
			if (chr & (1<<3)) digitalWrite(segmentD, SegOn);
     420:	b3 fe       	sbrs	r11, 3
     422:	06 c0       	rjmp	.+12     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     424:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <display1+0x3>
     428:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <display1+0x10>
     42c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:233
			if (chr & (1<<2)) digitalWrite(segmentE, SegOn);
     430:	b2 fe       	sbrs	r11, 2
     432:	06 c0       	rjmp	.+12     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     434:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <display1+0x3>
     438:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <display1+0x11>
     43c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:234
			if (chr & (1<<1)) digitalWrite(segmentF, SegOn);
     440:	b1 fe       	sbrs	r11, 1
     442:	06 c0       	rjmp	.+12     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     444:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <display1+0x3>
     448:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <display1+0x12>
     44c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:235
			if (chr & (1<<0)) digitalWrite(segmentG, SegOn);
     450:	b0 fc       	sbrc	r11, 0
     452:	ac cf       	rjmp	.-168    	; 0x3ac <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]+0xc0>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:238
		}
		//Service the decimal point, apostrophe and colon
		if ((DecAposColon & (1<<(digit-1))) && (digit < 5)) //Test DecAposColon to see if we need to turn on a decimal point
     454:	21 97       	sbiw	r28, 0x01	; 1
     456:	c6 01       	movw	r24, r12
     458:	02 c0       	rjmp	.+4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45a:	95 95       	asr	r25
     45c:	87 95       	ror	r24
     45e:	ca 95       	dec	r28
     460:	e2 f7       	brpl	.-8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     462:	80 ff       	sbrs	r24, 0
     464:	08 c0       	rjmp	.+16     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     466:	15 30       	cpi	r17, 0x05	; 5
     468:	30 f4       	brcc	.+12     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:239
			digitalWrite(segmentDP, SegOn);
     46a:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <display1+0x3>
     46e:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <display1+0x14>
     472:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:241

		delayMicroseconds(brightnessDelay + 1); //Display this digit for a fraction of a second (between 1us and 5000us, 500-2000 is pretty good)
     476:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <display1+0x16>
     47a:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <display1+0x17>
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <delayMicroseconds>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:246
		//The + 1 is a bit of a hack but it removes the possible zero display (0 causes display to become bright and flickery)
		//If you set this too long, the display will start to flicker. Set it to 25000 for some fun.

		//Turn off all segments
		digitalWrite(segmentA, SegOff);
     484:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <display1+0x4>
     488:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <display1+0xd>
     48c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:247
		digitalWrite(segmentB, SegOff);
     490:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <display1+0x4>
     494:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <display1+0xe>
     498:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:248
		digitalWrite(segmentC, SegOff);
     49c:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <display1+0x4>
     4a0:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <display1+0xf>
     4a4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:249
		digitalWrite(segmentD, SegOff);
     4a8:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <display1+0x4>
     4ac:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <display1+0x10>
     4b0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:250
		digitalWrite(segmentE, SegOff);
     4b4:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <display1+0x4>
     4b8:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <display1+0x11>
     4bc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:251
		digitalWrite(segmentF, SegOff);
     4c0:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <display1+0x4>
     4c4:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <display1+0x12>
     4c8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:252
		digitalWrite(segmentG, SegOff);
     4cc:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <display1+0x4>
     4d0:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <display1+0x13>
     4d4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:253
		digitalWrite(segmentDP, SegOff);
     4d8:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <display1+0x4>
     4dc:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <display1+0x14>
     4e0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:256

		//Turn off this digit
		switch(digit)
     4e4:	12 30       	cpi	r17, 0x02	; 2
     4e6:	f1 f0       	breq	.+60     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     4e8:	90 f4       	brcc	.+36     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:259
		{
			case 1:
			  digitalWrite(digit1, DigitOff);
     4ea:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <display1+0x2>
     4ee:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <display1+0x5>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:256
		digitalWrite(segmentF, SegOff);
		digitalWrite(segmentG, SegOff);
		digitalWrite(segmentDP, SegOff);

		//Turn off this digit
		switch(digit)
     4f2:	11 30       	cpi	r17, 0x01	; 1
     4f4:	a1 f0       	breq	.+40     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:273
			  digitalWrite(digit4, DigitOff);
			  break;
			//This only currently works for 4 digits
		}
		// The display is on for microSeconds(brightnessLevel + 1), now turn off for the remainder of the framePeriod
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     4f6:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <display1+0x16>
     4fa:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <display1+0x17>
     4fe:	93 01       	movw	r18, r6
     500:	28 1b       	sub	r18, r24
     502:	39 0b       	sbc	r19, r25
     504:	c9 01       	movw	r24, r18
     506:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <delayMicroseconds>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:192
//After running through the 4 numbers, the display is turned off
//Will turn the display on for a given amount of time - this helps control brightness
void SevSeg::DisplayString(const char* toDisplay, byte DecAposColon)
{
	//For the purpose of this code, digit = 1 is the left most digit, digit = 4 is the right most digit
	for(byte digit = 1 ; digit < (numberOfDigits+1) ; digit++)
     50a:	1f 5f       	subi	r17, 0xFF	; 255
     50c:	03 cf       	rjmp	.-506    	; 0x314 <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]+0x28>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:256
		digitalWrite(segmentF, SegOff);
		digitalWrite(segmentG, SegOff);
		digitalWrite(segmentDP, SegOff);

		//Turn off this digit
		switch(digit)
     50e:	13 30       	cpi	r17, 0x03	; 3
     510:	71 f0       	breq	.+28     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:268
			  break;
			case 3:
			  digitalWrite(digit3, DigitOff);
			  break;
			case 4:
			  digitalWrite(digit4, DigitOff);
     512:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <display1+0x2>
     516:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <display1+0x8>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:256
		digitalWrite(segmentF, SegOff);
		digitalWrite(segmentG, SegOff);
		digitalWrite(segmentDP, SegOff);

		//Turn off this digit
		switch(digit)
     51a:	14 30       	cpi	r17, 0x04	; 4
     51c:	61 f7       	brne	.-40     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:268
			  break;
			case 3:
			  digitalWrite(digit3, DigitOff);
			  break;
			case 4:
			  digitalWrite(digit4, DigitOff);
     51e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
     522:	e9 cf       	rjmp	.-46     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:262
		{
			case 1:
			  digitalWrite(digit1, DigitOff);
			  break;
			case 2:
			  digitalWrite(digit2, DigitOff);
     524:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <display1+0x2>
     528:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <display1+0x6>
     52c:	f8 cf       	rjmp	.-16     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:265
			  break;
			case 3:
			  digitalWrite(digit3, DigitOff);
     52e:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <display1+0x2>
     532:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <display1+0x7>
     536:	f3 cf       	rjmp	.-26     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:279
	}

	//After we've gone through the digits, we control the colon and apostrophe (if the display supports it)

	//Turn on the colon and/or apostrophe
	if ((digitColon != 255) || (digitApostrophe != 255))
     538:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <display1+0xa>
     53c:	8f 3f       	cpi	r24, 0xFF	; 255
     53e:	29 f4       	brne	.+10     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
     540:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <display1+0x9>
     544:	9f 3f       	cpi	r25, 0xFF	; 255
     546:	09 f4       	brne	.+2      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
     548:	4e c0       	rjmp	.+156    	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:281
	{
		if (DecAposColon & (1<<4)) //Test to see if we need to turn on the Colon
     54a:	94 fe       	sbrs	r9, 4
     54c:	0a c0       	rjmp	.+20     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:283
		{
			digitalWrite(digitColon, DigitOn);
     54e:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <display1+0x1>
     552:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:284
			digitalWrite(segmentColon, SegOn);
     556:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <display1+0x3>
     55a:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <display1+0xc>
     55e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:286
		}
		if (DecAposColon & (1<<5)) //Test DecAposColon to see if we need to turn on Apostrophe
     562:	95 fe       	sbrs	r9, 5
     564:	0c c0       	rjmp	.+24     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:288
		{
			digitalWrite(digitApostrophe, DigitOn);
     566:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <display1+0x1>
     56a:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <display1+0x9>
     56e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:289
			digitalWrite(segmentApostrophe, SegOn);
     572:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <display1+0x3>
     576:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <display1+0xb>
     57a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:291
		}
		delayMicroseconds(brightnessDelay + 1); //Display this digit for a fraction of a second (between 1us and 5000us, 500-2000 is pretty good)
     57e:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <display1+0x16>
     582:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <display1+0x17>
     586:	01 96       	adiw	r24, 0x01	; 1
     588:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <delayMicroseconds>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:294

		//Turn off the colon and/or apostrophe
		digitalWrite(digitColon, DigitOff);
     58c:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <display1+0x2>
     590:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <display1+0xa>
     594:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:295
		digitalWrite(segmentColon, SegOff);
     598:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <display1+0x4>
     59c:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <display1+0xc>
     5a0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:296
		digitalWrite(digitApostrophe, DigitOff);
     5a4:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <display1+0x2>
     5a8:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <display1+0x9>
     5ac:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:297
		digitalWrite(segmentApostrophe, SegOff);
     5b0:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <display1+0x4>
     5b4:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <display1+0xb>
     5b8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:298
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     5bc:	20 91 ff 01 	lds	r18, 0x01FF	; 0x8001ff <display1+0x16>
     5c0:	30 91 00 02 	lds	r19, 0x0200	; 0x800200 <display1+0x17>
     5c4:	81 ed       	ldi	r24, 0xD1	; 209
     5c6:	97 e0       	ldi	r25, 0x07	; 7
     5c8:	82 1b       	sub	r24, r18
     5ca:	93 0b       	sbc	r25, r19
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:301
	}

}
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	1f 91       	pop	r17
     5d2:	ff 90       	pop	r15
     5d4:	ef 90       	pop	r14
     5d6:	df 90       	pop	r13
     5d8:	cf 90       	pop	r12
     5da:	bf 90       	pop	r11
     5dc:	9f 90       	pop	r9
     5de:	7f 90       	pop	r7
     5e0:	6f 90       	pop	r6
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:298
		//Turn off the colon and/or apostrophe
		digitalWrite(digitColon, DigitOff);
		digitalWrite(segmentColon, SegOff);
		digitalWrite(digitApostrophe, DigitOff);
		digitalWrite(segmentApostrophe, SegOff);
		delayMicroseconds(FRAMEPERIOD - brightnessDelay + 1); //the +1 is a hack so that we can never have a delayMicroseconds(0), causes display to flicker
     5e2:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <delayMicroseconds>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:301
	}

}
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	ff 90       	pop	r15
     5ee:	ef 90       	pop	r14
     5f0:	df 90       	pop	r13
     5f2:	cf 90       	pop	r12
     5f4:	bf 90       	pop	r11
     5f6:	9f 90       	pop	r9
     5f8:	7f 90       	pop	r7
     5fa:	6f 90       	pop	r6
     5fc:	08 95       	ret

000005fe <micros>:
micros():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     5fe:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     600:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     602:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <timer0_overflow_count>
     606:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <timer0_overflow_count+0x1>
     60a:	a0 91 e7 01 	lds	r26, 0x01E7	; 0x8001e7 <timer0_overflow_count+0x2>
     60e:	b0 91 e8 01 	lds	r27, 0x01E8	; 0x8001e8 <timer0_overflow_count+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     612:	26 b5       	in	r18, 0x26	; 38
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     614:	a8 9b       	sbis	0x15, 0	; 21
     616:	05 c0       	rjmp	.+10     	; 0x622 <micros+0x24>
     618:	2f 3f       	cpi	r18, 0xFF	; 255
     61a:	19 f0       	breq	.+6      	; 0x622 <micros+0x24>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	a1 1d       	adc	r26, r1
     620:	b1 1d       	adc	r27, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     622:	3f bf       	out	0x3f, r19	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     624:	ba 2f       	mov	r27, r26
     626:	a9 2f       	mov	r26, r25
     628:	98 2f       	mov	r25, r24
     62a:	88 27       	eor	r24, r24
     62c:	bc 01       	movw	r22, r24
     62e:	cd 01       	movw	r24, r26
     630:	62 0f       	add	r22, r18
     632:	71 1d       	adc	r23, r1
     634:	81 1d       	adc	r24, r1
     636:	91 1d       	adc	r25, r1
     638:	43 e0       	ldi	r20, 0x03	; 3
     63a:	66 0f       	add	r22, r22
     63c:	77 1f       	adc	r23, r23
     63e:	88 1f       	adc	r24, r24
     640:	99 1f       	adc	r25, r25
     642:	4a 95       	dec	r20
     644:	d1 f7       	brne	.-12     	; 0x63a <micros+0x3c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     646:	08 95       	ret

00000648 <BlockNot::reset(unsigned long) [clone .constprop.16]>:
reset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:444
    return result;
}

void BlockNot::switchTo(Unit units) { baseUnits = units; }

void BlockNot::reset(const unsigned long newStartTime) {
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	ec 01       	movw	r28, r24
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:447
   unsigned long finalStartTime = newStartTime;
    if(newStartTime == 0) {
        switch(baseUnits) {
     652:	8b 89       	ldd	r24, Y+19	; 0x13
     654:	9c 89       	ldd	r25, Y+20	; 0x14
     656:	81 30       	cpi	r24, 0x01	; 1
     658:	91 05       	cpc	r25, r1
     65a:	d9 f0       	breq	.+54     	; 0x692 <BlockNot::reset(unsigned long) [clone .constprop.16]+0x4a>
     65c:	30 f0       	brcs	.+12     	; 0x66a <BlockNot::reset(unsigned long) [clone .constprop.16]+0x22>
     65e:	02 97       	sbiw	r24, 0x02	; 2
     660:	c1 f0       	breq	.+48     	; 0x692 <BlockNot::reset(unsigned long) [clone .constprop.16]+0x4a>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:445
}

void BlockNot::switchTo(Unit units) { baseUnits = units; }

void BlockNot::reset(const unsigned long newStartTime) {
   unsigned long finalStartTime = newStartTime;
     662:	00 e0       	ldi	r16, 0x00	; 0
     664:	10 e0       	ldi	r17, 0x00	; 0
     666:	98 01       	movw	r18, r16
     668:	0a c0       	rjmp	.+20     	; 0x67e <BlockNot::reset(unsigned long) [clone .constprop.16]+0x36>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:449
    if(newStartTime == 0) {
        switch(baseUnits) {
            case MICROSECONDS:
                finalStartTime = micros() + microsOffset;
     66a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <micros>
     66e:	08 85       	ldd	r16, Y+8	; 0x08
     670:	19 85       	ldd	r17, Y+9	; 0x09
     672:	2a 85       	ldd	r18, Y+10	; 0x0a
     674:	3b 85       	ldd	r19, Y+11	; 0x0b
     676:	06 0f       	add	r16, r22
     678:	17 1f       	adc	r17, r23
     67a:	28 1f       	adc	r18, r24
     67c:	39 1f       	adc	r19, r25
resetTimer():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:509
            break;
    }
}

void BlockNot::resetTimer(const unsigned long newStartTime) {
    startTime = newStartTime;
     67e:	08 83       	st	Y, r16
     680:	19 83       	std	Y+1, r17	; 0x01
     682:	2a 83       	std	Y+2, r18	; 0x02
     684:	3b 83       	std	Y+3, r19	; 0x03
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:510
    onceTriggered = false;
     686:	1a 8a       	std	Y+18, r1	; 0x12
reset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:460
                finalStartTime = millis() + millisOffset;
                break;
        }
    }
    resetTimer(finalStartTime);
}
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	1f 91       	pop	r17
     68e:	0f 91       	pop	r16
     690:	08 95       	ret
millis():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     692:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     694:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     696:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <timer0_millis>
     69a:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <timer0_millis+0x1>
     69e:	a0 91 3a 02 	lds	r26, 0x023A	; 0x80023a <timer0_millis+0x2>
     6a2:	b0 91 3b 02 	lds	r27, 0x023B	; 0x80023b <timer0_millis+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     6a6:	2f bf       	out	0x3f, r18	; 63
reset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:455
                break;
            case MILLISECONDS:
                finalStartTime = millis() + millisOffset;
                break;
            case SECONDS:
                finalStartTime = millis() + millisOffset;
     6a8:	0c 81       	ldd	r16, Y+4	; 0x04
     6aa:	1d 81       	ldd	r17, Y+5	; 0x05
     6ac:	2e 81       	ldd	r18, Y+6	; 0x06
     6ae:	3f 81       	ldd	r19, Y+7	; 0x07
     6b0:	08 0f       	add	r16, r24
     6b2:	19 1f       	adc	r17, r25
     6b4:	2a 1f       	adc	r18, r26
     6b6:	3b 1f       	adc	r19, r27
     6b8:	e2 cf       	rjmp	.-60     	; 0x67e <BlockNot::reset(unsigned long) [clone .constprop.16]+0x36>

000006ba <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.15]>:
__base_ctor ():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:50
    initDuration(time);
    reset();
    if (global == GLOBAL_RESET) addToTimerList();
}

BlockNot::BlockNot(unsigned long time, Unit units) {
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	ec 01       	movw	r28, r24
     6c4:	1c 82       	std	Y+4, r1	; 0x04
     6c6:	1d 82       	std	Y+5, r1	; 0x05
     6c8:	1e 82       	std	Y+6, r1	; 0x06
     6ca:	1f 82       	std	Y+7, r1	; 0x07
     6cc:	18 86       	std	Y+8, r1	; 0x08
     6ce:	19 86       	std	Y+9, r1	; 0x09
     6d0:	1a 86       	std	Y+10, r1	; 0x0a
     6d2:	1b 86       	std	Y+11, r1	; 0x0b
     6d4:	1c 86       	std	Y+12, r1	; 0x0c
     6d6:	1d 86       	std	Y+13, r1	; 0x0d
     6d8:	1e 86       	std	Y+14, r1	; 0x0e
     6da:	1f 86       	std	Y+15, r1	; 0x0f
     6dc:	19 8a       	std	Y+17, r1	; 0x11
     6de:	18 8a       	std	Y+16, r1	; 0x10
     6e0:	1a 8a       	std	Y+18, r1	; 0x12
     6e2:	1e 8e       	std	Y+30, r1	; 0x1e
     6e4:	1d 8e       	std	Y+29, r1	; 0x1d
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:51
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
     6e6:	00 91 36 02 	lds	r16, 0x0236	; 0x800236 <BlockNot::global>
     6ea:	10 91 37 02 	lds	r17, 0x0237	; 0x800237 <BlockNot::global+0x1>
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	01 30       	cpi	r16, 0x01	; 1
     6f4:	11 05       	cpc	r17, r1
     6f6:	11 f0       	breq	.+4      	; 0x6fc <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.15]+0x42>
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <BlockNot::global+0x1>
     700:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <BlockNot::global>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:52
    baseUnits = units;
     704:	82 e0       	ldi	r24, 0x02	; 2
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	9c 8b       	std	Y+20, r25	; 0x14
     70a:	8b 8b       	std	Y+19, r24	; 0x13
initDuration():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:489
            break;
        case MILLISECONDS:
            duration.millis = time;
            break;
        case SECONDS:
            duration.seconds = time;
     70c:	cb 01       	movw	r24, r22
     70e:	ba 01       	movw	r22, r20
     710:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__floatunsisf>
     714:	6d 8b       	std	Y+21, r22	; 0x15
     716:	7e 8b       	std	Y+22, r23	; 0x16
     718:	8f 8b       	std	Y+23, r24	; 0x17
     71a:	98 8f       	std	Y+24, r25	; 0x18
__base_ctor ():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:54

BlockNot::BlockNot(unsigned long time, Unit units) {
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    baseUnits = units;
    initDuration(time);
    reset();
     71c:	ce 01       	movw	r24, r28
     71e:	0e 94 24 03 	call	0x648	; 0x648 <BlockNot::reset(unsigned long) [clone .constprop.16]>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:55
    if (global == GLOBAL_RESET) addToTimerList();
     722:	01 30       	cpi	r16, 0x01	; 1
     724:	11 05       	cpc	r17, r1
     726:	81 f0       	breq	.+32     	; 0x748 <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.15]+0x8e>
addToTimerList():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:640
void resetAllTimers(BlockNot *timer) {
        resetAllTimers(timer->BlockNot::getStartTime());
}

void BlockNot::addToTimerList() {
        if (firstTimer == nullptr) {
     728:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <BlockNot::firstTimer>
     72c:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <BlockNot::firstTimer+0x1>
     730:	89 2b       	or	r24, r25
     732:	79 f4       	brne	.+30     	; 0x752 <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.15]+0x98>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:641
            firstTimer = currentTimer = this;
     734:	d0 93 33 02 	sts	0x0233, r29	; 0x800233 <BlockNot::currentTimer+0x1>
     738:	c0 93 32 02 	sts	0x0232, r28	; 0x800232 <BlockNot::currentTimer>
     73c:	d0 93 35 02 	sts	0x0235, r29	; 0x800235 <BlockNot::firstTimer+0x1>
     740:	c0 93 34 02 	sts	0x0234, r28	; 0x800234 <BlockNot::firstTimer>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:646
        } else {
            currentTimer->nextTimer = this;
            currentTimer = this;
        }
        this->nextTimer = nullptr;
     744:	18 a2       	std	Y+32, r1	; 0x20
     746:	1f 8e       	std	Y+31, r1	; 0x1f
__base_ctor ():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:56
    global = (global == NO_GLOBAL_RESET) ? NO_GLOBAL_RESET : GLOBAL_RESET;
    baseUnits = units;
    initDuration(time);
    reset();
    if (global == GLOBAL_RESET) addToTimerList();
}
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	08 95       	ret
addToTimerList():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:643

void BlockNot::addToTimerList() {
        if (firstTimer == nullptr) {
            firstTimer = currentTimer = this;
        } else {
            currentTimer->nextTimer = this;
     752:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <BlockNot::currentTimer>
     756:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <BlockNot::currentTimer+0x1>
     75a:	d0 a3       	std	Z+32, r29	; 0x20
     75c:	c7 8f       	std	Z+31, r28	; 0x1f
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:644
            currentTimer = this;
     75e:	d0 93 33 02 	sts	0x0233, r29	; 0x800233 <BlockNot::currentTimer+0x1>
     762:	c0 93 32 02 	sts	0x0232, r28	; 0x800232 <BlockNot::currentTimer>
     766:	ee cf       	rjmp	.-36     	; 0x744 <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.15]+0x8a>

00000768 <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>:
_ZN8BlockNot11setDurationEm4Unitb.part.3():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:189
    if (resetOption) reset();
}

void BlockNot::setDuration(const unsigned long time, Unit inUnits, bool resetOption) {
    initDuration(time, inUnits);
    if (resetOption) reset();
     768:	0c 94 24 03 	jmp	0x648	; 0x648 <BlockNot::reset(unsigned long) [clone .constprop.16]>

0000076c <BlockNot::timeSinceReset()>:
timeSinceReset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:513
void BlockNot::resetTimer(const unsigned long newStartTime) {
    startTime = newStartTime;
    onceTriggered = false;
}

unsigned long BlockNot::timeSinceReset() {
     76c:	cf 92       	push	r12
     76e:	df 92       	push	r13
     770:	ef 92       	push	r14
     772:	ff 92       	push	r15
     774:	0f 93       	push	r16
     776:	1f 93       	push	r17
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	ec 01       	movw	r28, r24
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:515
    unsigned long result = 0L;
    unsigned long millisBase = millisOffset + millis();
     77e:	6c 81       	ldd	r22, Y+4	; 0x04
     780:	7d 81       	ldd	r23, Y+5	; 0x05
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	9f 81       	ldd	r25, Y+7	; 0x07
millis():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     786:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     788:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     78a:	c0 90 38 02 	lds	r12, 0x0238	; 0x800238 <timer0_millis>
     78e:	d0 90 39 02 	lds	r13, 0x0239	; 0x800239 <timer0_millis+0x1>
     792:	e0 90 3a 02 	lds	r14, 0x023A	; 0x80023a <timer0_millis+0x2>
     796:	f0 90 3b 02 	lds	r15, 0x023B	; 0x80023b <timer0_millis+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     79a:	2f bf       	out	0x3f, r18	; 63
timeSinceReset():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:516
    switch (baseUnits) {
     79c:	2b 89       	ldd	r18, Y+19	; 0x13
     79e:	3c 89       	ldd	r19, Y+20	; 0x14
     7a0:	21 15       	cp	r18, r1
     7a2:	31 05       	cpc	r19, r1
     7a4:	39 f0       	breq	.+14     	; 0x7b4 <BlockNot::timeSinceReset()+0x48>
     7a6:	23 30       	cpi	r18, 0x03	; 3
     7a8:	31 05       	cpc	r19, r1
     7aa:	f8 f0       	brcs	.+62     	; 0x7ea <BlockNot::timeSinceReset()+0x7e>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:514
    startTime = newStartTime;
    onceTriggered = false;
}

unsigned long BlockNot::timeSinceReset() {
    unsigned long result = 0L;
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	cb 01       	movw	r24, r22
     7b2:	12 c0       	rjmp	.+36     	; 0x7d8 <BlockNot::timeSinceReset()+0x6c>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:518
    unsigned long millisBase = millisOffset + millis();
    switch (baseUnits) {
        case MICROSECONDS:
            result = microsOffset + micros() - startTime;
     7b4:	c8 84       	ldd	r12, Y+8	; 0x08
     7b6:	d9 84       	ldd	r13, Y+9	; 0x09
     7b8:	ea 84       	ldd	r14, Y+10	; 0x0a
     7ba:	fb 84       	ldd	r15, Y+11	; 0x0b
     7bc:	0e 94 ff 02 	call	0x5fe	; 0x5fe <micros>
     7c0:	08 81       	ld	r16, Y
     7c2:	19 81       	ldd	r17, Y+1	; 0x01
     7c4:	2a 81       	ldd	r18, Y+2	; 0x02
     7c6:	3b 81       	ldd	r19, Y+3	; 0x03
     7c8:	c0 1a       	sub	r12, r16
     7ca:	d1 0a       	sbc	r13, r17
     7cc:	e2 0a       	sbc	r14, r18
     7ce:	f3 0a       	sbc	r15, r19
     7d0:	6c 0d       	add	r22, r12
     7d2:	7d 1d       	adc	r23, r13
     7d4:	8e 1d       	adc	r24, r14
     7d6:	9f 1d       	adc	r25, r15
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:528
        case SECONDS:
            result = millisBase - startTime;
            break;
    }
    return result;
}
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	ff 90       	pop	r15
     7e2:	ef 90       	pop	r14
     7e4:	df 90       	pop	r13
     7e6:	cf 90       	pop	r12
     7e8:	08 95       	ret
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:515
    onceTriggered = false;
}

unsigned long BlockNot::timeSinceReset() {
    unsigned long result = 0L;
    unsigned long millisBase = millisOffset + millis();
     7ea:	6c 0d       	add	r22, r12
     7ec:	7d 1d       	adc	r23, r13
     7ee:	8e 1d       	adc	r24, r14
     7f0:	9f 1d       	adc	r25, r15
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:524
            break;
        case MILLISECONDS:
            result = millisBase - startTime;
            break;
        case SECONDS:
            result = millisBase - startTime;
     7f2:	c8 80       	ld	r12, Y
     7f4:	d9 80       	ldd	r13, Y+1	; 0x01
     7f6:	ea 80       	ldd	r14, Y+2	; 0x02
     7f8:	fb 80       	ldd	r15, Y+3	; 0x03
     7fa:	6c 19       	sub	r22, r12
     7fc:	7d 09       	sbc	r23, r13
     7fe:	8e 09       	sbc	r24, r14
     800:	9f 09       	sbc	r25, r15
     802:	ea cf       	rjmp	.-44     	; 0x7d8 <BlockNot::timeSinceReset()+0x6c>

00000804 <BlockNot::triggered(bool)>:
triggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:236
            break;
    }
    if (resetOption) reset();
}

bool BlockNot::triggered(bool resetOption) {
     804:	cf 92       	push	r12
     806:	df 92       	push	r13
     808:	ef 92       	push	r14
     80a:	ff 92       	push	r15
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	ec 01       	movw	r28, r24
     816:	06 2f       	mov	r16, r22
hasTriggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:532
    return result;
}

bool BlockNot::hasTriggered() {
    bool triggered;
    switch(baseUnits) {
     818:	8b 89       	ldd	r24, Y+19	; 0x13
     81a:	9c 89       	ldd	r25, Y+20	; 0x14
     81c:	81 30       	cpi	r24, 0x01	; 1
     81e:	91 05       	cpc	r25, r1
     820:	91 f1       	breq	.+100    	; 0x886 <BlockNot::triggered(bool)+0x82>
     822:	c0 f0       	brcs	.+48     	; 0x854 <BlockNot::triggered(bool)+0x50>
     824:	02 97       	sbiw	r24, 0x02	; 2
     826:	79 f1       	breq	.+94     	; 0x886 <BlockNot::triggered(bool)+0x82>
triggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:238
    if (resetOption) reset();
}

bool BlockNot::triggered(bool resetOption) {
    bool triggered = hasTriggered();
    if (resetOption && triggered) {
     828:	00 23       	and	r16, r16
     82a:	29 f0       	breq	.+10     	; 0x836 <BlockNot::triggered(bool)+0x32>
     82c:	11 23       	and	r17, r17
     82e:	19 f0       	breq	.+6      	; 0x836 <BlockNot::triggered(bool)+0x32>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:239
        reset();
     830:	ce 01       	movw	r24, r28
     832:	0e 94 24 03 	call	0x648	; 0x648 <BlockNot::reset(unsigned long) [clone .constprop.16]>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:241
    }
    if (timerState == RUNNING) return triggered;
     836:	8d 8d       	ldd	r24, Y+29	; 0x1d
     838:	9e 8d       	ldd	r25, Y+30	; 0x1e
     83a:	89 2b       	or	r24, r25
     83c:	09 f0       	breq	.+2      	; 0x840 <BlockNot::triggered(bool)+0x3c>
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:242
    else return false;
     83e:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:243
}
     840:	81 2f       	mov	r24, r17
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	df 90       	pop	r13
     850:	cf 90       	pop	r12
     852:	08 95       	ret
hasTriggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:534

bool BlockNot::hasTriggered() {
    bool triggered;
    switch(baseUnits) {
        case MICROSECONDS:
            triggered = timeSinceReset() >= (unsigned long) duration.micros;
     854:	ce 01       	movw	r24, r28
     856:	0e 94 b6 03 	call	0x76c	; 0x76c <BlockNot::timeSinceReset()>
     85a:	6b 01       	movw	r12, r22
     85c:	7c 01       	movw	r14, r24
_ZNK8BlockNot5cTime7micro_tcvdEv():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:213
            micro_t &operator=(double us) {
                seconds = us * .000001;
                return *this;
            }
            operator double() const {
                return seconds * 1000000.0;
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	34 e2       	ldi	r19, 0x24	; 36
     862:	44 e7       	ldi	r20, 0x74	; 116
     864:	59 e4       	ldi	r21, 0x49	; 73
_ZNK8BlockNot5cTime7milli_tcvdEv():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:201
            milli_t &operator=(double ms) {
                seconds = ms * .001;
                return *this;
            }
            operator double() const {
                return seconds * 1000.0;
     866:	6d 89       	ldd	r22, Y+21	; 0x15
     868:	7e 89       	ldd	r23, Y+22	; 0x16
     86a:	8f 89       	ldd	r24, Y+23	; 0x17
     86c:	98 8d       	ldd	r25, Y+24	; 0x18
     86e:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__mulsf3>
hasTriggered():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:540
            break;
        case MILLISECONDS:
            triggered = timeSinceReset() >= (unsigned long) duration.millis;
            break;
        case SECONDS:
            triggered = timeSinceReset() >= (unsigned long) duration.millis;
     872:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <__fixunssfsi>
     876:	11 e0       	ldi	r17, 0x01	; 1
     878:	c6 16       	cp	r12, r22
     87a:	d7 06       	cpc	r13, r23
     87c:	e8 06       	cpc	r14, r24
     87e:	f9 06       	cpc	r15, r25
     880:	98 f6       	brcc	.-90     	; 0x828 <BlockNot::triggered(bool)+0x24>
     882:	10 e0       	ldi	r17, 0x00	; 0
     884:	d1 cf       	rjmp	.-94     	; 0x828 <BlockNot::triggered(bool)+0x24>
     886:	ce 01       	movw	r24, r28
     888:	0e 94 b6 03 	call	0x76c	; 0x76c <BlockNot::timeSinceReset()>
     88c:	6b 01       	movw	r12, r22
     88e:	7c 01       	movw	r14, r24
_ZNK8BlockNot5cTime7milli_tcvdEv():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.h:201
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	4a e7       	ldi	r20, 0x7A	; 122
     896:	54 e4       	ldi	r21, 0x44	; 68
     898:	e6 cf       	rjmp	.-52     	; 0x866 <BlockNot::triggered(bool)+0x62>

0000089a <read(int)>:
read():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:664
  pinMode(PIN, OUTPUT);
}

//Read Input

bool read(int PIN) {
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	9c 01       	movw	r18, r24
digitalRead():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
     8a0:	fc 01       	movw	r30, r24
     8a2:	ec 54       	subi	r30, 0x4C	; 76
     8a4:	ff 4f       	sbci	r31, 0xFF	; 255
     8a6:	84 91       	lpm	r24, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     8a8:	f9 01       	movw	r30, r18
     8aa:	e3 56       	subi	r30, 0x63	; 99
     8ac:	ff 4f       	sbci	r31, 0xFF	; 255
     8ae:	d4 91       	lpm	r29, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     8b0:	f9 01       	movw	r30, r18
     8b2:	ea 57       	subi	r30, 0x7A	; 122
     8b4:	ff 4f       	sbci	r31, 0xFF	; 255
     8b6:	c4 91       	lpm	r28, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     8b8:	cc 23       	and	r28, r28
     8ba:	79 f0       	breq	.+30     	; 0x8da <read(int)+0x40>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     8bc:	81 11       	cpse	r24, r1
     8be:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <turnOffPWM>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     8c2:	ec 2f       	mov	r30, r28
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	ee 0f       	add	r30, r30
     8c8:	ff 1f       	adc	r31, r31
     8ca:	e8 59       	subi	r30, 0x98	; 152
     8cc:	ff 4f       	sbci	r31, 0xFF	; 255
     8ce:	a5 91       	lpm	r26, Z+
     8d0:	b4 91       	lpm	r27, Z
     8d2:	ec 91       	ld	r30, X
     8d4:	ed 23       	and	r30, r29
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	09 f4       	brne	.+2      	; 0x8dc <read(int)+0x42>
read():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:668
  if(digitalRead(PIN)) {
    return true;
  } else {
    return false;
     8da:	80 e0       	ldi	r24, 0x00	; 0
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:670
  }
}
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <setIN(int)>:
setIN():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:653
}

// Setup Inputs

void setIN(int PIN) {
  pinMode(PIN, INPUT);
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	0c 94 28 01 	jmp	0x250	; 0x250 <pinMode>

000008e8 <diffcheck()>:
diffcheck():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:258
  }
}


//Check Voltage Difference from Set Voltage
bool diffcheck() { //(returns true if difference is more than set difference and runs motor)
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:259
  int dif = SETV - OV();
     8ec:	c0 91 de 01 	lds	r28, 0x01DE	; 0x8001de <SETV>
     8f0:	d0 91 df 01 	lds	r29, 0x01DF	; 0x8001df <SETV+0x1>
OV():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:398
int IV() {
  return analogRead(inVolt);
}

int OV() {
  return analogRead(outVolt);
     8f4:	8f e0       	ldi	r24, 0x0F	; 15
     8f6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <analogRead>
diffcheck():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:263
bool diffcheck() { //(returns true if difference is more than set difference and runs motor)
  int dif = SETV - OV();
  if(dif < 0){
    dif = dif * -1;
  }
  if(dif > DIFF){
     8fa:	c8 1b       	sub	r28, r24
     8fc:	d9 0b       	sbc	r29, r25
     8fe:	d7 ff       	sbrs	r29, 7
     900:	03 c0       	rjmp	.+6      	; 0x908 <__stack+0x9>
     902:	d1 95       	neg	r29
     904:	c1 95       	neg	r28
     906:	d1 09       	sbc	r29, r1
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	40 91 66 01 	lds	r20, 0x0166	; 0x800166 <DIFF>
     90e:	50 91 67 01 	lds	r21, 0x0167	; 0x800167 <DIFF+0x1>
     912:	4c 17       	cp	r20, r28
     914:	5d 07       	cpc	r21, r29
     916:	0c f0       	brlt	.+2      	; 0x91a <__stack+0x1b>
     918:	80 e0       	ldi	r24, 0x00	; 0
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:268
    return true;
  } else {
    return false;
  }
}
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <currentok()>:
amp():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:402
int OV() {
  return analogRead(outVolt);
}

int amp() {
  return analogRead(current);
     920:	80 e1       	ldi	r24, 0x10	; 16
     922:	0e 94 59 01 	call	0x2b2	; 0x2b2 <analogRead>
currentok():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:249
  }
}

//Check If Current Load is lower than max current Set by Parameters
bool currentok() {
  if(amp() < OVL){
     926:	21 e0       	ldi	r18, 0x01	; 1
     928:	40 91 6c 01 	lds	r20, 0x016C	; 0x80016c <OVL>
     92c:	50 91 6d 01 	lds	r21, 0x016D	; 0x80016d <OVL+0x1>
     930:	84 17       	cp	r24, r20
     932:	95 07       	cpc	r25, r21
     934:	0c f0       	brlt	.+2      	; 0x938 <currentok()+0x18>
     936:	20 e0       	ldi	r18, 0x00	; 0
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:254
    return true;
  } else {
    return false;
  }
}
     938:	82 2f       	mov	r24, r18
     93a:	08 95       	ret

0000093c <outputVok()>:
OV():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:398
int IV() {
  return analogRead(inVolt);
}

int OV() {
  return analogRead(outVolt);
     93c:	8f e0       	ldi	r24, 0x0F	; 15
     93e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <analogRead>
outputVok():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:240
    return false;
  }
}
//Check If output voltage is within Low & High voltage Set by Parameters
bool outputVok() {
  if(OV() > OLV && OV() < OHV){
     942:	20 91 6e 01 	lds	r18, 0x016E	; 0x80016e <OLV>
     946:	30 91 6f 01 	lds	r19, 0x016F	; 0x80016f <OLV+0x1>
     94a:	28 17       	cp	r18, r24
     94c:	39 07       	cpc	r19, r25
     94e:	5c f4       	brge	.+22     	; 0x966 <outputVok()+0x2a>
OV():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:398
int IV() {
  return analogRead(inVolt);
}

int OV() {
  return analogRead(outVolt);
     950:	8f e0       	ldi	r24, 0x0F	; 15
     952:	0e 94 59 01 	call	0x2b2	; 0x2b2 <analogRead>
outputVok():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:240
    return false;
  }
}
//Check If output voltage is within Low & High voltage Set by Parameters
bool outputVok() {
  if(OV() > OLV && OV() < OHV){
     956:	21 e0       	ldi	r18, 0x01	; 1
     958:	40 91 70 01 	lds	r20, 0x0170	; 0x800170 <OHV>
     95c:	50 91 71 01 	lds	r21, 0x0171	; 0x800171 <OHV+0x1>
     960:	84 17       	cp	r24, r20
     962:	95 07       	cpc	r25, r21
     964:	0c f0       	brlt	.+2      	; 0x968 <outputVok()+0x2c>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:243
    return true;
  } else {
    return false;
     966:	20 e0       	ldi	r18, 0x00	; 0
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:245
  }
}
     968:	82 2f       	mov	r24, r18
     96a:	08 95       	ret

0000096c <inputVok()>:
IV():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:394
  }
}


int IV() {
  return analogRead(inVolt);
     96c:	8e e0       	ldi	r24, 0x0E	; 14
     96e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <analogRead>
inputVok():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:232
  freq = 1000000.0 / (ontime * 2.0) * (5.0/5.7);//(ontime + offtime);
}

//Check If input voltage is within Low & High voltage Set by Parameters
bool inputVok() {
  if(IV() > ILV && IV() < IHV){
     972:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <ILV>
     976:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <ILV+0x1>
     97a:	28 17       	cp	r18, r24
     97c:	39 07       	cpc	r19, r25
     97e:	5c f4       	brge	.+22     	; 0x996 <inputVok()+0x2a>
IV():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:394
  }
}


int IV() {
  return analogRead(inVolt);
     980:	8e e0       	ldi	r24, 0x0E	; 14
     982:	0e 94 59 01 	call	0x2b2	; 0x2b2 <analogRead>
inputVok():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:232
  freq = 1000000.0 / (ontime * 2.0) * (5.0/5.7);//(ontime + offtime);
}

//Check If input voltage is within Low & High voltage Set by Parameters
bool inputVok() {
  if(IV() > ILV && IV() < IHV){
     986:	21 e0       	ldi	r18, 0x01	; 1
     988:	40 91 74 01 	lds	r20, 0x0174	; 0x800174 <IHV>
     98c:	50 91 75 01 	lds	r21, 0x0175	; 0x800175 <IHV+0x1>
     990:	84 17       	cp	r24, r20
     992:	95 07       	cpc	r25, r21
     994:	0c f0       	brlt	.+2      	; 0x998 <inputVok()+0x2c>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:235
    return true;
  } else {
    return false;
     996:	20 e0       	ldi	r18, 0x00	; 0
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:237
  }
}
     998:	82 2f       	mov	r24, r18
     99a:	08 95       	ret

0000099c <checksystem()>:
checksystem():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:297
}

//Check if Input,Output Voltage and current is within the set range

bool checksystem() {
  if(inputVok() && outputVok() && currentok()){
     99c:	0e 94 b6 04 	call	0x96c	; 0x96c <inputVok()>
     9a0:	88 23       	and	r24, r24
     9a2:	29 f0       	breq	.+10     	; 0x9ae <checksystem()+0x12>
     9a4:	0e 94 9e 04 	call	0x93c	; 0x93c <outputVok()>
     9a8:	81 11       	cpse	r24, r1
     9aa:	0c 94 90 04 	jmp	0x920	; 0x920 <currentok()>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:302
    return true;
  } else {
    return false;
  }
}
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	08 95       	ret

000009b2 <displayVar(int, int) [clone .constprop.8]>:
displayVar():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:620
    }
}

//Display INT Variable

void displayVar(int var, int deci) {
     9b2:	0f 93       	push	r16
     9b4:	1f 93       	push	r17
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	00 d0       	rcall	.+0      	; 0x9bc <displayVar(int, int) [clone .constprop.8]+0xa>
     9bc:	00 d0       	rcall	.+0      	; 0x9be <displayVar(int, int) [clone .constprop.8]+0xc>
     9be:	1f 92       	push	r1
     9c0:	cd b7       	in	r28, 0x3d	; 61
     9c2:	de b7       	in	r29, 0x3e	; 62
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:622
  char buffer[5];
  sprintf(buffer, "%4d", var);
     9c4:	9f 93       	push	r25
     9c6:	8f 93       	push	r24
     9c8:	86 e0       	ldi	r24, 0x06	; 6
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	9f 93       	push	r25
     9ce:	8f 93       	push	r24
     9d0:	8e 01       	movw	r16, r28
     9d2:	0f 5f       	subi	r16, 0xFF	; 255
     9d4:	1f 4f       	sbci	r17, 0xFF	; 255
     9d6:	1f 93       	push	r17
     9d8:	0f 93       	push	r16
     9da:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <sprintf>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:623
  display1.DisplayString(buffer, deci);
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	c8 01       	movw	r24, r16
     9e2:	0e 94 76 01 	call	0x2ec	; 0x2ec <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]>
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:624
}
     9f2:	0f 90       	pop	r0
     9f4:	0f 90       	pop	r0
     9f6:	0f 90       	pop	r0
     9f8:	0f 90       	pop	r0
     9fa:	0f 90       	pop	r0
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	08 95       	ret

00000a06 <menuIHV() [clone .part.10]>:
_Z7menuIHVv.part.10():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:415

//Setup Input High Voltage

void menuIHV() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
     a06:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <enc>
     a0a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <enc+0x1>
     a0e:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <displayVar(int, int) [clone .constprop.8]>

00000a12 <String::reserve(unsigned int)>:
reserve():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:146
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	ec 01       	movw	r28, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:147
  if (buffer && capacity >= size) return 1;
     a1c:	88 81       	ld	r24, Y
     a1e:	99 81       	ldd	r25, Y+1	; 0x01
     a20:	00 97       	sbiw	r24, 0x00	; 0
     a22:	59 f0       	breq	.+22     	; 0xa3a <String::reserve(unsigned int)+0x28>
     a24:	2a 81       	ldd	r18, Y+2	; 0x02
     a26:	3b 81       	ldd	r19, Y+3	; 0x03
     a28:	26 17       	cp	r18, r22
     a2a:	37 07       	cpc	r19, r23
     a2c:	30 f0       	brcs	.+12     	; 0xa3a <String::reserve(unsigned int)+0x28>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     a2e:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
}
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	08 95       	ret
     a3a:	8b 01       	movw	r16, r22
changeBuffer():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:157

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     a3c:	6f 5f       	subi	r22, 0xFF	; 255
     a3e:	7f 4f       	sbci	r23, 0xFF	; 255
     a40:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <realloc>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
     a44:	00 97       	sbiw	r24, 0x00	; 0
     a46:	59 f0       	breq	.+22     	; 0xa5e <String::reserve(unsigned int)+0x4c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
     a48:	99 83       	std	Y+1, r25	; 0x01
     a4a:	88 83       	st	Y, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
     a4c:	1b 83       	std	Y+3, r17	; 0x03
     a4e:	0a 83       	std	Y+2, r16	; 0x02
reserve():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     a50:	2c 81       	ldd	r18, Y+4	; 0x04
     a52:	3d 81       	ldd	r19, Y+5	; 0x05
     a54:	23 2b       	or	r18, r19
     a56:	59 f7       	brne	.-42     	; 0xa2e <String::reserve(unsigned int)+0x1c>
     a58:	fc 01       	movw	r30, r24
     a5a:	10 82       	st	Z, r1
     a5c:	e8 cf       	rjmp	.-48     	; 0xa2e <String::reserve(unsigned int)+0x1c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:152
    return 1;
  }
  return 0;
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	e7 cf       	rjmp	.-50     	; 0xa30 <String::reserve(unsigned int)+0x1e>

00000a62 <String::invalidate()>:
invalidate():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:139
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	ec 01       	movw	r28, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:140
  if (buffer) free(buffer);
     a68:	88 81       	ld	r24, Y
     a6a:	99 81       	ldd	r25, Y+1	; 0x01
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	11 f0       	breq	.+4      	; 0xa74 <String::invalidate()+0x12>
     a70:	0e 94 6f 10 	call	0x20de	; 0x20de <free>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
     a74:	19 82       	std	Y+1, r1	; 0x01
     a76:	18 82       	st	Y, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
     a78:	1d 82       	std	Y+5, r1	; 0x05
     a7a:	1c 82       	std	Y+4, r1	; 0x04
     a7c:	1b 82       	std	Y+3, r1	; 0x03
     a7e:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:143
}
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	08 95       	ret

00000a86 <String::copy(char const*, unsigned int)>:
copy():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:171
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	ec 01       	movw	r28, r24
     a94:	7b 01       	movw	r14, r22
     a96:	8a 01       	movw	r16, r20
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:172
  if (!reserve(length)) {
     a98:	ba 01       	movw	r22, r20
     a9a:	0e 94 09 05 	call	0xa12	; 0xa12 <String::reserve(unsigned int)>
     a9e:	81 11       	cpse	r24, r1
     aa0:	0b c0       	rjmp	.+22     	; 0xab8 <String::copy(char const*, unsigned int)+0x32>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:173
    invalidate();
     aa2:	ce 01       	movw	r24, r28
     aa4:	0e 94 31 05 	call	0xa62	; 0xa62 <String::invalidate()>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:179
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
     aa8:	ce 01       	movw	r24, r28
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
     ab8:	1d 83       	std	Y+5, r17	; 0x05
     aba:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
     abc:	b7 01       	movw	r22, r14
     abe:	88 81       	ld	r24, Y
     ac0:	99 81       	ldd	r25, Y+1	; 0x01
     ac2:	0e 94 be 11 	call	0x237c	; 0x237c <strcpy>
     ac6:	f0 cf       	rjmp	.-32     	; 0xaa8 <String::copy(char const*, unsigned int)+0x22>

00000ac8 <String::~String()>:
__base_dtor ():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
     ac8:	fc 01       	movw	r30, r24
     aca:	80 81       	ld	r24, Z
     acc:	91 81       	ldd	r25, Z+1	; 0x01
     ace:	0c 94 6f 10 	jmp	0x20de	; 0x20de <free>

00000ad2 <String::String(char const*)>:
_ZN6String4initEv():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     ad2:	fc 01       	movw	r30, r24
     ad4:	11 82       	std	Z+1, r1	; 0x01
     ad6:	10 82       	st	Z, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
     ad8:	13 82       	std	Z+3, r1	; 0x03
     ada:	12 82       	std	Z+2, r1	; 0x02
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
     adc:	15 82       	std	Z+5, r1	; 0x05
     ade:	14 82       	std	Z+4, r1	; 0x04
__base_ctor ():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
     ae0:	fb 01       	movw	r30, r22
     ae2:	01 90       	ld	r0, Z+
     ae4:	00 20       	and	r0, r0
     ae6:	e9 f7       	brne	.-6      	; 0xae2 <String::String(char const*)+0x10>
     ae8:	31 97       	sbiw	r30, 0x01	; 1
     aea:	af 01       	movw	r20, r30
     aec:	46 1b       	sub	r20, r22
     aee:	57 0b       	sbc	r21, r23
     af0:	0c 94 43 05 	jmp	0xa86	; 0xa86 <String::copy(char const*, unsigned int)>

00000af4 <EEPROMClass::update(int, unsigned char) [clone .isra.1]>:
_ZN11EEPROMClass6updateEih.isra.1():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	ec 01       	movw	r28, r24
     afc:	16 2f       	mov	r17, r22
operator*():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     afe:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <eeprom_read_byte>
update():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     b02:	18 17       	cp	r17, r24
     b04:	39 f0       	breq	.+14     	; 0xb14 <EEPROMClass::update(int, unsigned char) [clone .isra.1]+0x20>
_ZN5EERefaSEh():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     b06:	61 2f       	mov	r22, r17
     b08:	ce 01       	movw	r24, r28
_ZN11EEPROMClass6updateEih.isra.1():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
_ZN5EERefaSEh():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     b10:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <eeprom_write_byte>
_ZN11EEPROMClass6updateEih.isra.1():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	08 95       	ret

00000b1c <display(String, int)>:
display():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:674
  }
}

//Display String Variable

void display(String str, int deci) {
     b1c:	8f 92       	push	r8
     b1e:	9f 92       	push	r9
     b20:	bf 92       	push	r11
     b22:	cf 92       	push	r12
     b24:	df 92       	push	r13
     b26:	ef 92       	push	r14
     b28:	ff 92       	push	r15
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	cd b7       	in	r28, 0x3d	; 61
     b34:	de b7       	in	r29, 0x3e	; 62
     b36:	28 97       	sbiw	r28, 0x08	; 8
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	8c 01       	movw	r16, r24
     b44:	b6 2e       	mov	r11, r22
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:685

  int str_len = str.length() + 1;
  char data[str_len];
  str.toCharArray(data, str_len);
  display1.DisplayString(data, deci);
}
     b46:	cd b6       	in	r12, 0x3d	; 61
     b48:	de b6       	in	r13, 0x3e	; 62
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:676

//Display String Variable

void display(String str, int deci) {
  int strl = str.length();
  if(strl < 4) {
     b4a:	fc 01       	movw	r30, r24
     b4c:	84 81       	ldd	r24, Z+4	; 0x04
     b4e:	95 81       	ldd	r25, Z+5	; 0x05
     b50:	04 97       	sbiw	r24, 0x04	; 4
     b52:	0c f0       	brlt	.+2      	; 0xb56 <display(String, int)+0x3a>
     b54:	4a c0       	rjmp	.+148    	; 0xbea <display(String, int)+0xce>
_ZN6String4initEv():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     b56:	1a 82       	std	Y+2, r1	; 0x02
     b58:	19 82       	std	Y+1, r1	; 0x01
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:134
  capacity = 0;
     b5a:	1c 82       	std	Y+4, r1	; 0x04
     b5c:	1b 82       	std	Y+3, r1	; 0x03
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:135
  len = 0;
     b5e:	1e 82       	std	Y+6, r1	; 0x06
     b60:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:63

String::String(char c)
{
  init();
  char buf[2];
  buf[0] = c;
     b62:	80 e1       	ldi	r24, 0x10	; 16
     b64:	8f 83       	std	Y+7, r24	; 0x07
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:64
  buf[1] = 0;
     b66:	18 86       	std	Y+8, r1	; 0x08
operator=():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:240
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
     b68:	be 01       	movw	r22, r28
     b6a:	69 5f       	subi	r22, 0xF9	; 249
     b6c:	7f 4f       	sbci	r23, 0xFF	; 255
     b6e:	fb 01       	movw	r30, r22
     b70:	01 90       	ld	r0, Z+
     b72:	00 20       	and	r0, r0
     b74:	e9 f7       	brne	.-6      	; 0xb70 <display(String, int)+0x54>
     b76:	31 97       	sbiw	r30, 0x01	; 1
     b78:	af 01       	movw	r20, r30
     b7a:	46 1b       	sub	r20, r22
     b7c:	57 0b       	sbc	r21, r23
     b7e:	ce 01       	movw	r24, r28
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	0e 94 43 05 	call	0xa86	; 0xa86 <String::copy(char const*, unsigned int)>
operator+():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
     b86:	f8 01       	movw	r30, r16
     b88:	80 80       	ld	r8, Z
     b8a:	91 80       	ldd	r9, Z+1	; 0x01
concat():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:266
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
     b8c:	81 14       	cp	r8, r1
     b8e:	91 04       	cpc	r9, r1
     b90:	09 f4       	brne	.+2      	; 0xb94 <display(String, int)+0x78>
     b92:	5e c0       	rjmp	.+188    	; 0xc50 <display(String, int)+0x134>
operator+():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
     b94:	e4 80       	ldd	r14, Z+4	; 0x04
     b96:	f5 80       	ldd	r15, Z+5	; 0x05
concat():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:267

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
  if (length == 0) return 1;
     b98:	e1 14       	cp	r14, r1
     b9a:	f1 04       	cpc	r15, r1
     b9c:	b9 f0       	breq	.+46     	; 0xbcc <display(String, int)+0xb0>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:265
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
     b9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ba0:	9e 81       	ldd	r25, Y+6	; 0x06
     ba2:	e8 0e       	add	r14, r24
     ba4:	f9 1e       	adc	r15, r25
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:268
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
     ba6:	b7 01       	movw	r22, r14
     ba8:	ce 01       	movw	r24, r28
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	0e 94 09 05 	call	0xa12	; 0xa12 <String::reserve(unsigned int)>
     bb0:	88 23       	and	r24, r24
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <display(String, int)+0x9a>
     bb4:	4d c0       	rjmp	.+154    	; 0xc50 <display(String, int)+0x134>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:269
  strcpy(buffer + len, cstr);
     bb6:	29 81       	ldd	r18, Y+1	; 0x01
     bb8:	3a 81       	ldd	r19, Y+2	; 0x02
     bba:	8d 81       	ldd	r24, Y+5	; 0x05
     bbc:	9e 81       	ldd	r25, Y+6	; 0x06
     bbe:	b4 01       	movw	r22, r8
     bc0:	82 0f       	add	r24, r18
     bc2:	93 1f       	adc	r25, r19
     bc4:	0e 94 be 11 	call	0x237c	; 0x237c <strcpy>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:270
  len = newlen;
     bc8:	fe 82       	std	Y+6, r15	; 0x06
     bca:	ed 82       	std	Y+5, r14	; 0x05
operator=():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:218

String & String::operator = (const String &rhs)
{
  if (this == &rhs) return *this;
  
  if (rhs.buffer) copy(rhs.buffer, rhs.len);
     bcc:	69 81       	ldd	r22, Y+1	; 0x01
     bce:	7a 81       	ldd	r23, Y+2	; 0x02
     bd0:	61 15       	cp	r22, r1
     bd2:	71 05       	cpc	r23, r1
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <display(String, int)+0xbc>
     bd6:	41 c0       	rjmp	.+130    	; 0xc5a <display(String, int)+0x13e>
     bd8:	4d 81       	ldd	r20, Y+5	; 0x05
     bda:	5e 81       	ldd	r21, Y+6	; 0x06
     bdc:	c8 01       	movw	r24, r16
     bde:	0e 94 43 05 	call	0xa86	; 0xa86 <String::copy(char const*, unsigned int)>
_ZN15StringSumHelperD2Ev():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
     be2:	ce 01       	movw	r24, r28
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	0e 94 64 05 	call	0xac8	; 0xac8 <String::~String()>
     bea:	f8 01       	movw	r30, r16
     bec:	e4 80       	ldd	r14, Z+4	; 0x04
     bee:	f5 80       	ldd	r15, Z+5	; 0x05
display():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:681
    //char16 = no display on screen
    str = char(16) + str;
  }

  int str_len = str.length() + 1;
     bf0:	c7 01       	movw	r24, r14
     bf2:	01 96       	adiw	r24, 0x01	; 1
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:682
  char data[str_len];
     bf4:	2d b7       	in	r18, 0x3d	; 61
     bf6:	3e b7       	in	r19, 0x3e	; 62
     bf8:	28 1b       	sub	r18, r24
     bfa:	39 0b       	sbc	r19, r25
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	f8 94       	cli
     c00:	3e bf       	out	0x3e, r19	; 62
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	2d bf       	out	0x3d, r18	; 61
     c06:	ed b7       	in	r30, 0x3d	; 61
     c08:	fe b7       	in	r31, 0x3e	; 62
     c0a:	31 96       	adiw	r30, 0x01	; 1
     c0c:	4f 01       	movw	r8, r30
getBytes():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:539
  return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
  if (!bufsize || !buf) return;
     c0e:	89 2b       	or	r24, r25
     c10:	21 f0       	breq	.+8      	; 0xc1a <display(String, int)+0xfe>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:540
  if (index >= len) {
     c12:	e1 14       	cp	r14, r1
     c14:	f1 04       	cpc	r15, r1
     c16:	29 f5       	brne	.+74     	; 0xc62 <display(String, int)+0x146>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:547
    return;
  }
  unsigned int n = bufsize - 1;
  if (n > len - index) n = len - index;
  strncpy((char *)buf, buffer + index, n);
  buf[n] = 0;
     c18:	10 82       	st	Z, r1
display():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:684
  str.toCharArray(data, str_len);
  display1.DisplayString(data, deci);
     c1a:	6b 2d       	mov	r22, r11
     c1c:	c4 01       	movw	r24, r8
     c1e:	0e 94 76 01 	call	0x2ec	; 0x2ec <SevSeg::DisplayString(char const*, unsigned char) [clone .constprop.9]>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:685
}
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	de be       	out	0x3e, r13	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	cd be       	out	0x3d, r12	; 61
     c2c:	28 96       	adiw	r28, 0x08	; 8
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	de bf       	out	0x3e, r29	; 62
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	cd bf       	out	0x3d, r28	; 61
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	ff 90       	pop	r15
     c42:	ef 90       	pop	r14
     c44:	df 90       	pop	r13
     c46:	cf 90       	pop	r12
     c48:	bf 90       	pop	r11
     c4a:	9f 90       	pop	r9
     c4c:	8f 90       	pop	r8
     c4e:	08 95       	ret
operator+():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:356
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
     c50:	ce 01       	movw	r24, r28
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	0e 94 31 05 	call	0xa62	; 0xa62 <String::invalidate()>
     c58:	b9 cf       	rjmp	.-142    	; 0xbcc <display(String, int)+0xb0>
operator=():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:219
String & String::operator = (const String &rhs)
{
  if (this == &rhs) return *this;
  
  if (rhs.buffer) copy(rhs.buffer, rhs.len);
  else invalidate();
     c5a:	c8 01       	movw	r24, r16
     c5c:	0e 94 31 05 	call	0xa62	; 0xa62 <String::invalidate()>
     c60:	c0 cf       	rjmp	.-128    	; 0xbe2 <display(String, int)+0xc6>
getBytes():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:546
    buf[0] = 0;
    return;
  }
  unsigned int n = bufsize - 1;
  if (n > len - index) n = len - index;
  strncpy((char *)buf, buffer + index, n);
     c62:	f8 01       	movw	r30, r16
     c64:	60 81       	ld	r22, Z
     c66:	71 81       	ldd	r23, Z+1	; 0x01
     c68:	a7 01       	movw	r20, r14
     c6a:	c4 01       	movw	r24, r8
     c6c:	0e 94 c5 11 	call	0x238a	; 0x238a <strncpy>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:547
  buf[n] = 0;
     c70:	f4 01       	movw	r30, r8
     c72:	ee 0d       	add	r30, r14
     c74:	ff 1d       	adc	r31, r15
     c76:	d0 cf       	rjmp	.-96     	; 0xc18 <display(String, int)+0xfc>

00000c78 <updateScreenData(bool) [clone .part.9]>:
_Z16updateScreenDatab.part.9():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:319
  }
}

//Update Run Mode Screen

void updateScreenData(bool status) {
     c78:	ff 92       	push	r15
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	00 d0       	rcall	.+0      	; 0xc84 <updateScreenData(bool) [clone .part.9]+0xc>
     c84:	00 d0       	rcall	.+0      	; 0xc86 <updateScreenData(bool) [clone .part.9]+0xe>
     c86:	00 d0       	rcall	.+0      	; 0xc88 <updateScreenData(bool) [clone .part.9]+0x10>
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	f8 2e       	mov	r15, r24
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:322
  //uncomment !mode and comment !read(setupPin) if setupPin is not being used
  if(!mode/*!read(setupPin)*/){
    if(!resetrefresh){
     c8e:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <resetrefresh>
     c92:	81 11       	cpse	r24, r1
     c94:	07 c0       	rjmp	.+14     	; 0xca4 <updateScreenData(bool) [clone .part.9]+0x2c>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:323
      refresh.reset();
     c96:	8b e7       	ldi	r24, 0x7B	; 123
     c98:	91 e0       	ldi	r25, 0x01	; 1
     c9a:	0e 94 24 03 	call	0x648	; 0x648 <BlockNot::reset(unsigned long) [clone .constprop.16]>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:324
      resetrefresh = true;
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <resetrefresh>
     ca4:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <alarmOnce>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:326
    }
    if(!status && !alarmOnce){
     ca8:	f1 10       	cpse	r15, r1
     caa:	50 c1       	rjmp	.+672    	; 0xf4c <updateScreenData(bool) [clone .part.9]+0x2d4>
     cac:	81 11       	cpse	r24, r1
     cae:	03 c0       	rjmp	.+6      	; 0xcb6 <updateScreenData(bool) [clone .part.9]+0x3e>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:327
      alarmOnce = true;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <alarmOnce>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:334
    }
    if(status && alarmOnce){
      alarmOnce = false;
      menu == 0;
    }
    if(refresh.triggered()){
     cb6:	61 e0       	ldi	r22, 0x01	; 1
     cb8:	8b e7       	ldi	r24, 0x7B	; 123
     cba:	91 e0       	ldi	r25, 0x01	; 1
     cbc:	0e 94 02 04 	call	0x804	; 0x804 <BlockNot::triggered(bool)>
     cc0:	88 23       	and	r24, r24
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <updateScreenData(bool) [clone .part.9]+0x4e>
     cc4:	57 c0       	rjmp	.+174    	; 0xd74 <updateScreenData(bool) [clone .part.9]+0xfc>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:335
      if(menu == 6){
     cc6:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <menu>
     cca:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <menu+0x1>
     cce:	06 97       	sbiw	r24, 0x06	; 6
     cd0:	09 f0       	breq	.+2      	; 0xcd4 <updateScreenData(bool) [clone .part.9]+0x5c>
     cd2:	47 c0       	rjmp	.+142    	; 0xd62 <updateScreenData(bool) [clone .part.9]+0xea>
pulseIn():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:38
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
  // cache the port and bit of the pin in order to speed up the
  // pulse width measuring loop and achieve finer resolution.  calling
  // digitalRead() instead yields much coarser resolution.
  uint8_t bit = digitalPinToBitMask(pin);
     cd4:	ee ea       	ldi	r30, 0xAE	; 174
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	64 91       	lpm	r22, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:39
  uint8_t port = digitalPinToPort(pin);
     cda:	e7 e9       	ldi	r30, 0x97	; 151
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	e4 91       	lpm	r30, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:46

  // convert the timeout from microseconds to a number of times through
  // the initial loop; it takes approximately 16 clock cycles per iteration
  unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

  unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	ee 0f       	add	r30, r30
     ce4:	ff 1f       	adc	r31, r31
     ce6:	e8 59       	subi	r30, 0x98	; 152
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	85 91       	lpm	r24, Z+
     cec:	94 91       	lpm	r25, Z
     cee:	00 e2       	ldi	r16, 0x20	; 32
     cf0:	11 ea       	ldi	r17, 0xA1	; 161
     cf2:	27 e0       	ldi	r18, 0x07	; 7
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	46 2f       	mov	r20, r22
     cf8:	0e 94 f6 07 	call	0xfec	; 0xfec <countPulseASM>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:49

  // prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
  if (width)
     cfc:	61 15       	cp	r22, r1
     cfe:	71 05       	cpc	r23, r1
     d00:	81 05       	cpc	r24, r1
     d02:	91 05       	cpc	r25, r1
     d04:	91 f0       	breq	.+36     	; 0xd2a <updateScreenData(bool) [clone .part.9]+0xb2>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.c:50
    return clockCyclesToMicroseconds(width * 16 + 16);
     d06:	6f 5f       	subi	r22, 0xFF	; 255
     d08:	7f 4f       	sbci	r23, 0xFF	; 255
     d0a:	8f 4f       	sbci	r24, 0xFF	; 255
     d0c:	9f 4f       	sbci	r25, 0xFF	; 255
     d0e:	24 e0       	ldi	r18, 0x04	; 4
     d10:	66 0f       	add	r22, r22
     d12:	77 1f       	adc	r23, r23
     d14:	88 1f       	adc	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	2a 95       	dec	r18
     d1a:	d1 f7       	brne	.-12     	; 0xd10 <updateScreenData(bool) [clone .part.9]+0x98>
     d1c:	33 e0       	ldi	r19, 0x03	; 3
     d1e:	96 95       	lsr	r25
     d20:	87 95       	ror	r24
     d22:	77 95       	ror	r23
     d24:	67 95       	ror	r22
     d26:	3a 95       	dec	r19
     d28:	d1 f7       	brne	.-12     	; 0xd1e <updateScreenData(bool) [clone .part.9]+0xa6>
checkhz():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:227


void checkhz() {
  ontime = pulseIn(hz, HIGH);
  //offtime = pulseIn(hz, LOW, 30000);
  freq = 1000000.0 / (ontime * 2.0) * (5.0/5.7);//(ontime + offtime);
     d2a:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__floatsisf>
     d2e:	9b 01       	movw	r18, r22
     d30:	ac 01       	movw	r20, r24
     d32:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__addsf3>
     d36:	9b 01       	movw	r18, r22
     d38:	ac 01       	movw	r20, r24
     d3a:	60 e0       	ldi	r22, 0x00	; 0
     d3c:	74 e2       	ldi	r23, 0x24	; 36
     d3e:	84 e7       	ldi	r24, 0x74	; 116
     d40:	99 e4       	ldi	r25, 0x49	; 73
     d42:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <__divsf3>
     d46:	29 eb       	ldi	r18, 0xB9	; 185
     d48:	3f e8       	ldi	r19, 0x8F	; 143
     d4a:	40 e6       	ldi	r20, 0x60	; 96
     d4c:	5f e3       	ldi	r21, 0x3F	; 63
     d4e:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__mulsf3>
     d52:	60 93 5e 01 	sts	0x015E, r22	; 0x80015e <__data_end>
     d56:	70 93 5f 01 	sts	0x015F, r23	; 0x80015f <__data_end+0x1>
     d5a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__data_end+0x2>
     d5e:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__data_end+0x3>
_Z16updateScreenDatab.part.9():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:338
    }
    if(refresh.triggered()){
      if(menu == 6){
        checkhz();
      }
      menu++;
     d62:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <menu>
     d66:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <menu+0x1>
     d6a:	01 96       	adiw	r24, 0x01	; 1
     d6c:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <menu+0x1>
     d70:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <menu>
     d74:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <menu>
     d78:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <menu+0x1>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:343
    }

    //Show Error if Available
    
    if(!status && menu == -1){
     d7c:	ff 20       	and	r15, r15
     d7e:	a1 f0       	breq	.+40     	; 0xda8 <updateScreenData(bool) [clone .part.9]+0x130>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:358
        if(!currentok()){
          display("ErOL", 0);
        }
      }
    }
    if(menu == 0){
     d80:	00 97       	sbiw	r24, 0x00	; 0
     d82:	09 f0       	breq	.+2      	; 0xd86 <updateScreenData(bool) [clone .part.9]+0x10e>
     d84:	b1 c0       	rjmp	.+354    	; 0xee8 <updateScreenData(bool) [clone .part.9]+0x270>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:359
      display("InPu", 0);
     d86:	6e e1       	ldi	r22, 0x1E	; 30
     d88:	71 e0       	ldi	r23, 0x01	; 1
     d8a:	ce 01       	movw	r24, r28
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	0e 94 69 05 	call	0xad2	; 0xad2 <String::String(char const*)>
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	ce 01       	movw	r24, r28
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <display(String, int)>
     d9e:	ce 01       	movw	r24, r28
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	0e 94 64 05 	call	0xac8	; 0xac8 <String::~String()>
     da6:	40 c0       	rjmp	.+128    	; 0xe28 <updateScreenData(bool) [clone .part.9]+0x1b0>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:343
      menu++;
    }

    //Show Error if Available
    
    if(!status && menu == -1){
     da8:	8f 3f       	cpi	r24, 0xFF	; 255
     daa:	98 07       	cpc	r25, r24
     dac:	49 f7       	brne	.-46     	; 0xd80 <updateScreenData(bool) [clone .part.9]+0x108>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:344
      if(!inputVok() && !outputVok() && !currentok()){
     dae:	0e 94 b6 04 	call	0x96c	; 0x96c <inputVok()>
     db2:	81 11       	cpse	r24, r1
     db4:	0a c0       	rjmp	.+20     	; 0xdca <updateScreenData(bool) [clone .part.9]+0x152>
     db6:	0e 94 9e 04 	call	0x93c	; 0x93c <outputVok()>
     dba:	81 11       	cpse	r24, r1
     dbc:	06 c0       	rjmp	.+12     	; 0xdca <updateScreenData(bool) [clone .part.9]+0x152>
     dbe:	0e 94 90 04 	call	0x920	; 0x920 <currentok()>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:345
        display("ErAL", 0);
     dc2:	6a e0       	ldi	r22, 0x0A	; 10
     dc4:	71 e0       	ldi	r23, 0x01	; 1
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:344
    }

    //Show Error if Available
    
    if(!status && menu == -1){
      if(!inputVok() && !outputVok() && !currentok()){
     dc6:	88 23       	and	r24, r24
     dc8:	01 f3       	breq	.-64     	; 0xd8a <updateScreenData(bool) [clone .part.9]+0x112>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:347
        display("ErAL", 0);
      } else {
        if(!inputVok()){
     dca:	0e 94 b6 04 	call	0x96c	; 0x96c <inputVok()>
     dce:	81 11       	cpse	r24, r1
     dd0:	10 c0       	rjmp	.+32     	; 0xdf2 <updateScreenData(bool) [clone .part.9]+0x17a>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:348
          display("ErIn", 0);
     dd2:	6f e0       	ldi	r22, 0x0F	; 15
     dd4:	71 e0       	ldi	r23, 0x01	; 1
     dd6:	ce 01       	movw	r24, r28
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	0e 94 69 05 	call	0xad2	; 0xad2 <String::String(char const*)>
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	ce 01       	movw	r24, r28
     de4:	01 96       	adiw	r24, 0x01	; 1
     de6:	0e 94 8e 05 	call	0xb1c	; 0xb1c <display(String, int)>
     dea:	ce 01       	movw	r24, r28
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	0e 94 64 05 	call	0xac8	; 0xac8 <String::~String()>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:350
        }
        if(!outputVok()){
     df2:	0e 94 9e 04 	call	0x93c	; 0x93c <outputVok()>
     df6:	81 11       	cpse	r24, r1
     df8:	10 c0       	rjmp	.+32     	; 0xe1a <updateScreenData(bool) [clone .part.9]+0x1a2>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:351
          display("ErOt", 0);
     dfa:	64 e1       	ldi	r22, 0x14	; 20
     dfc:	71 e0       	ldi	r23, 0x01	; 1
     dfe:	ce 01       	movw	r24, r28
     e00:	01 96       	adiw	r24, 0x01	; 1
     e02:	0e 94 69 05 	call	0xad2	; 0xad2 <String::String(char const*)>
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	ce 01       	movw	r24, r28
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	0e 94 8e 05 	call	0xb1c	; 0xb1c <display(String, int)>
     e12:	ce 01       	movw	r24, r28
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	0e 94 64 05 	call	0xac8	; 0xac8 <String::~String()>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:353
        }
        if(!currentok()){
     e1a:	0e 94 90 04 	call	0x920	; 0x920 <currentok()>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:354
          display("ErOL", 0);
     e1e:	69 e1       	ldi	r22, 0x19	; 25
     e20:	71 e0       	ldi	r23, 0x01	; 1
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:353
          display("ErIn", 0);
        }
        if(!outputVok()){
          display("ErOt", 0);
        }
        if(!currentok()){
     e22:	88 23       	and	r24, r24
     e24:	09 f4       	brne	.+2      	; 0xe28 <updateScreenData(bool) [clone .part.9]+0x1b0>
     e26:	b1 cf       	rjmp	.-158    	; 0xd8a <updateScreenData(bool) [clone .part.9]+0x112>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:364
      display("InPu", 0);
    }
    if(menu == 1){
      displayVar(IV(), 0);
    }
    if(menu == 2){
     e28:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <menu>
     e2c:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <menu+0x1>
     e30:	82 30       	cpi	r24, 0x02	; 2
     e32:	91 05       	cpc	r25, r1
     e34:	09 f0       	breq	.+2      	; 0xe38 <updateScreenData(bool) [clone .part.9]+0x1c0>
     e36:	61 c0       	rjmp	.+194    	; 0xefa <updateScreenData(bool) [clone .part.9]+0x282>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:365
      display("Outu", 0);
     e38:	63 e2       	ldi	r22, 0x23	; 35
     e3a:	71 e0       	ldi	r23, 0x01	; 1
     e3c:	ce 01       	movw	r24, r28
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	0e 94 69 05 	call	0xad2	; 0xad2 <String::String(char const*)>
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	ce 01       	movw	r24, r28
     e4a:	01 96       	adiw	r24, 0x01	; 1
     e4c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <display(String, int)>
     e50:	ce 01       	movw	r24, r28
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	0e 94 64 05 	call	0xac8	; 0xac8 <String::~String()>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:370
    }
    if(menu == 3){
      displayVar(OV(), 0);
    }
    if(menu == 4){
     e58:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <menu>
     e5c:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <menu+0x1>
     e60:	84 30       	cpi	r24, 0x04	; 4
     e62:	91 05       	cpc	r25, r1
     e64:	09 f0       	breq	.+2      	; 0xe68 <updateScreenData(bool) [clone .part.9]+0x1f0>
     e66:	52 c0       	rjmp	.+164    	; 0xf0c <updateScreenData(bool) [clone .part.9]+0x294>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:371
      display("LoAd", 0);
     e68:	68 e2       	ldi	r22, 0x28	; 40
     e6a:	71 e0       	ldi	r23, 0x01	; 1
     e6c:	ce 01       	movw	r24, r28
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	0e 94 69 05 	call	0xad2	; 0xad2 <String::String(char const*)>
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	ce 01       	movw	r24, r28
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <display(String, int)>
     e80:	ce 01       	movw	r24, r28
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	0e 94 64 05 	call	0xac8	; 0xac8 <String::~String()>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:376
    }
    if(menu == 5){
      displayVar(amp(), 0);
    }
    if(menu == 6){
     e88:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <menu>
     e8c:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <menu+0x1>
     e90:	86 30       	cpi	r24, 0x06	; 6
     e92:	91 05       	cpc	r25, r1
     e94:	09 f0       	breq	.+2      	; 0xe98 <updateScreenData(bool) [clone .part.9]+0x220>
     e96:	43 c0       	rjmp	.+134    	; 0xf1e <updateScreenData(bool) [clone .part.9]+0x2a6>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:377
      display("FrEq", 4);
     e98:	6d e2       	ldi	r22, 0x2D	; 45
     e9a:	71 e0       	ldi	r23, 0x01	; 1
     e9c:	ce 01       	movw	r24, r28
     e9e:	01 96       	adiw	r24, 0x01	; 1
     ea0:	0e 94 69 05 	call	0xad2	; 0xad2 <String::String(char const*)>
     ea4:	64 e0       	ldi	r22, 0x04	; 4
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	ce 01       	movw	r24, r28
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	0e 94 8e 05 	call	0xb1c	; 0xb1c <display(String, int)>
     eb0:	ce 01       	movw	r24, r28
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	0e 94 64 05 	call	0xac8	; 0xac8 <String::~String()>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:382
    }
    if(menu == 7){
      displayVar((int)freq, 0);
    }
    if(menu == 8){
     eb8:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <menu>
     ebc:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <menu+0x1>
     ec0:	08 97       	sbiw	r24, 0x08	; 8
     ec2:	31 f4       	brne	.+12     	; 0xed0 <updateScreenData(bool) [clone .part.9]+0x258>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:383
      if(status){
     ec4:	ff 20       	and	r15, r15
     ec6:	d9 f1       	breq	.+118    	; 0xf3e <updateScreenData(bool) [clone .part.9]+0x2c6>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:384
        menu = 0;
     ec8:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <menu+0x1>
     ecc:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <menu>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:390
      } else {
        menu = -1;
      }
    }
  }
}
     ed0:	26 96       	adiw	r28, 0x06	; 6
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	de bf       	out	0x3e, r29	; 62
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	cd bf       	out	0x3d, r28	; 61
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	1f 91       	pop	r17
     ee2:	0f 91       	pop	r16
     ee4:	ff 90       	pop	r15
     ee6:	08 95       	ret
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:361
      }
    }
    if(menu == 0){
      display("InPu", 0);
    }
    if(menu == 1){
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	09 f0       	breq	.+2      	; 0xeee <updateScreenData(bool) [clone .part.9]+0x276>
     eec:	9d cf       	rjmp	.-198    	; 0xe28 <updateScreenData(bool) [clone .part.9]+0x1b0>
IV():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:394
  }
}


int IV() {
  return analogRead(inVolt);
     eee:	8e e0       	ldi	r24, 0x0E	; 14
     ef0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <analogRead>
_Z16updateScreenDatab.part.9():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:362
    }
    if(menu == 0){
      display("InPu", 0);
    }
    if(menu == 1){
      displayVar(IV(), 0);
     ef4:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <displayVar(int, int) [clone .constprop.8]>
     ef8:	97 cf       	rjmp	.-210    	; 0xe28 <updateScreenData(bool) [clone .part.9]+0x1b0>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:367
    }
    if(menu == 2){
      display("Outu", 0);
    }
    if(menu == 3){
     efa:	03 97       	sbiw	r24, 0x03	; 3
     efc:	09 f0       	breq	.+2      	; 0xf00 <updateScreenData(bool) [clone .part.9]+0x288>
     efe:	ac cf       	rjmp	.-168    	; 0xe58 <updateScreenData(bool) [clone .part.9]+0x1e0>
OV():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:398
int IV() {
  return analogRead(inVolt);
}

int OV() {
  return analogRead(outVolt);
     f00:	8f e0       	ldi	r24, 0x0F	; 15
     f02:	0e 94 59 01 	call	0x2b2	; 0x2b2 <analogRead>
_Z16updateScreenDatab.part.9():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:368
    }
    if(menu == 2){
      display("Outu", 0);
    }
    if(menu == 3){
      displayVar(OV(), 0);
     f06:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <displayVar(int, int) [clone .constprop.8]>
     f0a:	a6 cf       	rjmp	.-180    	; 0xe58 <updateScreenData(bool) [clone .part.9]+0x1e0>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:373
    }
    if(menu == 4){
      display("LoAd", 0);
    }
    if(menu == 5){
     f0c:	05 97       	sbiw	r24, 0x05	; 5
     f0e:	09 f0       	breq	.+2      	; 0xf12 <updateScreenData(bool) [clone .part.9]+0x29a>
     f10:	bb cf       	rjmp	.-138    	; 0xe88 <updateScreenData(bool) [clone .part.9]+0x210>
amp():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:402
int OV() {
  return analogRead(outVolt);
}

int amp() {
  return analogRead(current);
     f12:	80 e1       	ldi	r24, 0x10	; 16
     f14:	0e 94 59 01 	call	0x2b2	; 0x2b2 <analogRead>
_Z16updateScreenDatab.part.9():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:374
    }
    if(menu == 4){
      display("LoAd", 0);
    }
    if(menu == 5){
      displayVar(amp(), 0);
     f18:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <displayVar(int, int) [clone .constprop.8]>
     f1c:	b5 cf       	rjmp	.-150    	; 0xe88 <updateScreenData(bool) [clone .part.9]+0x210>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:379
    }
    if(menu == 6){
      display("FrEq", 4);
    }
    if(menu == 7){
     f1e:	07 97       	sbiw	r24, 0x07	; 7
     f20:	59 f6       	brne	.-106    	; 0xeb8 <updateScreenData(bool) [clone .part.9]+0x240>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:380
      displayVar((int)freq, 0);
     f22:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <__data_end>
     f26:	70 91 5f 01 	lds	r23, 0x015F	; 0x80015f <__data_end+0x1>
     f2a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end+0x2>
     f2e:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <__data_end+0x3>
     f32:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <__fixsfsi>
     f36:	cb 01       	movw	r24, r22
     f38:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <displayVar(int, int) [clone .constprop.8]>
     f3c:	bd cf       	rjmp	.-134    	; 0xeb8 <updateScreenData(bool) [clone .part.9]+0x240>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:386
    }
    if(menu == 8){
      if(status){
        menu = 0;
      } else {
        menu = -1;
     f3e:	8f ef       	ldi	r24, 0xFF	; 255
     f40:	9f ef       	ldi	r25, 0xFF	; 255
     f42:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <menu+0x1>
     f46:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <menu>
     f4a:	c2 cf       	rjmp	.-124    	; 0xed0 <updateScreenData(bool) [clone .part.9]+0x258>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:330
    }
    if(!status && !alarmOnce){
      alarmOnce = true;
      menu == -1;
    }
    if(status && alarmOnce){
     f4c:	88 23       	and	r24, r24
     f4e:	09 f4       	brne	.+2      	; 0xf52 <updateScreenData(bool) [clone .part.9]+0x2da>
     f50:	b2 ce       	rjmp	.-668    	; 0xcb6 <updateScreenData(bool) [clone .part.9]+0x3e>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:331
      alarmOnce = false;
     f52:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <alarmOnce>
     f56:	af ce       	rjmp	.-674    	; 0xcb6 <updateScreenData(bool) [clone .part.9]+0x3e>

00000f58 <__vector_16>:
__vector_16():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     f58:	1f 92       	push	r1
     f5a:	0f 92       	push	r0
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	0f 92       	push	r0
     f60:	11 24       	eor	r1, r1
     f62:	2f 93       	push	r18
     f64:	3f 93       	push	r19
     f66:	8f 93       	push	r24
     f68:	9f 93       	push	r25
     f6a:	af 93       	push	r26
     f6c:	bf 93       	push	r27
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
     f6e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <timer0_millis>
     f72:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <timer0_millis+0x1>
     f76:	a0 91 3a 02 	lds	r26, 0x023A	; 0x80023a <timer0_millis+0x2>
     f7a:	b0 91 3b 02 	lds	r27, 0x023B	; 0x80023b <timer0_millis+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
     f7e:	30 91 e4 01 	lds	r19, 0x01E4	; 0x8001e4 <timer0_fract>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
     f82:	26 e0       	ldi	r18, 0x06	; 6
     f84:	23 0f       	add	r18, r19
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
     f86:	2d 37       	cpi	r18, 0x7D	; 125
     f88:	68 f1       	brcs	.+90     	; 0xfe4 <__vector_16+0x8c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
     f8a:	29 e8       	ldi	r18, 0x89	; 137
     f8c:	23 0f       	add	r18, r19
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
     f8e:	03 96       	adiw	r24, 0x03	; 3
     f90:	a1 1d       	adc	r26, r1
     f92:	b1 1d       	adc	r27, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
     f94:	20 93 e4 01 	sts	0x01E4, r18	; 0x8001e4 <timer0_fract>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
     f98:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <timer0_millis>
     f9c:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <timer0_millis+0x1>
     fa0:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <timer0_millis+0x2>
     fa4:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <timer0_millis+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
     fa8:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <timer0_overflow_count>
     fac:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <timer0_overflow_count+0x1>
     fb0:	a0 91 e7 01 	lds	r26, 0x01E7	; 0x8001e7 <timer0_overflow_count+0x2>
     fb4:	b0 91 e8 01 	lds	r27, 0x01E8	; 0x8001e8 <timer0_overflow_count+0x3>
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	a1 1d       	adc	r26, r1
     fbc:	b1 1d       	adc	r27, r1
     fbe:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <timer0_overflow_count>
     fc2:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <timer0_overflow_count+0x1>
     fc6:	a0 93 e7 01 	sts	0x01E7, r26	; 0x8001e7 <timer0_overflow_count+0x2>
     fca:	b0 93 e8 01 	sts	0x01E8, r27	; 0x8001e8 <timer0_overflow_count+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
     fce:	bf 91       	pop	r27
     fd0:	af 91       	pop	r26
     fd2:	9f 91       	pop	r25
     fd4:	8f 91       	pop	r24
     fd6:	3f 91       	pop	r19
     fd8:	2f 91       	pop	r18
     fda:	0f 90       	pop	r0
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	0f 90       	pop	r0
     fe0:	1f 90       	pop	r1
     fe2:	18 95       	reti
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
     fe4:	02 96       	adiw	r24, 0x02	; 2
     fe6:	a1 1d       	adc	r26, r1
     fe8:	b1 1d       	adc	r27, r1
     fea:	d4 cf       	rjmp	.-88     	; 0xf94 <__vector_16+0x3c>

00000fec <countPulseASM>:
countPulseASM():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:62

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
     fec:	cf 92       	push	r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:63
    push r13   ;   ;  131 pushqi1/1 [length = 1]
     fee:	df 92       	push	r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:64
    push r14   ;   ;  132 pushqi1/1 [length = 1]
     ff0:	ef 92       	push	r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:65
    push r15   ;   ;  133 pushqi1/1 [length = 1]
     ff2:	ff 92       	push	r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:66
    push r16   ;   ;  134 pushqi1/1 [length = 1]
     ff4:	0f 93       	push	r16
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:67
    push r17   ;   ;  135 pushqi1/1 [length = 1]
     ff6:	1f 93       	push	r17
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:72
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
     ff8:	e8 2f       	mov	r30, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:73
    mov r31,r25  ;  port, port
     ffa:	f9 2f       	mov	r31, r25
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:79
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
     ffc:	05 c0       	rjmp	.+10     	; 0x1008 <countPulseASM+0x1c>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:83
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
     ffe:	01 50       	subi	r16, 0x01	; 1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:84
    sbc r17, r1   ;  maxloops
    1000:	11 09       	sbc	r17, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:85
    sbc r18, r1   ;  maxloops
    1002:	21 09       	sbc	r18, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:86
    sbc r19, r1   ;  maxloops
    1004:	31 09       	sbc	r19, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:87
    breq .L13  ; ,   ;  19  branch  [length = 1]
    1006:	61 f1       	breq	.+88     	; 0x1060 <countPulseASM+0x74>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:91
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
    1008:	90 81       	ld	r25, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:92
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
    100a:	96 23       	and	r25, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:93
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
    100c:	94 17       	cp	r25, r20
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:94
    breq .L4   ; ,   ;  26  branch  [length = 1]
    100e:	b9 f3       	breq	.-18     	; 0xffe <countPulseASM+0x12>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:95
    rjmp .L6   ;   ;  184 jump  [length = 1]
    1010:	05 c0       	rjmp	.+10     	; 0x101c <countPulseASM+0x30>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:104
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
    1012:	01 50       	subi	r16, 0x01	; 1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:105
    sbc r17, r1   ;  maxloops
    1014:	11 09       	sbc	r17, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:106
    sbc r18, r1   ;  maxloops
    1016:	21 09       	sbc	r18, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:107
    sbc r19, r1   ;  maxloops
    1018:	31 09       	sbc	r19, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:108
    breq .L13  ; ,   ;  33  branch  [length = 1]
    101a:	11 f1       	breq	.+68     	; 0x1060 <countPulseASM+0x74>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:112
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
    101c:	90 81       	ld	r25, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:113
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
    101e:	96 23       	and	r25, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:114
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
    1020:	94 13       	cpse	r25, r20
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:115
    rjmp .L7   ;
    1022:	f7 cf       	rjmp	.-18     	; 0x1012 <countPulseASM+0x26>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:116
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
    1024:	c1 2c       	mov	r12, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:117
    mov r13, r1   ;  width
    1026:	d1 2c       	mov	r13, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:118
    mov r14, r1   ;  width
    1028:	e1 2c       	mov	r14, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:119
    mov r15, r1   ;  width
    102a:	f1 2c       	mov	r15, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:120
    rjmp .L9   ;   ;  186 jump  [length = 1]
    102c:	0a c0       	rjmp	.+20     	; 0x1042 <countPulseASM+0x56>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:129
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
    102e:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:130
    sub r12,r24  ;  width,
    1030:	c8 1a       	sub	r12, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:131
    sbc r13,r24  ;  width,
    1032:	d8 0a       	sbc	r13, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:132
    sbc r14,r24  ;  width,
    1034:	e8 0a       	sbc	r14, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:133
    sbc r15,r24  ;  width,
    1036:	f8 0a       	sbc	r15, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:134
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
    1038:	0c 15       	cp	r16, r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:135
    cpc r17,r13  ;  maxloops, width
    103a:	1d 05       	cpc	r17, r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:136
    cpc r18,r14  ;  maxloops, width
    103c:	2e 05       	cpc	r18, r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:137
    cpc r19,r15  ;  maxloops, width
    103e:	3f 05       	cpc	r19, r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:138
    breq .L13  ; ,   ;  52  branch  [length = 1]
    1040:	79 f0       	breq	.+30     	; 0x1060 <countPulseASM+0x74>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:142
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
    1042:	80 81       	ld	r24, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:143
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
    1044:	86 23       	and	r24, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:144
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
    1046:	84 17       	cp	r24, r20
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:145
    breq .L10  ; ,   ;  64  branch  [length = 1]
    1048:	91 f3       	breq	.-28     	; 0x102e <countPulseASM+0x42>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:151
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
    104a:	6c 2d       	mov	r22, r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:152
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
    104c:	7d 2d       	mov	r23, r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:153
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
    104e:	8e 2d       	mov	r24, r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:154
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
    1050:	9f 2d       	mov	r25, r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:157
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
    1052:	1f 91       	pop	r17
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:158
    pop r16  ;   ;  172 popqi [length = 1]
    1054:	0f 91       	pop	r16
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:159
    pop r15  ;   ;  173 popqi [length = 1]
    1056:	ff 90       	pop	r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:160
    pop r14  ;   ;  174 popqi [length = 1]
    1058:	ef 90       	pop	r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:161
    pop r13  ;   ;  175 popqi [length = 1]
    105a:	df 90       	pop	r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:162
    pop r12  ;   ;  176 popqi [length = 1]
    105c:	cf 90       	pop	r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:163
    ret  ;  177 return_from_epilogue  [length = 1]
    105e:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:166
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
    1060:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:167
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
    1062:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:168
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
    1064:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:169
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
    1066:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:172
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
    1068:	1f 91       	pop	r17
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:173
    pop r16  ;   ;  139 popqi [length = 1]
    106a:	0f 91       	pop	r16
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:174
    pop r15  ;   ;  140 popqi [length = 1]
    106c:	ff 90       	pop	r15
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:175
    pop r14  ;   ;  141 popqi [length = 1]
    106e:	ef 90       	pop	r14
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:176
    pop r13  ;   ;  142 popqi [length = 1]
    1070:	df 90       	pop	r13
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:177
    pop r12  ;   ;  143 popqi [length = 1]
    1072:	cf 90       	pop	r12
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_pulse.S:178
    ret  ;  144 return_from_epilogue  [length = 1]
    1074:	08 95       	ret

00001076 <main>:
main():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	00 d0       	rcall	.+0      	; 0x107c <main+0x6>
    107c:	00 d0       	rcall	.+0      	; 0x107e <main+0x8>
    107e:	00 d0       	rcall	.+0      	; 0x1080 <main+0xa>
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
init():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    1084:	78 94       	sei
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    1086:	84 b5       	in	r24, 0x24	; 36
    1088:	83 60       	ori	r24, 0x03	; 3
    108a:	84 bd       	out	0x24, r24	; 36
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    108c:	85 b5       	in	r24, 0x25	; 37
    108e:	83 60       	ori	r24, 0x03	; 3
    1090:	85 bd       	out	0x25, r24	; 37
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    1092:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    1096:	81 60       	ori	r24, 0x01	; 1
    1098:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    109c:	32 e0       	ldi	r19, 0x02	; 2
    109e:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    10a2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    10a6:	81 60       	ori	r24, 0x01	; 1
    10a8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    10ac:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    10b0:	81 60       	ori	r24, 0x01	; 1
    10b2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    10b6:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    10ba:	84 60       	ori	r24, 0x04	; 4
    10bc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    10c0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    10c4:	81 60       	ori	r24, 0x01	; 1
    10c6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    10ca:	86 e8       	ldi	r24, 0x86	; 134
    10cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    10d0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
Begin():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:78
	byte segA, byte segB, byte segC, byte segD, byte segE, byte segF, byte segG,
	byte segDP,
	byte segCol, byte segApos)
{
  //Bring all the variables in from the caller
  numberOfDigits = numOfDigits;
    10d4:	24 e0       	ldi	r18, 0x04	; 4
    10d6:	20 93 fe 01 	sts	0x01FE, r18	; 0x8001fe <display1+0x15>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:79
  digit1 = dig1;
    10da:	b8 e0       	ldi	r27, 0x08	; 8
    10dc:	b0 93 ee 01 	sts	0x01EE, r27	; 0x8001ee <display1+0x5>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:80
  digit2 = dig2;
    10e0:	a9 e0       	ldi	r26, 0x09	; 9
    10e2:	a0 93 ef 01 	sts	0x01EF, r26	; 0x8001ef <display1+0x6>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:81
  digit3 = dig3;
    10e6:	fa e0       	ldi	r31, 0x0A	; 10
    10e8:	f0 93 f0 01 	sts	0x01F0, r31	; 0x8001f0 <display1+0x7>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:82
  digit4 = dig4;
    10ec:	eb e0       	ldi	r30, 0x0B	; 11
    10ee:	e0 93 f1 01 	sts	0x01F1, r30	; 0x8001f1 <display1+0x8>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:83
  digitApostrophe = digitApos;
    10f2:	9f ef       	ldi	r25, 0xFF	; 255
    10f4:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <display1+0x9>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:84
  digitColon = digitCol;
    10f8:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <display1+0xa>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:85
  segmentA = segA;
    10fc:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <display1+0xd>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:86
  segmentB = segB;
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <display1+0xe>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:87
  segmentC = segC;
    1106:	30 93 f8 01 	sts	0x01F8, r19	; 0x8001f8 <display1+0xf>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:88
  segmentD = segD;
    110a:	73 e0       	ldi	r23, 0x03	; 3
    110c:	70 93 f9 01 	sts	0x01F9, r23	; 0x8001f9 <display1+0x10>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:89
  segmentE = segE;
    1110:	20 93 fa 01 	sts	0x01FA, r18	; 0x8001fa <display1+0x11>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:90
  segmentF = segF;
    1114:	65 e0       	ldi	r22, 0x05	; 5
    1116:	60 93 fb 01 	sts	0x01FB, r22	; 0x8001fb <display1+0x12>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:91
  segmentG = segG;
    111a:	56 e0       	ldi	r21, 0x06	; 6
    111c:	50 93 fc 01 	sts	0x01FC, r21	; 0x8001fc <display1+0x13>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:92
  segmentDP = segDP;
    1120:	47 e0       	ldi	r20, 0x07	; 7
    1122:	40 93 fd 01 	sts	0x01FD, r20	; 0x8001fd <display1+0x14>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:93
  segmentApostrophe = segApos;
    1126:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <display1+0xb>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:94
  segmentColon = segCol;
    112a:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <display1+0xc>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:98

  //Assign input values to variables
  //mode is what the digit pins must be set at for it to be turned on. 0 for common cathode, 1 for common anode
  mode = mode_in;
    112e:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <display1>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:108
    SegOn = LOW;
    SegOff = HIGH;
  }
  else
  {
    DigitOn = LOW;
    1132:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <display1+0x1>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:109
    DigitOff = HIGH;
    1136:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <display1+0x2>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:110
    SegOn = HIGH;
    113a:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <display1+0x3>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:111
    SegOff = LOW;
    113e:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <display1+0x4>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:114
  }

  DigitPins[0] = digit1;
    1142:	b0 93 01 02 	sts	0x0201, r27	; 0x800201 <display1+0x18>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:115
  DigitPins[1] = digit2;
    1146:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <display1+0x19>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:116
  DigitPins[2] = digit3;
    114a:	f0 93 03 02 	sts	0x0203, r31	; 0x800203 <display1+0x1a>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:117
  DigitPins[3] = digit4;
    114e:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <display1+0x1b>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:118
  SegmentPins[0] = segmentA;
    1152:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <display1+0x1c>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:119
  SegmentPins[1] = segmentB;
    1156:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <display1+0x1d>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:120
  SegmentPins[2] = segmentC;
    115a:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <display1+0x1e>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:121
  SegmentPins[3] = segmentD;
    115e:	70 93 08 02 	sts	0x0208, r23	; 0x800208 <display1+0x1f>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:122
  SegmentPins[4] = segmentE;
    1162:	20 93 09 02 	sts	0x0209, r18	; 0x800209 <display1+0x20>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:123
  SegmentPins[5] = segmentF;
    1166:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <display1+0x21>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:124
  SegmentPins[6] = segmentG;
    116a:	50 93 0b 02 	sts	0x020B, r21	; 0x80020b <display1+0x22>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:125
  SegmentPins[7] = segmentDP;
    116e:	40 93 0c 02 	sts	0x020C, r20	; 0x80020c <display1+0x23>
main():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:129

  //Turn everything Off before setting pin as output
  //Set all digit pins off. Low for common anode, high for common cathode
  for (byte digit = 0 ; digit < numberOfDigits ; digit++)
    1172:	10 e0       	ldi	r17, 0x00	; 0
Begin():
    1174:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <display1+0x15>
    1178:	18 17       	cp	r17, r24
    117a:	98 f4       	brcc	.+38     	; 0x11a2 <main+0x12c>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:131
  {
    digitalWrite(DigitPins[digit], DigitOff);
    117c:	81 2f       	mov	r24, r17
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	9c 01       	movw	r18, r24
    1182:	27 51       	subi	r18, 0x17	; 23
    1184:	3e 4f       	sbci	r19, 0xFE	; 254
    1186:	79 01       	movw	r14, r18
    1188:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <display1+0x2>
    118c:	f9 01       	movw	r30, r18
    118e:	80 8d       	ldd	r24, Z+24	; 0x18
    1190:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:132
    pinMode(DigitPins[digit], OUTPUT);
    1194:	61 e0       	ldi	r22, 0x01	; 1
    1196:	f7 01       	movw	r30, r14
    1198:	80 8d       	ldd	r24, Z+24	; 0x18
    119a:	0e 94 28 01 	call	0x250	; 0x250 <pinMode>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:129
  SegmentPins[6] = segmentG;
  SegmentPins[7] = segmentDP;

  //Turn everything Off before setting pin as output
  //Set all digit pins off. Low for common anode, high for common cathode
  for (byte digit = 0 ; digit < numberOfDigits ; digit++)
    119e:	1f 5f       	subi	r17, 0xFF	; 255
    11a0:	e9 cf       	rjmp	.-46     	; 0x1174 <main+0xfe>
    11a2:	09 ee       	ldi	r16, 0xE9	; 233
    11a4:	11 e0       	ldi	r17, 0x01	; 1
    11a6:	71 ef       	ldi	r23, 0xF1	; 241
    11a8:	e7 2e       	mov	r14, r23
    11aa:	71 e0       	ldi	r23, 0x01	; 1
    11ac:	f7 2e       	mov	r15, r23
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:137
    pinMode(DigitPins[digit], OUTPUT);
  }
  //Set all segment pins off. High for common anode, low for common cathode
  for (byte seg = 0 ; seg < 8 ; seg++)
  {
    digitalWrite(SegmentPins[seg], SegOff);
    11ae:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <display1+0x4>
    11b2:	f8 01       	movw	r30, r16
    11b4:	84 8d       	ldd	r24, Z+28	; 0x1c
    11b6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:138
    pinMode(SegmentPins[seg], OUTPUT);
    11ba:	61 e0       	ldi	r22, 0x01	; 1
    11bc:	f8 01       	movw	r30, r16
    11be:	84 8d       	ldd	r24, Z+28	; 0x1c
    11c0:	0e 94 28 01 	call	0x250	; 0x250 <pinMode>
    11c4:	0f 5f       	subi	r16, 0xFF	; 255
    11c6:	1f 4f       	sbci	r17, 0xFF	; 255
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:135
  {
    digitalWrite(DigitPins[digit], DigitOff);
    pinMode(DigitPins[digit], OUTPUT);
  }
  //Set all segment pins off. High for common anode, low for common cathode
  for (byte seg = 0 ; seg < 8 ; seg++)
    11c8:	e0 16       	cp	r14, r16
    11ca:	f1 06       	cpc	r15, r17
    11cc:	81 f7       	brne	.-32     	; 0x11ae <main+0x138>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:141
  {
    digitalWrite(SegmentPins[seg], SegOff);
    pinMode(SegmentPins[seg], OUTPUT);
  }

  if (digitColon != 255)
    11ce:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <display1+0xa>
    11d2:	8f 3f       	cpi	r24, 0xFF	; 255
    11d4:	a1 f0       	breq	.+40     	; 0x11fe <main+0x188>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:143
  {
	digitalWrite(digitColon, DigitOff);
    11d6:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <display1+0x2>
    11da:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:144
	pinMode(digitColon, OUTPUT);
    11de:	61 e0       	ldi	r22, 0x01	; 1
    11e0:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <display1+0xa>
    11e4:	0e 94 28 01 	call	0x250	; 0x250 <pinMode>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:145
	digitalWrite(segmentColon, SegOff);
    11e8:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <display1+0x4>
    11ec:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <display1+0xc>
    11f0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:146
	pinMode(segmentColon, OUTPUT);
    11f4:	61 e0       	ldi	r22, 0x01	; 1
    11f6:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <display1+0xc>
    11fa:	0e 94 28 01 	call	0x250	; 0x250 <pinMode>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:148
  }
  if (digitApostrophe != 255)
    11fe:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <display1+0x9>
    1202:	8f 3f       	cpi	r24, 0xFF	; 255
    1204:	a1 f0       	breq	.+40     	; 0x122e <main+0x1b8>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:150
  {
	digitalWrite(digitApostrophe, DigitOff);
    1206:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <display1+0x2>
    120a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:151
	pinMode(digitApostrophe, OUTPUT);
    120e:	61 e0       	ldi	r22, 0x01	; 1
    1210:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <display1+0x9>
    1214:	0e 94 28 01 	call	0x250	; 0x250 <pinMode>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:152
	digitalWrite(segmentApostrophe, SegOff);
    1218:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <display1+0x4>
    121c:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <display1+0xb>
    1220:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:153
	pinMode(segmentApostrophe, OUTPUT);
    1224:	61 e0       	ldi	r22, 0x01	; 1
    1226:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <display1+0xb>
    122a:	0e 94 28 01 	call	0x250	; 0x250 <pinMode>
SetBrightness():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:179
//We need to error check and map the incoming value
void SevSeg::SetBrightness(byte percentBright)
{
	//Error check and scale brightnessLevel
	if(percentBright > 100) percentBright = 100;
	brightnessDelay = map(percentBright, 0, 100, 0, FRAMEPERIOD); //map brightnessDelay to 0 to the max which is framePeriod
    122e:	80 ed       	ldi	r24, 0xD0	; 208
    1230:	97 e0       	ldi	r25, 0x07	; 7
    1232:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <display1+0x17>
    1236:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <display1+0x16>
setup():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:131

void setup() {
//setup 7Seg Display
setupDisplay();
//Setup Inputs
setIN(ok);
    123a:	8c e0       	ldi	r24, 0x0C	; 12
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <setIN(int)>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:132
setIN(plus);
    1242:	82 e1       	ldi	r24, 0x12	; 18
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	0e 94 71 04 	call	0x8e2	; 0x8e2 <setIN(int)>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:133
setIN(minus);
    124a:	83 e1       	ldi	r24, 0x13	; 19
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <setIN(int)>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:134
setIN(inVolt);
    1252:	8e e0       	ldi	r24, 0x0E	; 14
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 71 04 	call	0x8e2	; 0x8e2 <setIN(int)>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:135
setIN(outVolt);
    125a:	8f e0       	ldi	r24, 0x0F	; 15
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <setIN(int)>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:136
setIN(current);
    1262:	80 e1       	ldi	r24, 0x10	; 16
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 71 04 	call	0x8e2	; 0x8e2 <setIN(int)>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:137
setIN(hz);
    126a:	81 e1       	ldi	r24, 0x11	; 17
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <setIN(int)>
setOUT():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:659
}

//Setup Outputs

void setOUT(int PIN) {
  pinMode(PIN, OUTPUT);
    1272:	61 e0       	ldi	r22, 0x01	; 1
    1274:	84 e1       	ldi	r24, 0x14	; 20
    1276:	0e 94 28 01 	call	0x250	; 0x250 <pinMode>
    127a:	61 e0       	ldi	r22, 0x01	; 1
    127c:	85 e1       	ldi	r24, 0x15	; 21
    127e:	0e 94 28 01 	call	0x250	; 0x250 <pinMode>
    1282:	61 e0       	ldi	r22, 0x01	; 1
    1284:	8d e0       	ldi	r24, 0x0D	; 13
    1286:	0e 94 28 01 	call	0x250	; 0x250 <pinMode>
setup():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:167
*/

//uncomment these variables while testing in proteus
//comment when programming Arduino/MCU
/**/
IHV = 560;
    128a:	80 e3       	ldi	r24, 0x30	; 48
    128c:	92 e0       	ldi	r25, 0x02	; 2
    128e:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <IHV+0x1>
    1292:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <IHV>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:168
ILV = 480;
    1296:	80 ee       	ldi	r24, 0xE0	; 224
    1298:	91 e0       	ldi	r25, 0x01	; 1
    129a:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <ILV+0x1>
    129e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <ILV>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:169
OHV = 580;
    12a2:	84 e4       	ldi	r24, 0x44	; 68
    12a4:	92 e0       	ldi	r25, 0x02	; 2
    12a6:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <OHV+0x1>
    12aa:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <OHV>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:170
OLV = 420;
    12ae:	84 ea       	ldi	r24, 0xA4	; 164
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <OLV+0x1>
    12b6:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <OLV>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:171
SETV = 512;
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	92 e0       	ldi	r25, 0x02	; 2
    12be:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <SETV+0x1>
    12c2:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <SETV>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:172
OVL = 800;
    12c6:	80 e2       	ldi	r24, 0x20	; 32
    12c8:	93 e0       	ldi	r25, 0x03	; 3
    12ca:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <OVL+0x1>
    12ce:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <OVL>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:173
TON = 3;
    12d2:	83 e0       	ldi	r24, 0x03	; 3
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <TON+0x1>
    12da:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <TON>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:174
TOFF = 0;
    12de:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <TOFF+0x1>
    12e2:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <TOFF>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:175
DIFF = 5;
    12e6:	85 e0       	ldi	r24, 0x05	; 5
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <DIFF+0x1>
    12ee:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <DIFF>
initDuration():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:503
            break;
        case MILLISECONDS:
            duration.millis = time;
            break;
        case SECONDS:
            duration.seconds = time;
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	a0 e4       	ldi	r26, 0x40	; 64
    12f8:	b0 e4       	ldi	r27, 0x40	; 64
    12fa:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <on+0x15>
    12fe:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <on+0x16>
    1302:	a0 93 d4 01 	sts	0x01D4, r26	; 0x8001d4 <on+0x17>
    1306:	b0 93 d5 01 	sts	0x01D5, r27	; 0x8001d5 <on+0x18>
setDuration():
    130a:	8d eb       	ldi	r24, 0xBD	; 189
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	0e 94 b4 03 	call	0x768	; 0x768 <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
initDuration():
    1312:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <off+0x15>
    1316:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <off+0x16>
    131a:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <off+0x17>
    131e:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <off+0x18>
setDuration():
    1322:	8c e9       	ldi	r24, 0x9C	; 156
    1324:	91 e0       	ldi	r25, 0x01	; 1
    1326:	0e 94 b4 03 	call	0x768	; 0x768 <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
setup():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:182

//Setup Timers (BlockNot Lib)

on.setDuration(TON, SECONDS);
off.setDuration(TOFF, SECONDS);
on.reset();
    132a:	8d eb       	ldi	r24, 0xBD	; 189
    132c:	91 e0       	ldi	r25, 0x01	; 1
    132e:	0e 94 24 03 	call	0x648	; 0x648 <BlockNot::reset(unsigned long) [clone .constprop.16]>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:183
off.reset();
    1332:	8c e9       	ldi	r24, 0x9C	; 156
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	0e 94 24 03 	call	0x648	; 0x648 <BlockNot::reset(unsigned long) [clone .constprop.16]>
checkok():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:545
}

//Check OK Button Pressed

void checkok() {
  if(read(ok) && okold == !read(ok)){
    133a:	bb 24       	eor	r11, r11
    133c:	b3 94       	inc	r11
main():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    133e:	50 e0       	ldi	r21, 0x00	; 0
    1340:	e5 2e       	mov	r14, r21
    1342:	50 e0       	ldi	r21, 0x00	; 0
    1344:	f5 2e       	mov	r15, r21
checkok():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:545
    1346:	aa 24       	eor	r10, r10
    1348:	a3 94       	inc	r10
runSetup():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:538
  }
  if(encMenu > 9) {
    encMenu = 0;
  }
  if(encMenu < 0) {
    encMenu = 9;
    134a:	69 e0       	ldi	r22, 0x09	; 9
    134c:	c6 2e       	mov	r12, r22
    134e:	d1 2c       	mov	r13, r1
checkok():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:545
}

//Check OK Button Pressed

void checkok() {
  if(read(ok) && okold == !read(ok)){
    1350:	8c e0       	ldi	r24, 0x0C	; 12
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 4d 04 	call	0x89a	; 0x89a <read(int)>
    1358:	88 23       	and	r24, r24
    135a:	09 f4       	brne	.+2      	; 0x135e <main+0x2e8>
    135c:	9b c0       	rjmp	.+310    	; 0x1494 <main+0x41e>
    135e:	8c e0       	ldi	r24, 0x0C	; 12
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	0e 94 4d 04 	call	0x89a	; 0x89a <read(int)>
    1366:	8b 25       	eor	r24, r11
    1368:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <okold>
    136c:	89 13       	cpse	r24, r25
    136e:	92 c0       	rjmp	.+292    	; 0x1494 <main+0x41e>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:546
  okold = read(ok);
    1370:	8c e0       	ldi	r24, 0x0C	; 12
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	0e 94 4d 04 	call	0x89a	; 0x89a <read(int)>
    1378:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <okold>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:547
  encMenu++;
    137c:	00 91 e0 01 	lds	r16, 0x01E0	; 0x8001e0 <encMenu>
    1380:	10 91 e1 01 	lds	r17, 0x01E1	; 0x8001e1 <encMenu+0x1>
    1384:	0f 5f       	subi	r16, 0xFF	; 255
    1386:	1f 4f       	sbci	r17, 0xFF	; 255
    1388:	10 93 e1 01 	sts	0x01E1, r17	; 0x8001e1 <encMenu+0x1>
    138c:	00 93 e0 01 	sts	0x01E0, r16	; 0x8001e0 <encMenu>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:548
  refresh.reset();
    1390:	8b e7       	ldi	r24, 0x7B	; 123
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	0e 94 24 03 	call	0x648	; 0x648 <BlockNot::reset(unsigned long) [clone .constprop.16]>
encUpdate():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:574
}

//Update Parameters on Menu Change

void encUpdate() {
  if(encMenu == 0) {
    1398:	01 15       	cp	r16, r1
    139a:	11 05       	cpc	r17, r1
    139c:	09 f0       	breq	.+2      	; 0x13a0 <main+0x32a>
    139e:	c9 c1       	rjmp	.+914    	; 0x1732 <main+0x6bc>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:575
    DIFF = enc;
    13a0:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <enc>
    13a4:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <enc+0x1>
    13a8:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <DIFF+0x1>
    13ac:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <DIFF>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:592
    }
  if(encMenu == 4) {
    OHV = enc;
    enc = OLV;
    }
  if(encMenu == 5) {
    13b0:	05 30       	cpi	r16, 0x05	; 5
    13b2:	11 05       	cpc	r17, r1
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <main+0x342>
    13b6:	dc c1       	rjmp	.+952    	; 0x1770 <main+0x6fa>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:593
    OLV = enc;
    13b8:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <enc>
    13bc:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <enc+0x1>
    13c0:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <OLV+0x1>
    13c4:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <OLV>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:594
    enc = SETV;
    13c8:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <SETV>
    13cc:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <SETV+0x1>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:602
    SETV = enc;
    enc = OVL;
    }
  if(encMenu == 7) {
    OVL = enc;
    enc = TON;
    13d0:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <enc+0x1>
    13d4:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <enc>
eepromUpdate():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:560
}

//Save Parameters to MCU EEPROM Memory (only if changed)

void eepromUpdate() {
  EEPROM.update(0, IHV/2);
    13d8:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <IHV>
    13dc:	70 91 75 01 	lds	r23, 0x0175	; 0x800175 <IHV+0x1>
    13e0:	77 ff       	sbrs	r23, 7
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <main+0x372>
    13e4:	6f 5f       	subi	r22, 0xFF	; 255
    13e6:	7f 4f       	sbci	r23, 0xFF	; 255
    13e8:	75 95       	asr	r23
    13ea:	67 95       	ror	r22
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <EEPROMClass::update(int, unsigned char) [clone .isra.1]>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:561
  EEPROM.update(1, ILV/2);
    13f4:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <ILV>
    13f8:	70 91 73 01 	lds	r23, 0x0173	; 0x800173 <ILV+0x1>
    13fc:	77 ff       	sbrs	r23, 7
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <main+0x38e>
    1400:	6f 5f       	subi	r22, 0xFF	; 255
    1402:	7f 4f       	sbci	r23, 0xFF	; 255
    1404:	75 95       	asr	r23
    1406:	67 95       	ror	r22
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <EEPROMClass::update(int, unsigned char) [clone .isra.1]>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:562
  EEPROM.update(2, OHV/2);
    1410:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <OHV>
    1414:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <OHV+0x1>
    1418:	77 ff       	sbrs	r23, 7
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <main+0x3aa>
    141c:	6f 5f       	subi	r22, 0xFF	; 255
    141e:	7f 4f       	sbci	r23, 0xFF	; 255
    1420:	75 95       	asr	r23
    1422:	67 95       	ror	r22
    1424:	82 e0       	ldi	r24, 0x02	; 2
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <EEPROMClass::update(int, unsigned char) [clone .isra.1]>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:563
  EEPROM.update(3, OLV/2);
    142c:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <OLV>
    1430:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <OLV+0x1>
    1434:	77 ff       	sbrs	r23, 7
    1436:	02 c0       	rjmp	.+4      	; 0x143c <main+0x3c6>
    1438:	6f 5f       	subi	r22, 0xFF	; 255
    143a:	7f 4f       	sbci	r23, 0xFF	; 255
    143c:	75 95       	asr	r23
    143e:	67 95       	ror	r22
    1440:	83 e0       	ldi	r24, 0x03	; 3
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <EEPROMClass::update(int, unsigned char) [clone .isra.1]>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:564
  EEPROM.update(4, SETV/2);
    1448:	60 91 de 01 	lds	r22, 0x01DE	; 0x8001de <SETV>
    144c:	70 91 df 01 	lds	r23, 0x01DF	; 0x8001df <SETV+0x1>
    1450:	77 ff       	sbrs	r23, 7
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <main+0x3e2>
    1454:	6f 5f       	subi	r22, 0xFF	; 255
    1456:	7f 4f       	sbci	r23, 0xFF	; 255
    1458:	75 95       	asr	r23
    145a:	67 95       	ror	r22
    145c:	84 e0       	ldi	r24, 0x04	; 4
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <EEPROMClass::update(int, unsigned char) [clone .isra.1]>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:565
  EEPROM.update(5, OVL);
    1464:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <OVL>
    1468:	85 e0       	ldi	r24, 0x05	; 5
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <EEPROMClass::update(int, unsigned char) [clone .isra.1]>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:566
  EEPROM.update(6, TON);
    1470:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <TON>
    1474:	86 e0       	ldi	r24, 0x06	; 6
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <EEPROMClass::update(int, unsigned char) [clone .isra.1]>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:567
  EEPROM.update(7, TOFF);
    147c:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <TOFF>
    1480:	87 e0       	ldi	r24, 0x07	; 7
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <EEPROMClass::update(int, unsigned char) [clone .isra.1]>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:568
  EEPROM.update(8, DIFF);
    1488:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <DIFF>
    148c:	88 e0       	ldi	r24, 0x08	; 8
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <EEPROMClass::update(int, unsigned char) [clone .isra.1]>
checkok():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:552
  encMenu++;
  refresh.reset();
  encUpdate();
  eepromUpdate();
  }
  if(read(ok) == false){
    1494:	8c e0       	ldi	r24, 0x0C	; 12
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 4d 04 	call	0x89a	; 0x89a <read(int)>
    149c:	81 11       	cpse	r24, r1
    149e:	06 c0       	rjmp	.+12     	; 0x14ac <main+0x436>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:553
  okold = read(ok);
    14a0:	8c e0       	ldi	r24, 0x0C	; 12
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 4d 04 	call	0x89a	; 0x89a <read(int)>
    14a8:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <okold>
checkplus():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:629
}

//Check Plus Button Pressed

void checkplus() {
  if(read(plus) && plusold == !read(plus)){
    14ac:	82 e1       	ldi	r24, 0x12	; 18
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	0e 94 4d 04 	call	0x89a	; 0x89a <read(int)>
    14b4:	88 23       	and	r24, r24
    14b6:	c1 f0       	breq	.+48     	; 0x14e8 <main+0x472>
    14b8:	82 e1       	ldi	r24, 0x12	; 18
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	0e 94 4d 04 	call	0x89a	; 0x89a <read(int)>
    14c0:	8b 25       	eor	r24, r11
    14c2:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <plusold>
    14c6:	89 13       	cpse	r24, r25
    14c8:	0f c0       	rjmp	.+30     	; 0x14e8 <main+0x472>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:630
  plusold = read(plus);
    14ca:	82 e1       	ldi	r24, 0x12	; 18
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 94 4d 04 	call	0x89a	; 0x89a <read(int)>
    14d2:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <plusold>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:631
  enc++;
    14d6:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <enc>
    14da:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <enc+0x1>
    14de:	01 96       	adiw	r24, 0x01	; 1
    14e0:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <enc+0x1>
    14e4:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <enc>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:633
  }
  if(read(plus) == false){
    14e8:	82 e1       	ldi	r24, 0x12	; 18
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 4d 04 	call	0x89a	; 0x89a <read(int)>
    14f0:	81 11       	cpse	r24, r1
    14f2:	06 c0       	rjmp	.+12     	; 0x1500 <main+0x48a>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:634
  plusold = read(plus);
    14f4:	82 e1       	ldi	r24, 0x12	; 18
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	0e 94 4d 04 	call	0x89a	; 0x89a <read(int)>
    14fc:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <plusold>
checkminus():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:641
}

//Check Minus Button Pressed

void checkminus() {
  if(read(minus) && minusold == !read(minus)){
    1500:	83 e1       	ldi	r24, 0x13	; 19
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	0e 94 4d 04 	call	0x89a	; 0x89a <read(int)>
    1508:	88 23       	and	r24, r24
    150a:	c1 f0       	breq	.+48     	; 0x153c <main+0x4c6>
    150c:	83 e1       	ldi	r24, 0x13	; 19
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0e 94 4d 04 	call	0x89a	; 0x89a <read(int)>
    1514:	8b 25       	eor	r24, r11
    1516:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <minusold>
    151a:	89 13       	cpse	r24, r25
    151c:	0f c0       	rjmp	.+30     	; 0x153c <main+0x4c6>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:642
  minusold = read(minus);
    151e:	83 e1       	ldi	r24, 0x13	; 19
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	0e 94 4d 04 	call	0x89a	; 0x89a <read(int)>
    1526:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <minusold>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:643
  enc--;
    152a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <enc>
    152e:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <enc+0x1>
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <enc+0x1>
    1538:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <enc>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:645
  }
  if(read(minus) == false){
    153c:	83 e1       	ldi	r24, 0x13	; 19
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 4d 04 	call	0x89a	; 0x89a <read(int)>
    1544:	81 11       	cpse	r24, r1
    1546:	06 c0       	rjmp	.+12     	; 0x1554 <main+0x4de>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:646
  minusold = read(minus);
    1548:	83 e1       	ldi	r24, 0x13	; 19
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 4d 04 	call	0x89a	; 0x89a <read(int)>
    1550:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <minusold>
loop():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:205
  }
*/

  //Switch to Parameter Edit/Run Mode
  /* Uncomment this for not using setup Pin*/
  if(mode){
    1554:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <mode>
    1558:	88 23       	and	r24, r24
    155a:	09 f4       	brne	.+2      	; 0x155e <main+0x4e8>
    155c:	3b c2       	rjmp	.+1142   	; 0x19d4 <main+0x95e>
runSetup():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:504
}

//Change Screens/Menus on pessing OK/Menu

void runSetup() {
  if(encMenu == 0) {
    155e:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <encMenu>
    1562:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <encMenu+0x1>
home():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:408
}

//Setp display on Setup Mode

void home() {
  display("SETP", 0);
    1566:	62 e3       	ldi	r22, 0x32	; 50
    1568:	71 e0       	ldi	r23, 0x01	; 1
runSetup():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:504
}

//Change Screens/Menus on pessing OK/Menu

void runSetup() {
  if(encMenu == 0) {
    156a:	00 97       	sbiw	r24, 0x00	; 0
    156c:	09 f4       	brne	.+2      	; 0x1570 <main+0x4fa>
    156e:	9b c1       	rjmp	.+822    	; 0x18a6 <main+0x830>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:507
    home();
  }
  if(encMenu == 1) {
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	61 f4       	brne	.+24     	; 0x158c <main+0x516>
menuIHV():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:414
}

//Setup Input High Voltage

void menuIHV() {
  if(refresh.triggered(false)){
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	8b e7       	ldi	r24, 0x7B	; 123
    1578:	91 e0       	ldi	r25, 0x01	; 1
    157a:	0e 94 02 04 	call	0x804	; 0x804 <BlockNot::triggered(bool)>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:417
    displayVar(enc, 0);
  } else {
    display("IHu", 0);
    157e:	67 e3       	ldi	r22, 0x37	; 55
    1580:	71 e0       	ldi	r23, 0x01	; 1
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:414
}

//Setup Input High Voltage

void menuIHV() {
  if(refresh.triggered(false)){
    1582:	88 23       	and	r24, r24
    1584:	09 f4       	brne	.+2      	; 0x1588 <main+0x512>
    1586:	8f c1       	rjmp	.+798    	; 0x18a6 <main+0x830>
    1588:	0e 94 03 05 	call	0xa06	; 0xa06 <menuIHV() [clone .part.10]>
runSetup():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:510
    home();
  }
  if(encMenu == 1) {
    menuIHV();
  }
  if(encMenu == 2) {
    158c:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <encMenu>
    1590:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <encMenu+0x1>
    1594:	02 97       	sbiw	r24, 0x02	; 2
    1596:	51 f4       	brne	.+20     	; 0x15ac <main+0x536>
menuILV():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:424
}

//Setup Input low Voltage

void menuILV() {
  if(refresh.triggered(false)){
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	8b e7       	ldi	r24, 0x7B	; 123
    159c:	91 e0       	ldi	r25, 0x01	; 1
    159e:	0e 94 02 04 	call	0x804	; 0x804 <BlockNot::triggered(bool)>
    15a2:	88 23       	and	r24, r24
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <main+0x532>
    15a6:	8e c1       	rjmp	.+796    	; 0x18c4 <main+0x84e>
    15a8:	0e 94 03 05 	call	0xa06	; 0xa06 <menuIHV() [clone .part.10]>
runSetup():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:513
    menuIHV();
  }
  if(encMenu == 2) {
    menuILV();
  }
  if(encMenu == 3) {
    15ac:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <encMenu>
    15b0:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <encMenu+0x1>
    15b4:	03 97       	sbiw	r24, 0x03	; 3
    15b6:	51 f4       	brne	.+20     	; 0x15cc <main+0x556>
menuOHV():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:434
}

//Setup Output High Voltage

void menuOHV() {
  if(refresh.triggered(false)){
    15b8:	60 e0       	ldi	r22, 0x00	; 0
    15ba:	8b e7       	ldi	r24, 0x7B	; 123
    15bc:	91 e0       	ldi	r25, 0x01	; 1
    15be:	0e 94 02 04 	call	0x804	; 0x804 <BlockNot::triggered(bool)>
    15c2:	88 23       	and	r24, r24
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <main+0x552>
    15c6:	8f c1       	rjmp	.+798    	; 0x18e6 <main+0x870>
    15c8:	0e 94 03 05 	call	0xa06	; 0xa06 <menuIHV() [clone .part.10]>
runSetup():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:516
    menuILV();
  }
  if(encMenu == 3) {
    menuOHV();
  }
  if(encMenu == 4) {
    15cc:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <encMenu>
    15d0:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <encMenu+0x1>
    15d4:	04 97       	sbiw	r24, 0x04	; 4
    15d6:	51 f4       	brne	.+20     	; 0x15ec <main+0x576>
menuOLV():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:444
}

//Setup Output Low Voltage

void menuOLV() {
  if(refresh.triggered(false)){
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	8b e7       	ldi	r24, 0x7B	; 123
    15dc:	91 e0       	ldi	r25, 0x01	; 1
    15de:	0e 94 02 04 	call	0x804	; 0x804 <BlockNot::triggered(bool)>
    15e2:	88 23       	and	r24, r24
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <main+0x572>
    15e6:	90 c1       	rjmp	.+800    	; 0x1908 <main+0x892>
    15e8:	0e 94 03 05 	call	0xa06	; 0xa06 <menuIHV() [clone .part.10]>
runSetup():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:519
    menuOHV();
  }
  if(encMenu == 4) {
    menuOLV();
  }
  if(encMenu == 5) {
    15ec:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <encMenu>
    15f0:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <encMenu+0x1>
    15f4:	05 97       	sbiw	r24, 0x05	; 5
    15f6:	51 f4       	brne	.+20     	; 0x160c <main+0x596>
menuSETV():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:454
}

//Setup Set Voltage

void menuSETV() {
  if(refresh.triggered(false)){
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	8b e7       	ldi	r24, 0x7B	; 123
    15fc:	91 e0       	ldi	r25, 0x01	; 1
    15fe:	0e 94 02 04 	call	0x804	; 0x804 <BlockNot::triggered(bool)>
    1602:	88 23       	and	r24, r24
    1604:	09 f4       	brne	.+2      	; 0x1608 <main+0x592>
    1606:	91 c1       	rjmp	.+802    	; 0x192a <main+0x8b4>
    1608:	0e 94 03 05 	call	0xa06	; 0xa06 <menuIHV() [clone .part.10]>
runSetup():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:522
    menuOLV();
  }
  if(encMenu == 5) {
    menuSETV();
  }
  if(encMenu == 6) {
    160c:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <encMenu>
    1610:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <encMenu+0x1>
    1614:	06 97       	sbiw	r24, 0x06	; 6
    1616:	51 f4       	brne	.+20     	; 0x162c <main+0x5b6>
menuOVL():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:464
}

//Setup Overload

void menuOVL() {
  if(refresh.triggered(false)){
    1618:	60 e0       	ldi	r22, 0x00	; 0
    161a:	8b e7       	ldi	r24, 0x7B	; 123
    161c:	91 e0       	ldi	r25, 0x01	; 1
    161e:	0e 94 02 04 	call	0x804	; 0x804 <BlockNot::triggered(bool)>
    1622:	88 23       	and	r24, r24
    1624:	09 f4       	brne	.+2      	; 0x1628 <main+0x5b2>
    1626:	92 c1       	rjmp	.+804    	; 0x194c <main+0x8d6>
    1628:	0e 94 03 05 	call	0xa06	; 0xa06 <menuIHV() [clone .part.10]>
runSetup():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:525
    menuSETV();
  }
  if(encMenu == 6) {
    menuOVL();
  }
  if(encMenu == 7) {
    162c:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <encMenu>
    1630:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <encMenu+0x1>
    1634:	07 97       	sbiw	r24, 0x07	; 7
    1636:	51 f4       	brne	.+20     	; 0x164c <main+0x5d6>
menuTON():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:474
}

//Setup Waiting time for Output Relay to turn on

void menuTON() {
  if(refresh.triggered(false)){
    1638:	60 e0       	ldi	r22, 0x00	; 0
    163a:	8b e7       	ldi	r24, 0x7B	; 123
    163c:	91 e0       	ldi	r25, 0x01	; 1
    163e:	0e 94 02 04 	call	0x804	; 0x804 <BlockNot::triggered(bool)>
    1642:	88 23       	and	r24, r24
    1644:	09 f4       	brne	.+2      	; 0x1648 <main+0x5d2>
    1646:	93 c1       	rjmp	.+806    	; 0x196e <main+0x8f8>
    1648:	0e 94 03 05 	call	0xa06	; 0xa06 <menuIHV() [clone .part.10]>
runSetup():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:528
    menuOVL();
  }
  if(encMenu == 7) {
    menuTON();
  }
  if(encMenu == 8) {
    164c:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <encMenu>
    1650:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <encMenu+0x1>
    1654:	08 97       	sbiw	r24, 0x08	; 8
    1656:	51 f4       	brne	.+20     	; 0x166c <main+0x5f6>
menuTOFF():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:484
}

//Setup Waiting time for Output Relay to turn off

void menuTOFF() {
  if(refresh.triggered(false)){
    1658:	60 e0       	ldi	r22, 0x00	; 0
    165a:	8b e7       	ldi	r24, 0x7B	; 123
    165c:	91 e0       	ldi	r25, 0x01	; 1
    165e:	0e 94 02 04 	call	0x804	; 0x804 <BlockNot::triggered(bool)>
    1662:	88 23       	and	r24, r24
    1664:	09 f4       	brne	.+2      	; 0x1668 <main+0x5f2>
    1666:	94 c1       	rjmp	.+808    	; 0x1990 <main+0x91a>
    1668:	0e 94 03 05 	call	0xa06	; 0xa06 <menuIHV() [clone .part.10]>
runSetup():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:531
    menuTON();
  }
  if(encMenu == 8) {
    menuTOFF();
  }
  if(encMenu == 9) {
    166c:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <encMenu>
    1670:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <encMenu+0x1>
    1674:	09 97       	sbiw	r24, 0x09	; 9
    1676:	51 f4       	brne	.+20     	; 0x168c <main+0x616>
menuDIFF():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:494
}

//setup voltage difference from set voltage to move motor

void menuDIFF() {
  if(refresh.triggered(false)){
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	8b e7       	ldi	r24, 0x7B	; 123
    167c:	91 e0       	ldi	r25, 0x01	; 1
    167e:	0e 94 02 04 	call	0x804	; 0x804 <BlockNot::triggered(bool)>
    1682:	88 23       	and	r24, r24
    1684:	09 f4       	brne	.+2      	; 0x1688 <main+0x612>
    1686:	95 c1       	rjmp	.+810    	; 0x19b2 <main+0x93c>
    1688:	0e 94 03 05 	call	0xa06	; 0xa06 <menuIHV() [clone .part.10]>
runSetup():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:534
    menuTOFF();
  }
  if(encMenu == 9) {
    menuDIFF();
  }
  if(encMenu > 9) {
    168c:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <encMenu>
    1690:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <encMenu+0x1>
    1694:	0a 97       	sbiw	r24, 0x0a	; 10
    1696:	24 f0       	brlt	.+8      	; 0x16a0 <main+0x62a>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:535
    encMenu = 0;
    1698:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <encMenu+0x1>
    169c:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <encMenu>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:537
  }
  if(encMenu < 0) {
    16a0:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <encMenu>
    16a4:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <encMenu+0x1>
    16a8:	97 ff       	sbrs	r25, 7
    16aa:	04 c0       	rjmp	.+8      	; 0x16b4 <main+0x63e>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:538
    encMenu = 9;
    16ac:	d0 92 e1 01 	sts	0x01E1, r13	; 0x8001e1 <encMenu+0x1>
    16b0:	c0 92 e0 01 	sts	0x01E0, r12	; 0x8001e0 <encMenu>
loop():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:210
  if(mode){
    runSetup();
  } else {
    runNormal();
  }
  if(read(ok) && read(plus) && read(minus) && switched == false){
    16b4:	8c e0       	ldi	r24, 0x0C	; 12
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	0e 94 4d 04 	call	0x89a	; 0x89a <read(int)>
    16bc:	88 23       	and	r24, r24
    16be:	d9 f0       	breq	.+54     	; 0x16f6 <main+0x680>
    16c0:	82 e1       	ldi	r24, 0x12	; 18
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 4d 04 	call	0x89a	; 0x89a <read(int)>
    16c8:	88 23       	and	r24, r24
    16ca:	a9 f0       	breq	.+42     	; 0x16f6 <main+0x680>
    16cc:	83 e1       	ldi	r24, 0x13	; 19
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	0e 94 4d 04 	call	0x89a	; 0x89a <read(int)>
    16d4:	88 23       	and	r24, r24
    16d6:	79 f0       	breq	.+30     	; 0x16f6 <main+0x680>
    16d8:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <switched>
    16dc:	81 11       	cpse	r24, r1
    16de:	0b c0       	rjmp	.+22     	; 0x16f6 <main+0x680>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:211
    mode = !mode;
    16e0:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <mode>
    16e4:	8b 25       	eor	r24, r11
    16e6:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <mode>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:212
    switched = true;
    16ea:	a0 92 e2 01 	sts	0x01E2, r10	; 0x8001e2 <switched>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:213
    encMenu = 0;
    16ee:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <encMenu+0x1>
    16f2:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <encMenu>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:215
  }
  if(!read(ok) && !read(plus) && !read(minus) && switched == true){
    16f6:	8c e0       	ldi	r24, 0x0C	; 12
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	0e 94 4d 04 	call	0x89a	; 0x89a <read(int)>
    16fe:	81 11       	cpse	r24, r1
    1700:	11 c0       	rjmp	.+34     	; 0x1724 <main+0x6ae>
    1702:	82 e1       	ldi	r24, 0x12	; 18
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 4d 04 	call	0x89a	; 0x89a <read(int)>
    170a:	81 11       	cpse	r24, r1
    170c:	0b c0       	rjmp	.+22     	; 0x1724 <main+0x6ae>
    170e:	83 e1       	ldi	r24, 0x13	; 19
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	0e 94 4d 04 	call	0x89a	; 0x89a <read(int)>
    1716:	81 11       	cpse	r24, r1
    1718:	05 c0       	rjmp	.+10     	; 0x1724 <main+0x6ae>
    171a:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <switched>
    171e:	81 11       	cpse	r24, r1
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:216
    switched = false;
    1720:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <switched>
main():
C:\Users\Admin\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    1724:	e1 14       	cp	r14, r1
    1726:	f1 04       	cpc	r15, r1
    1728:	09 f4       	brne	.+2      	; 0x172c <main+0x6b6>
    172a:	12 ce       	rjmp	.-988    	; 0x1350 <main+0x2da>
    172c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1730:	0f ce       	rjmp	.-994    	; 0x1350 <main+0x2da>
encUpdate():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:577

void encUpdate() {
  if(encMenu == 0) {
    DIFF = enc;
  }
  if(encMenu == 1) {
    1732:	01 30       	cpi	r16, 0x01	; 1
    1734:	11 05       	cpc	r17, r1
    1736:	49 f4       	brne	.+18     	; 0x174a <main+0x6d4>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:578
    enc = IHV;
    1738:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <IHV>
    173c:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <IHV+0x1>
    1740:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <enc+0x1>
    1744:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <enc>
    1748:	33 ce       	rjmp	.-922    	; 0x13b0 <main+0x33a>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:580
    }
  if(encMenu == 2) {
    174a:	02 30       	cpi	r16, 0x02	; 2
    174c:	11 05       	cpc	r17, r1
    174e:	01 f5       	brne	.+64     	; 0x1790 <main+0x71a>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:581
    IHV = enc;
    1750:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <enc>
    1754:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <enc+0x1>
    1758:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <IHV+0x1>
    175c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <IHV>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:582
    enc = ILV;
    1760:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <ILV>
    1764:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <ILV+0x1>
    1768:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <enc+0x1>
    176c:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <enc>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:596
    }
  if(encMenu == 5) {
    OLV = enc;
    enc = SETV;
    }
  if(encMenu == 6) {
    1770:	06 30       	cpi	r16, 0x06	; 6
    1772:	11 05       	cpc	r17, r1
    1774:	01 f5       	brne	.+64     	; 0x17b6 <main+0x740>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:597
    SETV = enc;
    1776:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <enc>
    177a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <enc+0x1>
    177e:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <SETV+0x1>
    1782:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <SETV>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:598
    enc = OVL;
    1786:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <OVL>
    178a:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <OVL+0x1>
    178e:	20 ce       	rjmp	.-960    	; 0x13d0 <main+0x35a>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:584
    }
  if(encMenu == 2) {
    IHV = enc;
    enc = ILV;
    }
  if(encMenu == 3) {
    1790:	03 30       	cpi	r16, 0x03	; 3
    1792:	11 05       	cpc	r17, r1
    1794:	09 f5       	brne	.+66     	; 0x17d8 <main+0x762>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:585
    ILV = enc;
    1796:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <enc>
    179a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <enc+0x1>
    179e:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <ILV+0x1>
    17a2:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <ILV>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:586
    enc = OHV;
    17a6:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <OHV>
    17aa:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <OHV+0x1>
    17ae:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <enc+0x1>
    17b2:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <enc>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:600
    }
  if(encMenu == 6) {
    SETV = enc;
    enc = OVL;
    }
  if(encMenu == 7) {
    17b6:	07 30       	cpi	r16, 0x07	; 7
    17b8:	11 05       	cpc	r17, r1
    17ba:	09 f0       	breq	.+2      	; 0x17be <main+0x748>
    17bc:	4a c0       	rjmp	.+148    	; 0x1852 <main+0x7dc>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:601
    OVL = enc;
    17be:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <enc>
    17c2:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <enc+0x1>
    17c6:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <OVL+0x1>
    17ca:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <OVL>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:602
    enc = TON;
    17ce:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <TON>
    17d2:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <TON+0x1>
    17d6:	fc cd       	rjmp	.-1032   	; 0x13d0 <main+0x35a>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:588
    }
  if(encMenu == 3) {
    ILV = enc;
    enc = OHV;
    }
  if(encMenu == 4) {
    17d8:	04 30       	cpi	r16, 0x04	; 4
    17da:	11 05       	cpc	r17, r1
    17dc:	09 f0       	breq	.+2      	; 0x17e0 <main+0x76a>
    17de:	e8 cd       	rjmp	.-1072   	; 0x13b0 <main+0x33a>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:589
    OHV = enc;
    17e0:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <enc>
    17e4:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <enc+0x1>
    17e8:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <OHV+0x1>
    17ec:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <OHV>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:590
    enc = OLV;
    17f0:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <OLV>
    17f4:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <OLV+0x1>
    17f8:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <enc+0x1>
    17fc:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <enc>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:610
    TON = enc;
    enc = TOFF;
    on.setDuration(TON, SECONDS);
    on.reset();
    }
  if(encMenu == 9) {
    1800:	09 30       	cpi	r16, 0x09	; 9
    1802:	11 05       	cpc	r17, r1
    1804:	09 f0       	breq	.+2      	; 0x1808 <main+0x792>
    1806:	e8 cd       	rjmp	.-1072   	; 0x13d8 <main+0x362>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:611
    TOFF = enc;
    1808:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <enc>
    180c:	70 91 79 01 	lds	r23, 0x0179	; 0x800179 <enc+0x1>
    1810:	70 93 69 01 	sts	0x0169, r23	; 0x800169 <TOFF+0x1>
    1814:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <TOFF>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:612
    enc = DIFF;
    1818:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <DIFF>
    181c:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <DIFF+0x1>
    1820:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <enc+0x1>
    1824:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <enc>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:613
    off.setDuration(TOFF, SECONDS);
    1828:	07 2e       	mov	r0, r23
    182a:	00 0c       	add	r0, r0
    182c:	88 0b       	sbc	r24, r24
    182e:	99 0b       	sbc	r25, r25
initDuration():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:503
    1830:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__floatunsisf>
    1834:	60 93 b1 01 	sts	0x01B1, r22	; 0x8001b1 <off+0x15>
    1838:	70 93 b2 01 	sts	0x01B2, r23	; 0x8001b2 <off+0x16>
    183c:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <off+0x17>
    1840:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <off+0x18>
setDuration():
    1844:	8c e9       	ldi	r24, 0x9C	; 156
    1846:	91 e0       	ldi	r25, 0x01	; 1
    1848:	0e 94 b4 03 	call	0x768	; 0x768 <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
encUpdate():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:614
    off.reset();
    184c:	8c e9       	ldi	r24, 0x9C	; 156
    184e:	91 e0       	ldi	r25, 0x01	; 1
    1850:	27 c0       	rjmp	.+78     	; 0x18a0 <main+0x82a>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:604
    }
  if(encMenu == 7) {
    OVL = enc;
    enc = TON;
    }
  if(encMenu == 8) {
    1852:	08 30       	cpi	r16, 0x08	; 8
    1854:	11 05       	cpc	r17, r1
    1856:	a1 f6       	brne	.-88     	; 0x1800 <main+0x78a>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:605
    TON = enc;
    1858:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <enc>
    185c:	70 91 79 01 	lds	r23, 0x0179	; 0x800179 <enc+0x1>
    1860:	70 93 6b 01 	sts	0x016B, r23	; 0x80016b <TON+0x1>
    1864:	60 93 6a 01 	sts	0x016A, r22	; 0x80016a <TON>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:606
    enc = TOFF;
    1868:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <TOFF>
    186c:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <TOFF+0x1>
    1870:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <enc+0x1>
    1874:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <enc>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:607
    on.setDuration(TON, SECONDS);
    1878:	07 2e       	mov	r0, r23
    187a:	00 0c       	add	r0, r0
    187c:	88 0b       	sbc	r24, r24
    187e:	99 0b       	sbc	r25, r25
initDuration():
C:\Users\Admin\Documents\Arduino\libraries\BlockNot\src/BlockNot.cpp:503
    1880:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__floatunsisf>
    1884:	60 93 d2 01 	sts	0x01D2, r22	; 0x8001d2 <on+0x15>
    1888:	70 93 d3 01 	sts	0x01D3, r23	; 0x8001d3 <on+0x16>
    188c:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <on+0x17>
    1890:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <on+0x18>
setDuration():
    1894:	8d eb       	ldi	r24, 0xBD	; 189
    1896:	91 e0       	ldi	r25, 0x01	; 1
    1898:	0e 94 b4 03 	call	0x768	; 0x768 <BlockNot::setDuration(unsigned long, Unit, bool) [clone .part.3]>
encUpdate():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:608
    on.reset();
    189c:	8d eb       	ldi	r24, 0xBD	; 189
    189e:	91 e0       	ldi	r25, 0x01	; 1
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:614
    }
  if(encMenu == 9) {
    TOFF = enc;
    enc = DIFF;
    off.setDuration(TOFF, SECONDS);
    off.reset();
    18a0:	0e 94 24 03 	call	0x648	; 0x648 <BlockNot::reset(unsigned long) [clone .constprop.16]>
    18a4:	99 cd       	rjmp	.-1230   	; 0x13d8 <main+0x362>
menuIHV():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:417

void menuIHV() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
  } else {
    display("IHu", 0);
    18a6:	ce 01       	movw	r24, r28
    18a8:	01 96       	adiw	r24, 0x01	; 1
    18aa:	0e 94 69 05 	call	0xad2	; 0xad2 <String::String(char const*)>
    18ae:	70 e0       	ldi	r23, 0x00	; 0
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	ce 01       	movw	r24, r28
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	0e 94 8e 05 	call	0xb1c	; 0xb1c <display(String, int)>
    18ba:	ce 01       	movw	r24, r28
    18bc:	01 96       	adiw	r24, 0x01	; 1
    18be:	0e 94 64 05 	call	0xac8	; 0xac8 <String::~String()>
    18c2:	64 ce       	rjmp	.-824    	; 0x158c <main+0x516>
menuILV():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:427

void menuILV() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
  } else {
    display("ILu", 0);
    18c4:	6b e3       	ldi	r22, 0x3B	; 59
    18c6:	71 e0       	ldi	r23, 0x01	; 1
    18c8:	ce 01       	movw	r24, r28
    18ca:	01 96       	adiw	r24, 0x01	; 1
    18cc:	0e 94 69 05 	call	0xad2	; 0xad2 <String::String(char const*)>
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	ce 01       	movw	r24, r28
    18d6:	01 96       	adiw	r24, 0x01	; 1
    18d8:	0e 94 8e 05 	call	0xb1c	; 0xb1c <display(String, int)>
    18dc:	ce 01       	movw	r24, r28
    18de:	01 96       	adiw	r24, 0x01	; 1
    18e0:	0e 94 64 05 	call	0xac8	; 0xac8 <String::~String()>
    18e4:	63 ce       	rjmp	.-826    	; 0x15ac <main+0x536>
menuOHV():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:437

void menuOHV() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
  } else {
    display("OHu", 0);
    18e6:	6f e3       	ldi	r22, 0x3F	; 63
    18e8:	71 e0       	ldi	r23, 0x01	; 1
    18ea:	ce 01       	movw	r24, r28
    18ec:	01 96       	adiw	r24, 0x01	; 1
    18ee:	0e 94 69 05 	call	0xad2	; 0xad2 <String::String(char const*)>
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	60 e0       	ldi	r22, 0x00	; 0
    18f6:	ce 01       	movw	r24, r28
    18f8:	01 96       	adiw	r24, 0x01	; 1
    18fa:	0e 94 8e 05 	call	0xb1c	; 0xb1c <display(String, int)>
    18fe:	ce 01       	movw	r24, r28
    1900:	01 96       	adiw	r24, 0x01	; 1
    1902:	0e 94 64 05 	call	0xac8	; 0xac8 <String::~String()>
    1906:	62 ce       	rjmp	.-828    	; 0x15cc <main+0x556>
menuOLV():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:447

void menuOLV() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
  } else {
    display("OLu", 0);
    1908:	63 e4       	ldi	r22, 0x43	; 67
    190a:	71 e0       	ldi	r23, 0x01	; 1
    190c:	ce 01       	movw	r24, r28
    190e:	01 96       	adiw	r24, 0x01	; 1
    1910:	0e 94 69 05 	call	0xad2	; 0xad2 <String::String(char const*)>
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	60 e0       	ldi	r22, 0x00	; 0
    1918:	ce 01       	movw	r24, r28
    191a:	01 96       	adiw	r24, 0x01	; 1
    191c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <display(String, int)>
    1920:	ce 01       	movw	r24, r28
    1922:	01 96       	adiw	r24, 0x01	; 1
    1924:	0e 94 64 05 	call	0xac8	; 0xac8 <String::~String()>
    1928:	61 ce       	rjmp	.-830    	; 0x15ec <main+0x576>
menuSETV():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:457

void menuSETV() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
  } else {
    display("SETu", 0);
    192a:	67 e4       	ldi	r22, 0x47	; 71
    192c:	71 e0       	ldi	r23, 0x01	; 1
    192e:	ce 01       	movw	r24, r28
    1930:	01 96       	adiw	r24, 0x01	; 1
    1932:	0e 94 69 05 	call	0xad2	; 0xad2 <String::String(char const*)>
    1936:	70 e0       	ldi	r23, 0x00	; 0
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	ce 01       	movw	r24, r28
    193c:	01 96       	adiw	r24, 0x01	; 1
    193e:	0e 94 8e 05 	call	0xb1c	; 0xb1c <display(String, int)>
    1942:	ce 01       	movw	r24, r28
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	0e 94 64 05 	call	0xac8	; 0xac8 <String::~String()>
    194a:	60 ce       	rjmp	.-832    	; 0x160c <main+0x596>
menuOVL():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:467

void menuOVL() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
  } else {
    display("OuL", 0);
    194c:	6c e4       	ldi	r22, 0x4C	; 76
    194e:	71 e0       	ldi	r23, 0x01	; 1
    1950:	ce 01       	movw	r24, r28
    1952:	01 96       	adiw	r24, 0x01	; 1
    1954:	0e 94 69 05 	call	0xad2	; 0xad2 <String::String(char const*)>
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	ce 01       	movw	r24, r28
    195e:	01 96       	adiw	r24, 0x01	; 1
    1960:	0e 94 8e 05 	call	0xb1c	; 0xb1c <display(String, int)>
    1964:	ce 01       	movw	r24, r28
    1966:	01 96       	adiw	r24, 0x01	; 1
    1968:	0e 94 64 05 	call	0xac8	; 0xac8 <String::~String()>
    196c:	5f ce       	rjmp	.-834    	; 0x162c <main+0x5b6>
menuTON():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:477

void menuTON() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
  } else {
    display("tOn", 0);
    196e:	60 e5       	ldi	r22, 0x50	; 80
    1970:	71 e0       	ldi	r23, 0x01	; 1
    1972:	ce 01       	movw	r24, r28
    1974:	01 96       	adiw	r24, 0x01	; 1
    1976:	0e 94 69 05 	call	0xad2	; 0xad2 <String::String(char const*)>
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	ce 01       	movw	r24, r28
    1980:	01 96       	adiw	r24, 0x01	; 1
    1982:	0e 94 8e 05 	call	0xb1c	; 0xb1c <display(String, int)>
    1986:	ce 01       	movw	r24, r28
    1988:	01 96       	adiw	r24, 0x01	; 1
    198a:	0e 94 64 05 	call	0xac8	; 0xac8 <String::~String()>
    198e:	5e ce       	rjmp	.-836    	; 0x164c <main+0x5d6>
menuTOFF():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:487

void menuTOFF() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
  } else {
    display("tOFF", 0);
    1990:	64 e5       	ldi	r22, 0x54	; 84
    1992:	71 e0       	ldi	r23, 0x01	; 1
    1994:	ce 01       	movw	r24, r28
    1996:	01 96       	adiw	r24, 0x01	; 1
    1998:	0e 94 69 05 	call	0xad2	; 0xad2 <String::String(char const*)>
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	60 e0       	ldi	r22, 0x00	; 0
    19a0:	ce 01       	movw	r24, r28
    19a2:	01 96       	adiw	r24, 0x01	; 1
    19a4:	0e 94 8e 05 	call	0xb1c	; 0xb1c <display(String, int)>
    19a8:	ce 01       	movw	r24, r28
    19aa:	01 96       	adiw	r24, 0x01	; 1
    19ac:	0e 94 64 05 	call	0xac8	; 0xac8 <String::~String()>
    19b0:	5d ce       	rjmp	.-838    	; 0x166c <main+0x5f6>
menuDIFF():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:497

void menuDIFF() {
  if(refresh.triggered(false)){
    displayVar(enc, 0);
  } else {
    display("dIFF", 0);
    19b2:	69 e5       	ldi	r22, 0x59	; 89
    19b4:	71 e0       	ldi	r23, 0x01	; 1
    19b6:	ce 01       	movw	r24, r28
    19b8:	01 96       	adiw	r24, 0x01	; 1
    19ba:	0e 94 69 05 	call	0xad2	; 0xad2 <String::String(char const*)>
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	ce 01       	movw	r24, r28
    19c4:	01 96       	adiw	r24, 0x01	; 1
    19c6:	0e 94 8e 05 	call	0xb1c	; 0xb1c <display(String, int)>
    19ca:	ce 01       	movw	r24, r28
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	0e 94 64 05 	call	0xac8	; 0xac8 <String::~String()>
    19d2:	5c ce       	rjmp	.-840    	; 0x168c <main+0x616>
OV():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:398
int IV() {
  return analogRead(inVolt);
}

int OV() {
  return analogRead(outVolt);
    19d4:	8f e0       	ldi	r24, 0x0F	; 15
    19d6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <analogRead>
runNormal():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:273
}

//Run Mode

void runNormal() {
  if(OV() < SETV && diffcheck() && inputVok() && currentok()){
    19da:	00 91 de 01 	lds	r16, 0x01DE	; 0x8001de <SETV>
    19de:	10 91 df 01 	lds	r17, 0x01DF	; 0x8001df <SETV+0x1>
    19e2:	80 17       	cp	r24, r16
    19e4:	91 07       	cpc	r25, r17
    19e6:	6c f4       	brge	.+26     	; 0x1a02 <main+0x98c>
    19e8:	0e 94 74 04 	call	0x8e8	; 0x8e8 <diffcheck()>
    19ec:	88 23       	and	r24, r24
    19ee:	49 f0       	breq	.+18     	; 0x1a02 <main+0x98c>
    19f0:	0e 94 b6 04 	call	0x96c	; 0x96c <inputVok()>
    19f4:	88 23       	and	r24, r24
    19f6:	29 f0       	breq	.+10     	; 0x1a02 <main+0x98c>
    19f8:	0e 94 90 04 	call	0x920	; 0x920 <currentok()>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:274
    digitalWrite(motor0Fwd, HIGH);
    19fc:	61 e0       	ldi	r22, 0x01	; 1
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:273
}

//Run Mode

void runNormal() {
  if(OV() < SETV && diffcheck() && inputVok() && currentok()){
    19fe:	81 11       	cpse	r24, r1
    1a00:	01 c0       	rjmp	.+2      	; 0x1a04 <main+0x98e>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:276
    digitalWrite(motor0Fwd, HIGH);
  } else {
    digitalWrite(motor0Fwd, LOW);
    1a02:	60 e0       	ldi	r22, 0x00	; 0
    1a04:	84 e1       	ldi	r24, 0x14	; 20
    1a06:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
OV():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:398
int IV() {
  return analogRead(inVolt);
}

int OV() {
  return analogRead(outVolt);
    1a0a:	8f e0       	ldi	r24, 0x0F	; 15
    1a0c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <analogRead>
runNormal():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:278
  if(OV() < SETV && diffcheck() && inputVok() && currentok()){
    digitalWrite(motor0Fwd, HIGH);
  } else {
    digitalWrite(motor0Fwd, LOW);
  }
  if(OV() > SETV && diffcheck() && inputVok() && currentok()){
    1a10:	08 17       	cp	r16, r24
    1a12:	19 07       	cpc	r17, r25
    1a14:	0c f1       	brlt	.+66     	; 0x1a58 <main+0x9e2>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:281
    digitalWrite(motor0Rev, HIGH);
  } else {
    digitalWrite(motor0Rev, LOW);
    1a16:	60 e0       	ldi	r22, 0x00	; 0
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:279
    digitalWrite(motor0Fwd, HIGH);
  } else {
    digitalWrite(motor0Fwd, LOW);
  }
  if(OV() > SETV && diffcheck() && inputVok() && currentok()){
    digitalWrite(motor0Rev, HIGH);
    1a18:	85 e1       	ldi	r24, 0x15	; 21
    1a1a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:284
  } else {
    digitalWrite(motor0Rev, LOW);
  }

  if(checksystem()){
    1a1e:	0e 94 ce 04 	call	0x99c	; 0x99c <checksystem()>
    1a22:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <mode>
    1a26:	88 23       	and	r24, r24
    1a28:	29 f1       	breq	.+74     	; 0x1a74 <main+0x9fe>
updateScreenData():
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:321

//Update Run Mode Screen

void updateScreenData(bool status) {
  //uncomment !mode and comment !read(setupPin) if setupPin is not being used
  if(!mode/*!read(setupPin)*/){
    1a2c:	99 23       	and	r25, r25
    1a2e:	29 f1       	breq	.+74     	; 0x1a7a <main+0xa04>
updatePower():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:307
}

//Control Output Supply Relay

void updatePower() {
  if(checksystem()){
    1a30:	0e 94 ce 04 	call	0x99c	; 0x99c <checksystem()>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:308
  if(on.triggered(false))  
    1a34:	60 e0       	ldi	r22, 0x00	; 0
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:307
}

//Control Output Supply Relay

void updatePower() {
  if(checksystem()){
    1a36:	88 23       	and	r24, r24
    1a38:	19 f1       	breq	.+70     	; 0x1a80 <main+0xa0a>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:308
  if(on.triggered(false))  
    1a3a:	8d eb       	ldi	r24, 0xBD	; 189
    1a3c:	91 e0       	ldi	r25, 0x01	; 1
    1a3e:	0e 94 02 04 	call	0x804	; 0x804 <BlockNot::triggered(bool)>
    1a42:	88 23       	and	r24, r24
    1a44:	21 f0       	breq	.+8      	; 0x1a4e <main+0x9d8>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:309
    digitalWrite(power, HIGH);
    1a46:	61 e0       	ldi	r22, 0x01	; 1
    1a48:	8d e0       	ldi	r24, 0x0D	; 13
    1a4a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:310
    off.reset();
    1a4e:	8c e9       	ldi	r24, 0x9C	; 156
    1a50:	91 e0       	ldi	r25, 0x01	; 1
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:313
  } else if(off.triggered(false)) {
    digitalWrite(power, LOW);
    on.reset();
    1a52:	0e 94 24 03 	call	0x648	; 0x648 <BlockNot::reset(unsigned long) [clone .constprop.16]>
    1a56:	2e ce       	rjmp	.-932    	; 0x16b4 <main+0x63e>
runNormal():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:278
  if(OV() < SETV && diffcheck() && inputVok() && currentok()){
    digitalWrite(motor0Fwd, HIGH);
  } else {
    digitalWrite(motor0Fwd, LOW);
  }
  if(OV() > SETV && diffcheck() && inputVok() && currentok()){
    1a58:	0e 94 74 04 	call	0x8e8	; 0x8e8 <diffcheck()>
    1a5c:	88 23       	and	r24, r24
    1a5e:	d9 f2       	breq	.-74     	; 0x1a16 <main+0x9a0>
    1a60:	0e 94 b6 04 	call	0x96c	; 0x96c <inputVok()>
    1a64:	88 23       	and	r24, r24
    1a66:	b9 f2       	breq	.-82     	; 0x1a16 <main+0x9a0>
    1a68:	0e 94 90 04 	call	0x920	; 0x920 <currentok()>
    1a6c:	88 23       	and	r24, r24
    1a6e:	99 f2       	breq	.-90     	; 0x1a16 <main+0x9a0>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:279
    digitalWrite(motor0Rev, HIGH);
    1a70:	61 e0       	ldi	r22, 0x01	; 1
    1a72:	d2 cf       	rjmp	.-92     	; 0x1a18 <main+0x9a2>
updateScreenData():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:321

//Update Run Mode Screen

void updateScreenData(bool status) {
  //uncomment !mode and comment !read(setupPin) if setupPin is not being used
  if(!mode/*!read(setupPin)*/){
    1a74:	91 11       	cpse	r25, r1
    1a76:	dc cf       	rjmp	.-72     	; 0x1a30 <main+0x9ba>
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	0e 94 3c 06 	call	0xc78	; 0xc78 <updateScreenData(bool) [clone .part.9]>
    1a7e:	d8 cf       	rjmp	.-80     	; 0x1a30 <main+0x9ba>
updatePower():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:311
void updatePower() {
  if(checksystem()){
  if(on.triggered(false))  
    digitalWrite(power, HIGH);
    off.reset();
  } else if(off.triggered(false)) {
    1a80:	8c e9       	ldi	r24, 0x9C	; 156
    1a82:	91 e0       	ldi	r25, 0x01	; 1
    1a84:	0e 94 02 04 	call	0x804	; 0x804 <BlockNot::triggered(bool)>
    1a88:	88 23       	and	r24, r24
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <main+0xa18>
    1a8c:	13 ce       	rjmp	.-986    	; 0x16b4 <main+0x63e>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:312
    digitalWrite(power, LOW);
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	8d e0       	ldi	r24, 0x0D	; 13
    1a92:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <digitalWrite>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:313
    on.reset();
    1a96:	8d eb       	ldi	r24, 0xBD	; 189
    1a98:	91 e0       	ldi	r25, 0x01	; 1
    1a9a:	db cf       	rjmp	.-74     	; 0x1a52 <main+0x9dc>

00001a9c <_GLOBAL__sub_I_display1>:
__base_ctor ():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/SevSeg.cpp:67
#include "SevSeg.h"

SevSeg::SevSeg()
{
  //Initial values
  DecAposColon = 0; //This variable tracks the decimal place, apostrophe, and colon (if the display has support)
    1a9c:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <display1+0x48>
__static_initialization_and_destruction_0():
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:79


SevSeg display1;

//BlockNot screen(2, SECONDS);
BlockNot refresh(1, SECONDS);
    1aa0:	41 e0       	ldi	r20, 0x01	; 1
    1aa2:	50 e0       	ldi	r21, 0x00	; 0
    1aa4:	60 e0       	ldi	r22, 0x00	; 0
    1aa6:	70 e0       	ldi	r23, 0x00	; 0
    1aa8:	8b e7       	ldi	r24, 0x7B	; 123
    1aaa:	91 e0       	ldi	r25, 0x01	; 1
    1aac:	0e 94 5d 03 	call	0x6ba	; 0x6ba <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.15]>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:124
/**/
bool mode = false;
bool switched = false;
/**/

BlockNot on(TON, SECONDS);
    1ab0:	40 91 6a 01 	lds	r20, 0x016A	; 0x80016a <TON>
    1ab4:	50 91 6b 01 	lds	r21, 0x016B	; 0x80016b <TON+0x1>
    1ab8:	05 2e       	mov	r0, r21
    1aba:	00 0c       	add	r0, r0
    1abc:	66 0b       	sbc	r22, r22
    1abe:	77 0b       	sbc	r23, r23
    1ac0:	8d eb       	ldi	r24, 0xBD	; 189
    1ac2:	91 e0       	ldi	r25, 0x01	; 1
    1ac4:	0e 94 5d 03 	call	0x6ba	; 0x6ba <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.15]>
D:\GitHub Repos\003-1PH-SERVO-ATMega328P/003-1PH-SERVO-ATMega328P.ino:125
BlockNot off(TOFF, SECONDS);
    1ac8:	40 91 68 01 	lds	r20, 0x0168	; 0x800168 <TOFF>
    1acc:	50 91 69 01 	lds	r21, 0x0169	; 0x800169 <TOFF+0x1>
    1ad0:	05 2e       	mov	r0, r21
    1ad2:	00 0c       	add	r0, r0
    1ad4:	66 0b       	sbc	r22, r22
    1ad6:	77 0b       	sbc	r23, r23
    1ad8:	8c e9       	ldi	r24, 0x9C	; 156
    1ada:	91 e0       	ldi	r25, 0x01	; 1
    1adc:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <BlockNot::BlockNot(unsigned long, Unit) [clone .constprop.15]>

00001ae0 <__floatunsisf>:
__floatunsisf():
    1ae0:	e8 94       	clt
    1ae2:	09 c0       	rjmp	.+18     	; 0x1af6 <__floatsisf+0x12>

00001ae4 <__floatsisf>:
    1ae4:	97 fb       	bst	r25, 7
    1ae6:	3e f4       	brtc	.+14     	; 0x1af6 <__floatsisf+0x12>
    1ae8:	90 95       	com	r25
    1aea:	80 95       	com	r24
    1aec:	70 95       	com	r23
    1aee:	61 95       	neg	r22
    1af0:	7f 4f       	sbci	r23, 0xFF	; 255
    1af2:	8f 4f       	sbci	r24, 0xFF	; 255
    1af4:	9f 4f       	sbci	r25, 0xFF	; 255
    1af6:	99 23       	and	r25, r25
    1af8:	a9 f0       	breq	.+42     	; 0x1b24 <__floatsisf+0x40>
    1afa:	f9 2f       	mov	r31, r25
    1afc:	96 e9       	ldi	r25, 0x96	; 150
    1afe:	bb 27       	eor	r27, r27
    1b00:	93 95       	inc	r25
    1b02:	f6 95       	lsr	r31
    1b04:	87 95       	ror	r24
    1b06:	77 95       	ror	r23
    1b08:	67 95       	ror	r22
    1b0a:	b7 95       	ror	r27
    1b0c:	f1 11       	cpse	r31, r1
    1b0e:	f8 cf       	rjmp	.-16     	; 0x1b00 <__floatsisf+0x1c>
    1b10:	fa f4       	brpl	.+62     	; 0x1b50 <__floatsisf+0x6c>
    1b12:	bb 0f       	add	r27, r27
    1b14:	11 f4       	brne	.+4      	; 0x1b1a <__floatsisf+0x36>
    1b16:	60 ff       	sbrs	r22, 0
    1b18:	1b c0       	rjmp	.+54     	; 0x1b50 <__floatsisf+0x6c>
    1b1a:	6f 5f       	subi	r22, 0xFF	; 255
    1b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b20:	9f 4f       	sbci	r25, 0xFF	; 255
    1b22:	16 c0       	rjmp	.+44     	; 0x1b50 <__floatsisf+0x6c>
    1b24:	88 23       	and	r24, r24
    1b26:	11 f0       	breq	.+4      	; 0x1b2c <__floatsisf+0x48>
    1b28:	96 e9       	ldi	r25, 0x96	; 150
    1b2a:	11 c0       	rjmp	.+34     	; 0x1b4e <__floatsisf+0x6a>
    1b2c:	77 23       	and	r23, r23
    1b2e:	21 f0       	breq	.+8      	; 0x1b38 <__floatsisf+0x54>
    1b30:	9e e8       	ldi	r25, 0x8E	; 142
    1b32:	87 2f       	mov	r24, r23
    1b34:	76 2f       	mov	r23, r22
    1b36:	05 c0       	rjmp	.+10     	; 0x1b42 <__floatsisf+0x5e>
    1b38:	66 23       	and	r22, r22
    1b3a:	71 f0       	breq	.+28     	; 0x1b58 <__floatsisf+0x74>
    1b3c:	96 e8       	ldi	r25, 0x86	; 134
    1b3e:	86 2f       	mov	r24, r22
    1b40:	70 e0       	ldi	r23, 0x00	; 0
    1b42:	60 e0       	ldi	r22, 0x00	; 0
    1b44:	2a f0       	brmi	.+10     	; 0x1b50 <__floatsisf+0x6c>
    1b46:	9a 95       	dec	r25
    1b48:	66 0f       	add	r22, r22
    1b4a:	77 1f       	adc	r23, r23
    1b4c:	88 1f       	adc	r24, r24
    1b4e:	da f7       	brpl	.-10     	; 0x1b46 <__floatsisf+0x62>
    1b50:	88 0f       	add	r24, r24
    1b52:	96 95       	lsr	r25
    1b54:	87 95       	ror	r24
    1b56:	97 f9       	bld	r25, 7
    1b58:	08 95       	ret

00001b5a <__mulsf3>:
__mulsf3():
    1b5a:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__mulsf3x>
    1b5e:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__fp_round>
    1b62:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__fp_pscA>
    1b66:	38 f0       	brcs	.+14     	; 0x1b76 <__mulsf3+0x1c>
    1b68:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__fp_pscB>
    1b6c:	20 f0       	brcs	.+8      	; 0x1b76 <__mulsf3+0x1c>
    1b6e:	95 23       	and	r25, r21
    1b70:	11 f0       	breq	.+4      	; 0x1b76 <__mulsf3+0x1c>
    1b72:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__fp_inf>
    1b76:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <__fp_nan>
    1b7a:	11 24       	eor	r1, r1
    1b7c:	0c 94 65 0e 	jmp	0x1cca	; 0x1cca <__fp_szero>

00001b80 <__mulsf3x>:
__mulsf3x():
    1b80:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fp_split3>
    1b84:	70 f3       	brcs	.-36     	; 0x1b62 <__mulsf3+0x8>

00001b86 <__mulsf3_pse>:
    1b86:	95 9f       	mul	r25, r21
    1b88:	c1 f3       	breq	.-16     	; 0x1b7a <__mulsf3+0x20>
    1b8a:	95 0f       	add	r25, r21
    1b8c:	50 e0       	ldi	r21, 0x00	; 0
    1b8e:	55 1f       	adc	r21, r21
    1b90:	62 9f       	mul	r22, r18
    1b92:	f0 01       	movw	r30, r0
    1b94:	72 9f       	mul	r23, r18
    1b96:	bb 27       	eor	r27, r27
    1b98:	f0 0d       	add	r31, r0
    1b9a:	b1 1d       	adc	r27, r1
    1b9c:	63 9f       	mul	r22, r19
    1b9e:	aa 27       	eor	r26, r26
    1ba0:	f0 0d       	add	r31, r0
    1ba2:	b1 1d       	adc	r27, r1
    1ba4:	aa 1f       	adc	r26, r26
    1ba6:	64 9f       	mul	r22, r20
    1ba8:	66 27       	eor	r22, r22
    1baa:	b0 0d       	add	r27, r0
    1bac:	a1 1d       	adc	r26, r1
    1bae:	66 1f       	adc	r22, r22
    1bb0:	82 9f       	mul	r24, r18
    1bb2:	22 27       	eor	r18, r18
    1bb4:	b0 0d       	add	r27, r0
    1bb6:	a1 1d       	adc	r26, r1
    1bb8:	62 1f       	adc	r22, r18
    1bba:	73 9f       	mul	r23, r19
    1bbc:	b0 0d       	add	r27, r0
    1bbe:	a1 1d       	adc	r26, r1
    1bc0:	62 1f       	adc	r22, r18
    1bc2:	83 9f       	mul	r24, r19
    1bc4:	a0 0d       	add	r26, r0
    1bc6:	61 1d       	adc	r22, r1
    1bc8:	22 1f       	adc	r18, r18
    1bca:	74 9f       	mul	r23, r20
    1bcc:	33 27       	eor	r19, r19
    1bce:	a0 0d       	add	r26, r0
    1bd0:	61 1d       	adc	r22, r1
    1bd2:	23 1f       	adc	r18, r19
    1bd4:	84 9f       	mul	r24, r20
    1bd6:	60 0d       	add	r22, r0
    1bd8:	21 1d       	adc	r18, r1
    1bda:	82 2f       	mov	r24, r18
    1bdc:	76 2f       	mov	r23, r22
    1bde:	6a 2f       	mov	r22, r26
    1be0:	11 24       	eor	r1, r1
    1be2:	9f 57       	subi	r25, 0x7F	; 127
    1be4:	50 40       	sbci	r21, 0x00	; 0
    1be6:	9a f0       	brmi	.+38     	; 0x1c0e <__mulsf3_pse+0x88>
    1be8:	f1 f0       	breq	.+60     	; 0x1c26 <__mulsf3_pse+0xa0>
    1bea:	88 23       	and	r24, r24
    1bec:	4a f0       	brmi	.+18     	; 0x1c00 <__mulsf3_pse+0x7a>
    1bee:	ee 0f       	add	r30, r30
    1bf0:	ff 1f       	adc	r31, r31
    1bf2:	bb 1f       	adc	r27, r27
    1bf4:	66 1f       	adc	r22, r22
    1bf6:	77 1f       	adc	r23, r23
    1bf8:	88 1f       	adc	r24, r24
    1bfa:	91 50       	subi	r25, 0x01	; 1
    1bfc:	50 40       	sbci	r21, 0x00	; 0
    1bfe:	a9 f7       	brne	.-22     	; 0x1bea <__mulsf3_pse+0x64>
    1c00:	9e 3f       	cpi	r25, 0xFE	; 254
    1c02:	51 05       	cpc	r21, r1
    1c04:	80 f0       	brcs	.+32     	; 0x1c26 <__mulsf3_pse+0xa0>
    1c06:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__fp_inf>
    1c0a:	0c 94 65 0e 	jmp	0x1cca	; 0x1cca <__fp_szero>
    1c0e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c10:	e4 f3       	brlt	.-8      	; 0x1c0a <__mulsf3_pse+0x84>
    1c12:	98 3e       	cpi	r25, 0xE8	; 232
    1c14:	d4 f3       	brlt	.-12     	; 0x1c0a <__mulsf3_pse+0x84>
    1c16:	86 95       	lsr	r24
    1c18:	77 95       	ror	r23
    1c1a:	67 95       	ror	r22
    1c1c:	b7 95       	ror	r27
    1c1e:	f7 95       	ror	r31
    1c20:	e7 95       	ror	r30
    1c22:	9f 5f       	subi	r25, 0xFF	; 255
    1c24:	c1 f7       	brne	.-16     	; 0x1c16 <__mulsf3_pse+0x90>
    1c26:	fe 2b       	or	r31, r30
    1c28:	88 0f       	add	r24, r24
    1c2a:	91 1d       	adc	r25, r1
    1c2c:	96 95       	lsr	r25
    1c2e:	87 95       	ror	r24
    1c30:	97 f9       	bld	r25, 7
    1c32:	08 95       	ret

00001c34 <__fp_inf>:
    1c34:	97 f9       	bld	r25, 7
    1c36:	9f 67       	ori	r25, 0x7F	; 127
    1c38:	80 e8       	ldi	r24, 0x80	; 128
    1c3a:	70 e0       	ldi	r23, 0x00	; 0
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	08 95       	ret

00001c40 <__fp_nan>:
    1c40:	9f ef       	ldi	r25, 0xFF	; 255
    1c42:	80 ec       	ldi	r24, 0xC0	; 192
    1c44:	08 95       	ret

00001c46 <__fp_pscA>:
    1c46:	00 24       	eor	r0, r0
    1c48:	0a 94       	dec	r0
    1c4a:	16 16       	cp	r1, r22
    1c4c:	17 06       	cpc	r1, r23
    1c4e:	18 06       	cpc	r1, r24
    1c50:	09 06       	cpc	r0, r25
__fp_pscA():
    1c52:	08 95       	ret

00001c54 <__fp_pscB>:
__fp_pscB():
    1c54:	00 24       	eor	r0, r0
    1c56:	0a 94       	dec	r0
    1c58:	12 16       	cp	r1, r18
    1c5a:	13 06       	cpc	r1, r19
    1c5c:	14 06       	cpc	r1, r20
    1c5e:	05 06       	cpc	r0, r21
    1c60:	08 95       	ret

00001c62 <__fp_round>:
__fp_round():
    1c62:	09 2e       	mov	r0, r25
    1c64:	03 94       	inc	r0
    1c66:	00 0c       	add	r0, r0
    1c68:	11 f4       	brne	.+4      	; 0x1c6e <__fp_round+0xc>
    1c6a:	88 23       	and	r24, r24
    1c6c:	52 f0       	brmi	.+20     	; 0x1c82 <__fp_round+0x20>
    1c6e:	bb 0f       	add	r27, r27
    1c70:	40 f4       	brcc	.+16     	; 0x1c82 <__fp_round+0x20>
    1c72:	bf 2b       	or	r27, r31
    1c74:	11 f4       	brne	.+4      	; 0x1c7a <__fp_round+0x18>
    1c76:	60 ff       	sbrs	r22, 0
    1c78:	04 c0       	rjmp	.+8      	; 0x1c82 <__fp_round+0x20>
    1c7a:	6f 5f       	subi	r22, 0xFF	; 255
    1c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c80:	9f 4f       	sbci	r25, 0xFF	; 255
    1c82:	08 95       	ret

00001c84 <__fp_split3>:
__fp_split3():
    1c84:	57 fd       	sbrc	r21, 7
    1c86:	90 58       	subi	r25, 0x80	; 128
    1c88:	44 0f       	add	r20, r20
    1c8a:	55 1f       	adc	r21, r21
    1c8c:	59 f0       	breq	.+22     	; 0x1ca4 <__fp_splitA+0x10>
    1c8e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c90:	71 f0       	breq	.+28     	; 0x1cae <__fp_splitA+0x1a>
    1c92:	47 95       	ror	r20

00001c94 <__fp_splitA>:
    1c94:	88 0f       	add	r24, r24
    1c96:	97 fb       	bst	r25, 7
    1c98:	99 1f       	adc	r25, r25
    1c9a:	61 f0       	breq	.+24     	; 0x1cb4 <__fp_splitA+0x20>
    1c9c:	9f 3f       	cpi	r25, 0xFF	; 255
    1c9e:	79 f0       	breq	.+30     	; 0x1cbe <__fp_splitA+0x2a>
    1ca0:	87 95       	ror	r24
    1ca2:	08 95       	ret
    1ca4:	12 16       	cp	r1, r18
    1ca6:	13 06       	cpc	r1, r19
    1ca8:	14 06       	cpc	r1, r20
    1caa:	55 1f       	adc	r21, r21
    1cac:	f2 cf       	rjmp	.-28     	; 0x1c92 <__fp_split3+0xe>
    1cae:	46 95       	lsr	r20
    1cb0:	f1 df       	rcall	.-30     	; 0x1c94 <__fp_splitA>
    1cb2:	08 c0       	rjmp	.+16     	; 0x1cc4 <__fp_splitA+0x30>
    1cb4:	16 16       	cp	r1, r22
    1cb6:	17 06       	cpc	r1, r23
    1cb8:	18 06       	cpc	r1, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	f1 cf       	rjmp	.-30     	; 0x1ca0 <__fp_splitA+0xc>
    1cbe:	86 95       	lsr	r24
    1cc0:	71 05       	cpc	r23, r1
    1cc2:	61 05       	cpc	r22, r1
    1cc4:	08 94       	sec
    1cc6:	08 95       	ret

00001cc8 <__fp_zero>:
__fp_zero():
    1cc8:	e8 94       	clt

00001cca <__fp_szero>:
    1cca:	bb 27       	eor	r27, r27
    1ccc:	66 27       	eor	r22, r22
    1cce:	77 27       	eor	r23, r23
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	97 f9       	bld	r25, 7
    1cd4:	08 95       	ret

00001cd6 <eeprom_read_byte>:
eeprom_read_byte():
    1cd6:	f9 99       	sbic	0x1f, 1	; 31
    1cd8:	fe cf       	rjmp	.-4      	; 0x1cd6 <eeprom_read_byte>
    1cda:	92 bd       	out	0x22, r25	; 34
    1cdc:	81 bd       	out	0x21, r24	; 33
    1cde:	f8 9a       	sbi	0x1f, 0	; 31
    1ce0:	99 27       	eor	r25, r25
    1ce2:	80 b5       	in	r24, 0x20	; 32
    1ce4:	08 95       	ret

00001ce6 <eeprom_write_byte>:
eeprom_write_byte():
    1ce6:	26 2f       	mov	r18, r22

00001ce8 <eeprom_write_r18>:
    1ce8:	f9 99       	sbic	0x1f, 1	; 31
    1cea:	fe cf       	rjmp	.-4      	; 0x1ce8 <eeprom_write_r18>
    1cec:	1f ba       	out	0x1f, r1	; 31
    1cee:	92 bd       	out	0x22, r25	; 34
    1cf0:	81 bd       	out	0x21, r24	; 33
    1cf2:	20 bd       	out	0x20, r18	; 32
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	fa 9a       	sbi	0x1f, 2	; 31
    1cfa:	f9 9a       	sbi	0x1f, 1	; 31
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	01 96       	adiw	r24, 0x01	; 1
    1d00:	08 95       	ret

00001d02 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    1d02:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    1d04:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    1d06:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    1d08:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    1d0a:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    1d0c:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    1d0e:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    1d10:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    1d12:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    1d14:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    1d16:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    1d18:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    1d1a:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    1d1c:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    1d1e:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    1d20:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    1d22:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    1d24:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    1d26:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    1d28:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    1d2a:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    1d2c:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    1d2e:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    1d30:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    1d32:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    1d34:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    1d36:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    1d38:	09 94       	ijmp

00001d3a <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    1d3a:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    1d3c:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    1d3e:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    1d40:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    1d42:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    1d44:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    1d46:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    1d48:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    1d4a:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    1d4c:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    1d4e:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    1d50:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    1d52:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    1d54:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    1d56:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    1d58:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    1d5a:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    1d5c:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    1d5e:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    1d60:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    1d62:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    1d64:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    1d66:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    1d68:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    1d6a:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    1d6c:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    1d6e:	08 95       	ret

00001d70 <__subsf3>:
__subsf3():
    1d70:	50 58       	subi	r21, 0x80	; 128

00001d72 <__addsf3>:
    1d72:	bb 27       	eor	r27, r27
    1d74:	aa 27       	eor	r26, r26
    1d76:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__addsf3x>
    1d7a:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__fp_round>
__addsf3():
    1d7e:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__fp_pscA>
    1d82:	38 f0       	brcs	.+14     	; 0x1d92 <__addsf3+0x20>
    1d84:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__fp_pscB>
    1d88:	20 f0       	brcs	.+8      	; 0x1d92 <__addsf3+0x20>
    1d8a:	39 f4       	brne	.+14     	; 0x1d9a <__addsf3+0x28>
    1d8c:	9f 3f       	cpi	r25, 0xFF	; 255
    1d8e:	19 f4       	brne	.+6      	; 0x1d96 <__addsf3+0x24>
    1d90:	26 f4       	brtc	.+8      	; 0x1d9a <__addsf3+0x28>
    1d92:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <__fp_nan>
    1d96:	0e f4       	brtc	.+2      	; 0x1d9a <__addsf3+0x28>
    1d98:	e0 95       	com	r30
    1d9a:	e7 fb       	bst	r30, 7
    1d9c:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__fp_inf>

00001da0 <__addsf3x>:
__addsf3x():
    1da0:	e9 2f       	mov	r30, r25
    1da2:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fp_split3>
    1da6:	58 f3       	brcs	.-42     	; 0x1d7e <__addsf3+0xc>
    1da8:	ba 17       	cp	r27, r26
    1daa:	62 07       	cpc	r22, r18
    1dac:	73 07       	cpc	r23, r19
    1dae:	84 07       	cpc	r24, r20
    1db0:	95 07       	cpc	r25, r21
    1db2:	20 f0       	brcs	.+8      	; 0x1dbc <__addsf3x+0x1c>
    1db4:	79 f4       	brne	.+30     	; 0x1dd4 <__addsf3x+0x34>
    1db6:	a6 f5       	brtc	.+104    	; 0x1e20 <__addsf3x+0x80>
    1db8:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__fp_zero>
    1dbc:	0e f4       	brtc	.+2      	; 0x1dc0 <__addsf3x+0x20>
    1dbe:	e0 95       	com	r30
    1dc0:	0b 2e       	mov	r0, r27
    1dc2:	ba 2f       	mov	r27, r26
    1dc4:	a0 2d       	mov	r26, r0
    1dc6:	0b 01       	movw	r0, r22
    1dc8:	b9 01       	movw	r22, r18
    1dca:	90 01       	movw	r18, r0
    1dcc:	0c 01       	movw	r0, r24
    1dce:	ca 01       	movw	r24, r20
    1dd0:	a0 01       	movw	r20, r0
    1dd2:	11 24       	eor	r1, r1
    1dd4:	ff 27       	eor	r31, r31
    1dd6:	59 1b       	sub	r21, r25
    1dd8:	99 f0       	breq	.+38     	; 0x1e00 <__addsf3x+0x60>
    1dda:	59 3f       	cpi	r21, 0xF9	; 249
    1ddc:	50 f4       	brcc	.+20     	; 0x1df2 <__addsf3x+0x52>
    1dde:	50 3e       	cpi	r21, 0xE0	; 224
    1de0:	68 f1       	brcs	.+90     	; 0x1e3c <__addsf3x+0x9c>
    1de2:	1a 16       	cp	r1, r26
    1de4:	f0 40       	sbci	r31, 0x00	; 0
    1de6:	a2 2f       	mov	r26, r18
    1de8:	23 2f       	mov	r18, r19
    1dea:	34 2f       	mov	r19, r20
    1dec:	44 27       	eor	r20, r20
    1dee:	58 5f       	subi	r21, 0xF8	; 248
    1df0:	f3 cf       	rjmp	.-26     	; 0x1dd8 <__addsf3x+0x38>
    1df2:	46 95       	lsr	r20
    1df4:	37 95       	ror	r19
    1df6:	27 95       	ror	r18
    1df8:	a7 95       	ror	r26
    1dfa:	f0 40       	sbci	r31, 0x00	; 0
    1dfc:	53 95       	inc	r21
    1dfe:	c9 f7       	brne	.-14     	; 0x1df2 <__addsf3x+0x52>
    1e00:	7e f4       	brtc	.+30     	; 0x1e20 <__addsf3x+0x80>
    1e02:	1f 16       	cp	r1, r31
    1e04:	ba 0b       	sbc	r27, r26
    1e06:	62 0b       	sbc	r22, r18
    1e08:	73 0b       	sbc	r23, r19
    1e0a:	84 0b       	sbc	r24, r20
    1e0c:	ba f0       	brmi	.+46     	; 0x1e3c <__addsf3x+0x9c>
    1e0e:	91 50       	subi	r25, 0x01	; 1
    1e10:	a1 f0       	breq	.+40     	; 0x1e3a <__addsf3x+0x9a>
    1e12:	ff 0f       	add	r31, r31
    1e14:	bb 1f       	adc	r27, r27
    1e16:	66 1f       	adc	r22, r22
    1e18:	77 1f       	adc	r23, r23
    1e1a:	88 1f       	adc	r24, r24
    1e1c:	c2 f7       	brpl	.-16     	; 0x1e0e <__addsf3x+0x6e>
    1e1e:	0e c0       	rjmp	.+28     	; 0x1e3c <__addsf3x+0x9c>
    1e20:	ba 0f       	add	r27, r26
    1e22:	62 1f       	adc	r22, r18
    1e24:	73 1f       	adc	r23, r19
    1e26:	84 1f       	adc	r24, r20
    1e28:	48 f4       	brcc	.+18     	; 0x1e3c <__addsf3x+0x9c>
    1e2a:	87 95       	ror	r24
    1e2c:	77 95       	ror	r23
    1e2e:	67 95       	ror	r22
    1e30:	b7 95       	ror	r27
    1e32:	f7 95       	ror	r31
    1e34:	9e 3f       	cpi	r25, 0xFE	; 254
    1e36:	08 f0       	brcs	.+2      	; 0x1e3a <__addsf3x+0x9a>
    1e38:	b0 cf       	rjmp	.-160    	; 0x1d9a <__addsf3+0x28>
    1e3a:	93 95       	inc	r25
    1e3c:	88 0f       	add	r24, r24
    1e3e:	08 f0       	brcs	.+2      	; 0x1e42 <__addsf3x+0xa2>
    1e40:	99 27       	eor	r25, r25
    1e42:	ee 0f       	add	r30, r30
    1e44:	97 95       	ror	r25
    1e46:	87 95       	ror	r24
    1e48:	08 95       	ret

00001e4a <__divsf3>:
    1e4a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__divsf3x>
    1e4e:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__fp_round>
    1e52:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__fp_pscB>
    1e56:	58 f0       	brcs	.+22     	; 0x1e6e <__divsf3+0x24>
    1e58:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__fp_pscA>
    1e5c:	40 f0       	brcs	.+16     	; 0x1e6e <__divsf3+0x24>
    1e5e:	29 f4       	brne	.+10     	; 0x1e6a <__divsf3+0x20>
    1e60:	5f 3f       	cpi	r21, 0xFF	; 255
    1e62:	29 f0       	breq	.+10     	; 0x1e6e <__divsf3+0x24>
    1e64:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__fp_inf>
    1e68:	51 11       	cpse	r21, r1
    1e6a:	0c 94 65 0e 	jmp	0x1cca	; 0x1cca <__fp_szero>
__divsf3():
    1e6e:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <__fp_nan>

00001e72 <__divsf3x>:
__divsf3x():
    1e72:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fp_split3>
    1e76:	68 f3       	brcs	.-38     	; 0x1e52 <__divsf3+0x8>

00001e78 <__divsf3_pse>:
    1e78:	99 23       	and	r25, r25
    1e7a:	b1 f3       	breq	.-20     	; 0x1e68 <__divsf3+0x1e>
    1e7c:	55 23       	and	r21, r21
    1e7e:	91 f3       	breq	.-28     	; 0x1e64 <__divsf3+0x1a>
    1e80:	95 1b       	sub	r25, r21
    1e82:	55 0b       	sbc	r21, r21
    1e84:	bb 27       	eor	r27, r27
    1e86:	aa 27       	eor	r26, r26
    1e88:	62 17       	cp	r22, r18
    1e8a:	73 07       	cpc	r23, r19
    1e8c:	84 07       	cpc	r24, r20
    1e8e:	38 f0       	brcs	.+14     	; 0x1e9e <__divsf3_pse+0x26>
    1e90:	9f 5f       	subi	r25, 0xFF	; 255
    1e92:	5f 4f       	sbci	r21, 0xFF	; 255
    1e94:	22 0f       	add	r18, r18
    1e96:	33 1f       	adc	r19, r19
    1e98:	44 1f       	adc	r20, r20
    1e9a:	aa 1f       	adc	r26, r26
    1e9c:	a9 f3       	breq	.-22     	; 0x1e88 <__divsf3_pse+0x10>
    1e9e:	35 d0       	rcall	.+106    	; 0x1f0a <__divsf3_pse+0x92>
    1ea0:	0e 2e       	mov	r0, r30
    1ea2:	3a f0       	brmi	.+14     	; 0x1eb2 <__divsf3_pse+0x3a>
    1ea4:	e0 e8       	ldi	r30, 0x80	; 128
    1ea6:	32 d0       	rcall	.+100    	; 0x1f0c <__divsf3_pse+0x94>
    1ea8:	91 50       	subi	r25, 0x01	; 1
    1eaa:	50 40       	sbci	r21, 0x00	; 0
    1eac:	e6 95       	lsr	r30
    1eae:	00 1c       	adc	r0, r0
    1eb0:	ca f7       	brpl	.-14     	; 0x1ea4 <__divsf3_pse+0x2c>
    1eb2:	2b d0       	rcall	.+86     	; 0x1f0a <__divsf3_pse+0x92>
    1eb4:	fe 2f       	mov	r31, r30
    1eb6:	29 d0       	rcall	.+82     	; 0x1f0a <__divsf3_pse+0x92>
    1eb8:	66 0f       	add	r22, r22
    1eba:	77 1f       	adc	r23, r23
    1ebc:	88 1f       	adc	r24, r24
    1ebe:	bb 1f       	adc	r27, r27
    1ec0:	26 17       	cp	r18, r22
    1ec2:	37 07       	cpc	r19, r23
    1ec4:	48 07       	cpc	r20, r24
    1ec6:	ab 07       	cpc	r26, r27
    1ec8:	b0 e8       	ldi	r27, 0x80	; 128
    1eca:	09 f0       	breq	.+2      	; 0x1ece <__divsf3_pse+0x56>
    1ecc:	bb 0b       	sbc	r27, r27
    1ece:	80 2d       	mov	r24, r0
    1ed0:	bf 01       	movw	r22, r30
    1ed2:	ff 27       	eor	r31, r31
    1ed4:	93 58       	subi	r25, 0x83	; 131
    1ed6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed8:	3a f0       	brmi	.+14     	; 0x1ee8 <__divsf3_pse+0x70>
    1eda:	9e 3f       	cpi	r25, 0xFE	; 254
    1edc:	51 05       	cpc	r21, r1
    1ede:	78 f0       	brcs	.+30     	; 0x1efe <__divsf3_pse+0x86>
    1ee0:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__fp_inf>
    1ee4:	0c 94 65 0e 	jmp	0x1cca	; 0x1cca <__fp_szero>
    1ee8:	5f 3f       	cpi	r21, 0xFF	; 255
    1eea:	e4 f3       	brlt	.-8      	; 0x1ee4 <__divsf3_pse+0x6c>
    1eec:	98 3e       	cpi	r25, 0xE8	; 232
    1eee:	d4 f3       	brlt	.-12     	; 0x1ee4 <__divsf3_pse+0x6c>
    1ef0:	86 95       	lsr	r24
    1ef2:	77 95       	ror	r23
    1ef4:	67 95       	ror	r22
    1ef6:	b7 95       	ror	r27
    1ef8:	f7 95       	ror	r31
    1efa:	9f 5f       	subi	r25, 0xFF	; 255
    1efc:	c9 f7       	brne	.-14     	; 0x1ef0 <__divsf3_pse+0x78>
    1efe:	88 0f       	add	r24, r24
    1f00:	91 1d       	adc	r25, r1
    1f02:	96 95       	lsr	r25
    1f04:	87 95       	ror	r24
    1f06:	97 f9       	bld	r25, 7
    1f08:	08 95       	ret
    1f0a:	e1 e0       	ldi	r30, 0x01	; 1
    1f0c:	66 0f       	add	r22, r22
    1f0e:	77 1f       	adc	r23, r23
    1f10:	88 1f       	adc	r24, r24
    1f12:	bb 1f       	adc	r27, r27
    1f14:	62 17       	cp	r22, r18
    1f16:	73 07       	cpc	r23, r19
    1f18:	84 07       	cpc	r24, r20
    1f1a:	ba 07       	cpc	r27, r26
    1f1c:	20 f0       	brcs	.+8      	; 0x1f26 <__divsf3_pse+0xae>
    1f1e:	62 1b       	sub	r22, r18
    1f20:	73 0b       	sbc	r23, r19
    1f22:	84 0b       	sbc	r24, r20
    1f24:	ba 0b       	sbc	r27, r26
    1f26:	ee 1f       	adc	r30, r30
    1f28:	88 f7       	brcc	.-30     	; 0x1f0c <__divsf3_pse+0x94>
    1f2a:	e0 95       	com	r30
    1f2c:	08 95       	ret

00001f2e <__fixsfsi>:
    1f2e:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <__fixunssfsi>
    1f32:	68 94       	set
    1f34:	b1 11       	cpse	r27, r1
    1f36:	0c 94 65 0e 	jmp	0x1cca	; 0x1cca <__fp_szero>
    1f3a:	08 95       	ret

00001f3c <__fixunssfsi>:
    1f3c:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__fp_splitA>
    1f40:	88 f0       	brcs	.+34     	; 0x1f64 <__fixunssfsi+0x28>
    1f42:	9f 57       	subi	r25, 0x7F	; 127
    1f44:	98 f0       	brcs	.+38     	; 0x1f6c <__fixunssfsi+0x30>
    1f46:	b9 2f       	mov	r27, r25
    1f48:	99 27       	eor	r25, r25
    1f4a:	b7 51       	subi	r27, 0x17	; 23
    1f4c:	b0 f0       	brcs	.+44     	; 0x1f7a <__fixunssfsi+0x3e>
__fixunssfsi():
    1f4e:	e1 f0       	breq	.+56     	; 0x1f88 <__fixunssfsi+0x4c>
    1f50:	66 0f       	add	r22, r22
    1f52:	77 1f       	adc	r23, r23
    1f54:	88 1f       	adc	r24, r24
    1f56:	99 1f       	adc	r25, r25
    1f58:	1a f0       	brmi	.+6      	; 0x1f60 <__fixunssfsi+0x24>
    1f5a:	ba 95       	dec	r27
    1f5c:	c9 f7       	brne	.-14     	; 0x1f50 <__fixunssfsi+0x14>
    1f5e:	14 c0       	rjmp	.+40     	; 0x1f88 <__fixunssfsi+0x4c>
    1f60:	b1 30       	cpi	r27, 0x01	; 1
    1f62:	91 f0       	breq	.+36     	; 0x1f88 <__fixunssfsi+0x4c>
    1f64:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__fp_zero>
    1f68:	b1 e0       	ldi	r27, 0x01	; 1
    1f6a:	08 95       	ret
    1f6c:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__fp_zero>
    1f70:	67 2f       	mov	r22, r23
    1f72:	78 2f       	mov	r23, r24
    1f74:	88 27       	eor	r24, r24
    1f76:	b8 5f       	subi	r27, 0xF8	; 248
    1f78:	39 f0       	breq	.+14     	; 0x1f88 <__fixunssfsi+0x4c>
    1f7a:	b9 3f       	cpi	r27, 0xF9	; 249
    1f7c:	cc f3       	brlt	.-14     	; 0x1f70 <__fixunssfsi+0x34>
    1f7e:	86 95       	lsr	r24
    1f80:	77 95       	ror	r23
    1f82:	67 95       	ror	r22
    1f84:	b3 95       	inc	r27
    1f86:	d9 f7       	brne	.-10     	; 0x1f7e <__fixunssfsi+0x42>
    1f88:	3e f4       	brtc	.+14     	; 0x1f98 <__fixunssfsi+0x5c>
    1f8a:	90 95       	com	r25
    1f8c:	80 95       	com	r24
    1f8e:	70 95       	com	r23
    1f90:	61 95       	neg	r22
    1f92:	7f 4f       	sbci	r23, 0xFF	; 255
    1f94:	8f 4f       	sbci	r24, 0xFF	; 255
    1f96:	9f 4f       	sbci	r25, 0xFF	; 255
    1f98:	08 95       	ret

00001f9a <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1f9a:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1f9c:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1f9e:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1fa0:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1fa2:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1fa4:	09 94       	ijmp

00001fa6 <malloc>:
malloc():
    1fa6:	0f 93       	push	r16
    1fa8:	1f 93       	push	r17
    1faa:	cf 93       	push	r28
    1fac:	df 93       	push	r29
    1fae:	82 30       	cpi	r24, 0x02	; 2
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	10 f4       	brcc	.+4      	; 0x1fb8 <malloc+0x12>
    1fb4:	82 e0       	ldi	r24, 0x02	; 2
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <__flp>
    1fbc:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <__flp+0x1>
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	a0 e0       	ldi	r26, 0x00	; 0
    1fc8:	30 97       	sbiw	r30, 0x00	; 0
    1fca:	99 f4       	brne	.+38     	; 0x1ff2 <malloc+0x4c>
    1fcc:	21 15       	cp	r18, r1
    1fce:	31 05       	cpc	r19, r1
    1fd0:	09 f4       	brne	.+2      	; 0x1fd4 <malloc+0x2e>
    1fd2:	4a c0       	rjmp	.+148    	; 0x2068 <malloc+0xc2>
    1fd4:	28 1b       	sub	r18, r24
    1fd6:	39 0b       	sbc	r19, r25
    1fd8:	24 30       	cpi	r18, 0x04	; 4
    1fda:	31 05       	cpc	r19, r1
    1fdc:	d8 f5       	brcc	.+118    	; 0x2054 <malloc+0xae>
    1fde:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe2:	61 15       	cp	r22, r1
    1fe4:	71 05       	cpc	r23, r1
    1fe6:	89 f1       	breq	.+98     	; 0x204a <malloc+0xa4>
    1fe8:	fb 01       	movw	r30, r22
    1fea:	93 83       	std	Z+3, r25	; 0x03
    1fec:	82 83       	std	Z+2, r24	; 0x02
    1fee:	fe 01       	movw	r30, r28
    1ff0:	11 c0       	rjmp	.+34     	; 0x2014 <malloc+0x6e>
    1ff2:	40 81       	ld	r20, Z
    1ff4:	51 81       	ldd	r21, Z+1	; 0x01
    1ff6:	02 81       	ldd	r16, Z+2	; 0x02
    1ff8:	13 81       	ldd	r17, Z+3	; 0x03
    1ffa:	48 17       	cp	r20, r24
    1ffc:	59 07       	cpc	r21, r25
    1ffe:	e0 f0       	brcs	.+56     	; 0x2038 <malloc+0x92>
    2000:	48 17       	cp	r20, r24
    2002:	59 07       	cpc	r21, r25
    2004:	99 f4       	brne	.+38     	; 0x202c <malloc+0x86>
    2006:	10 97       	sbiw	r26, 0x00	; 0
    2008:	61 f0       	breq	.+24     	; 0x2022 <malloc+0x7c>
    200a:	12 96       	adiw	r26, 0x02	; 2
    200c:	0c 93       	st	X, r16
    200e:	12 97       	sbiw	r26, 0x02	; 2
    2010:	13 96       	adiw	r26, 0x03	; 3
    2012:	1c 93       	st	X, r17
    2014:	32 96       	adiw	r30, 0x02	; 2
    2016:	cf 01       	movw	r24, r30
    2018:	df 91       	pop	r29
    201a:	cf 91       	pop	r28
    201c:	1f 91       	pop	r17
    201e:	0f 91       	pop	r16
    2020:	08 95       	ret
    2022:	00 93 3e 02 	sts	0x023E, r16	; 0x80023e <__flp>
    2026:	10 93 3f 02 	sts	0x023F, r17	; 0x80023f <__flp+0x1>
    202a:	f4 cf       	rjmp	.-24     	; 0x2014 <malloc+0x6e>
    202c:	21 15       	cp	r18, r1
    202e:	31 05       	cpc	r19, r1
    2030:	51 f0       	breq	.+20     	; 0x2046 <malloc+0xa0>
    2032:	42 17       	cp	r20, r18
    2034:	53 07       	cpc	r21, r19
    2036:	38 f0       	brcs	.+14     	; 0x2046 <malloc+0xa0>
    2038:	a9 01       	movw	r20, r18
    203a:	db 01       	movw	r26, r22
    203c:	9a 01       	movw	r18, r20
    203e:	bd 01       	movw	r22, r26
    2040:	df 01       	movw	r26, r30
    2042:	f8 01       	movw	r30, r16
    2044:	c1 cf       	rjmp	.-126    	; 0x1fc8 <malloc+0x22>
    2046:	ef 01       	movw	r28, r30
    2048:	f9 cf       	rjmp	.-14     	; 0x203c <malloc+0x96>
    204a:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <__flp+0x1>
    204e:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <__flp>
    2052:	cd cf       	rjmp	.-102    	; 0x1fee <malloc+0x48>
    2054:	fe 01       	movw	r30, r28
    2056:	e2 0f       	add	r30, r18
    2058:	f3 1f       	adc	r31, r19
    205a:	81 93       	st	Z+, r24
    205c:	91 93       	st	Z+, r25
    205e:	22 50       	subi	r18, 0x02	; 2
    2060:	31 09       	sbc	r19, r1
    2062:	39 83       	std	Y+1, r19	; 0x01
    2064:	28 83       	st	Y, r18
    2066:	d7 cf       	rjmp	.-82     	; 0x2016 <malloc+0x70>
    2068:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <__brkval>
    206c:	30 91 3d 02 	lds	r19, 0x023D	; 0x80023d <__brkval+0x1>
    2070:	23 2b       	or	r18, r19
    2072:	41 f4       	brne	.+16     	; 0x2084 <malloc+0xde>
    2074:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2078:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    207c:	30 93 3d 02 	sts	0x023D, r19	; 0x80023d <__brkval+0x1>
    2080:	20 93 3c 02 	sts	0x023C, r18	; 0x80023c <__brkval>
    2084:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2088:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    208c:	21 15       	cp	r18, r1
    208e:	31 05       	cpc	r19, r1
    2090:	41 f4       	brne	.+16     	; 0x20a2 <malloc+0xfc>
    2092:	2d b7       	in	r18, 0x3d	; 61
    2094:	3e b7       	in	r19, 0x3e	; 62
    2096:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    209a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    209e:	24 1b       	sub	r18, r20
    20a0:	35 0b       	sbc	r19, r21
    20a2:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <__brkval>
    20a6:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <__brkval+0x1>
    20aa:	e2 17       	cp	r30, r18
    20ac:	f3 07       	cpc	r31, r19
    20ae:	a0 f4       	brcc	.+40     	; 0x20d8 <malloc+0x132>
    20b0:	2e 1b       	sub	r18, r30
    20b2:	3f 0b       	sbc	r19, r31
    20b4:	28 17       	cp	r18, r24
    20b6:	39 07       	cpc	r19, r25
    20b8:	78 f0       	brcs	.+30     	; 0x20d8 <malloc+0x132>
    20ba:	ac 01       	movw	r20, r24
    20bc:	4e 5f       	subi	r20, 0xFE	; 254
    20be:	5f 4f       	sbci	r21, 0xFF	; 255
    20c0:	24 17       	cp	r18, r20
    20c2:	35 07       	cpc	r19, r21
    20c4:	48 f0       	brcs	.+18     	; 0x20d8 <malloc+0x132>
    20c6:	4e 0f       	add	r20, r30
    20c8:	5f 1f       	adc	r21, r31
    20ca:	50 93 3d 02 	sts	0x023D, r21	; 0x80023d <__brkval+0x1>
    20ce:	40 93 3c 02 	sts	0x023C, r20	; 0x80023c <__brkval>
    20d2:	81 93       	st	Z+, r24
    20d4:	91 93       	st	Z+, r25
    20d6:	9f cf       	rjmp	.-194    	; 0x2016 <malloc+0x70>
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	e0 e0       	ldi	r30, 0x00	; 0
    20dc:	9c cf       	rjmp	.-200    	; 0x2016 <malloc+0x70>

000020de <free>:
free():
    20de:	cf 93       	push	r28
    20e0:	df 93       	push	r29
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	e9 f0       	breq	.+58     	; 0x2120 <free+0x42>
    20e6:	fc 01       	movw	r30, r24
    20e8:	32 97       	sbiw	r30, 0x02	; 2
    20ea:	13 82       	std	Z+3, r1	; 0x03
    20ec:	12 82       	std	Z+2, r1	; 0x02
    20ee:	a0 91 3e 02 	lds	r26, 0x023E	; 0x80023e <__flp>
    20f2:	b0 91 3f 02 	lds	r27, 0x023F	; 0x80023f <__flp+0x1>
    20f6:	ed 01       	movw	r28, r26
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	10 97       	sbiw	r26, 0x00	; 0
    20fe:	a1 f4       	brne	.+40     	; 0x2128 <free+0x4a>
    2100:	20 81       	ld	r18, Z
    2102:	31 81       	ldd	r19, Z+1	; 0x01
    2104:	82 0f       	add	r24, r18
    2106:	93 1f       	adc	r25, r19
    2108:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <__brkval>
    210c:	30 91 3d 02 	lds	r19, 0x023D	; 0x80023d <__brkval+0x1>
    2110:	28 17       	cp	r18, r24
    2112:	39 07       	cpc	r19, r25
    2114:	09 f0       	breq	.+2      	; 0x2118 <free+0x3a>
    2116:	61 c0       	rjmp	.+194    	; 0x21da <free+0xfc>
    2118:	f0 93 3d 02 	sts	0x023D, r31	; 0x80023d <__brkval+0x1>
    211c:	e0 93 3c 02 	sts	0x023C, r30	; 0x80023c <__brkval>
    2120:	df 91       	pop	r29
    2122:	cf 91       	pop	r28
    2124:	08 95       	ret
    2126:	ea 01       	movw	r28, r20
    2128:	ce 17       	cp	r28, r30
    212a:	df 07       	cpc	r29, r31
    212c:	e8 f5       	brcc	.+122    	; 0x21a8 <free+0xca>
    212e:	4a 81       	ldd	r20, Y+2	; 0x02
    2130:	5b 81       	ldd	r21, Y+3	; 0x03
    2132:	9e 01       	movw	r18, r28
    2134:	41 15       	cp	r20, r1
    2136:	51 05       	cpc	r21, r1
    2138:	b1 f7       	brne	.-20     	; 0x2126 <free+0x48>
    213a:	e9 01       	movw	r28, r18
    213c:	fb 83       	std	Y+3, r31	; 0x03
    213e:	ea 83       	std	Y+2, r30	; 0x02
    2140:	49 91       	ld	r20, Y+
    2142:	59 91       	ld	r21, Y+
    2144:	c4 0f       	add	r28, r20
    2146:	d5 1f       	adc	r29, r21
    2148:	ec 17       	cp	r30, r28
    214a:	fd 07       	cpc	r31, r29
    214c:	61 f4       	brne	.+24     	; 0x2166 <free+0x88>
    214e:	80 81       	ld	r24, Z
    2150:	91 81       	ldd	r25, Z+1	; 0x01
    2152:	02 96       	adiw	r24, 0x02	; 2
    2154:	84 0f       	add	r24, r20
    2156:	95 1f       	adc	r25, r21
    2158:	e9 01       	movw	r28, r18
    215a:	99 83       	std	Y+1, r25	; 0x01
    215c:	88 83       	st	Y, r24
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	93 81       	ldd	r25, Z+3	; 0x03
    2162:	9b 83       	std	Y+3, r25	; 0x03
    2164:	8a 83       	std	Y+2, r24	; 0x02
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	e0 e0       	ldi	r30, 0x00	; 0
    216a:	12 96       	adiw	r26, 0x02	; 2
    216c:	8d 91       	ld	r24, X+
    216e:	9c 91       	ld	r25, X
    2170:	13 97       	sbiw	r26, 0x03	; 3
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	b9 f5       	brne	.+110    	; 0x21e4 <free+0x106>
    2176:	2d 91       	ld	r18, X+
    2178:	3c 91       	ld	r19, X
    217a:	11 97       	sbiw	r26, 0x01	; 1
    217c:	cd 01       	movw	r24, r26
    217e:	02 96       	adiw	r24, 0x02	; 2
    2180:	82 0f       	add	r24, r18
    2182:	93 1f       	adc	r25, r19
    2184:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <__brkval>
    2188:	30 91 3d 02 	lds	r19, 0x023D	; 0x80023d <__brkval+0x1>
    218c:	28 17       	cp	r18, r24
    218e:	39 07       	cpc	r19, r25
    2190:	39 f6       	brne	.-114    	; 0x2120 <free+0x42>
    2192:	30 97       	sbiw	r30, 0x00	; 0
    2194:	51 f5       	brne	.+84     	; 0x21ea <free+0x10c>
    2196:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <__flp+0x1>
    219a:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <__flp>
    219e:	b0 93 3d 02 	sts	0x023D, r27	; 0x80023d <__brkval+0x1>
    21a2:	a0 93 3c 02 	sts	0x023C, r26	; 0x80023c <__brkval>
    21a6:	bc cf       	rjmp	.-136    	; 0x2120 <free+0x42>
    21a8:	d3 83       	std	Z+3, r29	; 0x03
    21aa:	c2 83       	std	Z+2, r28	; 0x02
    21ac:	40 81       	ld	r20, Z
    21ae:	51 81       	ldd	r21, Z+1	; 0x01
    21b0:	84 0f       	add	r24, r20
    21b2:	95 1f       	adc	r25, r21
    21b4:	c8 17       	cp	r28, r24
    21b6:	d9 07       	cpc	r29, r25
    21b8:	61 f4       	brne	.+24     	; 0x21d2 <free+0xf4>
    21ba:	4e 5f       	subi	r20, 0xFE	; 254
    21bc:	5f 4f       	sbci	r21, 0xFF	; 255
    21be:	88 81       	ld	r24, Y
    21c0:	99 81       	ldd	r25, Y+1	; 0x01
    21c2:	48 0f       	add	r20, r24
    21c4:	59 1f       	adc	r21, r25
    21c6:	51 83       	std	Z+1, r21	; 0x01
    21c8:	40 83       	st	Z, r20
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	9b 81       	ldd	r25, Y+3	; 0x03
    21ce:	93 83       	std	Z+3, r25	; 0x03
    21d0:	82 83       	std	Z+2, r24	; 0x02
    21d2:	21 15       	cp	r18, r1
    21d4:	31 05       	cpc	r19, r1
    21d6:	09 f0       	breq	.+2      	; 0x21da <free+0xfc>
    21d8:	b0 cf       	rjmp	.-160    	; 0x213a <free+0x5c>
    21da:	f0 93 3f 02 	sts	0x023F, r31	; 0x80023f <__flp+0x1>
    21de:	e0 93 3e 02 	sts	0x023E, r30	; 0x80023e <__flp>
    21e2:	9e cf       	rjmp	.-196    	; 0x2120 <free+0x42>
    21e4:	fd 01       	movw	r30, r26
    21e6:	dc 01       	movw	r26, r24
    21e8:	c0 cf       	rjmp	.-128    	; 0x216a <free+0x8c>
    21ea:	13 82       	std	Z+3, r1	; 0x03
    21ec:	12 82       	std	Z+2, r1	; 0x02
    21ee:	d7 cf       	rjmp	.-82     	; 0x219e <free+0xc0>

000021f0 <realloc>:
realloc():
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	a0 e0       	ldi	r26, 0x00	; 0
    21f4:	ee ef       	ldi	r30, 0xFE	; 254
    21f6:	f0 e1       	ldi	r31, 0x10	; 16
    21f8:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <__prologue_saves__+0x4>
    21fc:	8c 01       	movw	r16, r24
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	51 f4       	brne	.+20     	; 0x2216 <realloc+0x26>
    2202:	cb 01       	movw	r24, r22
    2204:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <malloc>
    2208:	8c 01       	movw	r16, r24
    220a:	c8 01       	movw	r24, r16
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	e0 e1       	ldi	r30, 0x10	; 16
    2212:	0c 94 9f 0e 	jmp	0x1d3e	; 0x1d3e <__epilogue_restores__+0x4>
    2216:	fc 01       	movw	r30, r24
    2218:	e6 0f       	add	r30, r22
    221a:	f7 1f       	adc	r31, r23
    221c:	9c 01       	movw	r18, r24
    221e:	22 50       	subi	r18, 0x02	; 2
    2220:	31 09       	sbc	r19, r1
    2222:	e2 17       	cp	r30, r18
    2224:	f3 07       	cpc	r31, r19
    2226:	08 f4       	brcc	.+2      	; 0x222a <realloc+0x3a>
    2228:	9d c0       	rjmp	.+314    	; 0x2364 <realloc+0x174>
    222a:	d9 01       	movw	r26, r18
    222c:	cd 91       	ld	r28, X+
    222e:	dc 91       	ld	r29, X
    2230:	11 97       	sbiw	r26, 0x01	; 1
    2232:	c6 17       	cp	r28, r22
    2234:	d7 07       	cpc	r29, r23
    2236:	98 f0       	brcs	.+38     	; 0x225e <realloc+0x6e>
    2238:	c5 30       	cpi	r28, 0x05	; 5
    223a:	d1 05       	cpc	r29, r1
    223c:	30 f3       	brcs	.-52     	; 0x220a <realloc+0x1a>
    223e:	ce 01       	movw	r24, r28
    2240:	04 97       	sbiw	r24, 0x04	; 4
    2242:	86 17       	cp	r24, r22
    2244:	97 07       	cpc	r25, r23
    2246:	08 f3       	brcs	.-62     	; 0x220a <realloc+0x1a>
    2248:	c6 1b       	sub	r28, r22
    224a:	d7 0b       	sbc	r29, r23
    224c:	22 97       	sbiw	r28, 0x02	; 2
    224e:	c1 93       	st	Z+, r28
    2250:	d1 93       	st	Z+, r29
    2252:	6d 93       	st	X+, r22
    2254:	7c 93       	st	X, r23
    2256:	cf 01       	movw	r24, r30
    2258:	0e 94 6f 10 	call	0x20de	; 0x20de <free>
    225c:	d6 cf       	rjmp	.-84     	; 0x220a <realloc+0x1a>
    225e:	5b 01       	movw	r10, r22
    2260:	ac 1a       	sub	r10, r28
    2262:	bd 0a       	sbc	r11, r29
    2264:	4c 01       	movw	r8, r24
    2266:	8c 0e       	add	r8, r28
    2268:	9d 1e       	adc	r9, r29
    226a:	a0 91 3e 02 	lds	r26, 0x023E	; 0x80023e <__flp>
    226e:	b0 91 3f 02 	lds	r27, 0x023F	; 0x80023f <__flp+0x1>
    2272:	51 2c       	mov	r5, r1
    2274:	41 2c       	mov	r4, r1
    2276:	f1 2c       	mov	r15, r1
    2278:	e1 2c       	mov	r14, r1
    227a:	10 97       	sbiw	r26, 0x00	; 0
    227c:	31 f5       	brne	.+76     	; 0x22ca <realloc+0xda>
    227e:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <__brkval>
    2282:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <__brkval+0x1>
    2286:	88 15       	cp	r24, r8
    2288:	99 05       	cpc	r25, r9
    228a:	09 f0       	breq	.+2      	; 0x228e <realloc+0x9e>
    228c:	5c c0       	rjmp	.+184    	; 0x2346 <realloc+0x156>
    228e:	46 16       	cp	r4, r22
    2290:	57 06       	cpc	r5, r23
    2292:	08 f0       	brcs	.+2      	; 0x2296 <realloc+0xa6>
    2294:	58 c0       	rjmp	.+176    	; 0x2346 <realloc+0x156>
    2296:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    229a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    229e:	00 97       	sbiw	r24, 0x00	; 0
    22a0:	41 f4       	brne	.+16     	; 0x22b2 <realloc+0xc2>
    22a2:	8d b7       	in	r24, 0x3d	; 61
    22a4:	9e b7       	in	r25, 0x3e	; 62
    22a6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    22aa:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    22ae:	84 1b       	sub	r24, r20
    22b0:	95 0b       	sbc	r25, r21
    22b2:	e8 17       	cp	r30, r24
    22b4:	f9 07       	cpc	r31, r25
    22b6:	08 f0       	brcs	.+2      	; 0x22ba <realloc+0xca>
    22b8:	55 c0       	rjmp	.+170    	; 0x2364 <realloc+0x174>
    22ba:	f0 93 3d 02 	sts	0x023D, r31	; 0x80023d <__brkval+0x1>
    22be:	e0 93 3c 02 	sts	0x023C, r30	; 0x80023c <__brkval>
    22c2:	f9 01       	movw	r30, r18
    22c4:	71 83       	std	Z+1, r23	; 0x01
    22c6:	60 83       	st	Z, r22
    22c8:	a0 cf       	rjmp	.-192    	; 0x220a <realloc+0x1a>
    22ca:	8d 91       	ld	r24, X+
    22cc:	9c 91       	ld	r25, X
    22ce:	11 97       	sbiw	r26, 0x01	; 1
    22d0:	12 96       	adiw	r26, 0x02	; 2
    22d2:	6c 90       	ld	r6, X
    22d4:	12 97       	sbiw	r26, 0x02	; 2
    22d6:	13 96       	adiw	r26, 0x03	; 3
    22d8:	7c 90       	ld	r7, X
    22da:	13 97       	sbiw	r26, 0x03	; 3
    22dc:	a8 15       	cp	r26, r8
    22de:	b9 05       	cpc	r27, r9
    22e0:	59 f5       	brne	.+86     	; 0x2338 <realloc+0x148>
    22e2:	6c 01       	movw	r12, r24
    22e4:	42 e0       	ldi	r20, 0x02	; 2
    22e6:	c4 0e       	add	r12, r20
    22e8:	d1 1c       	adc	r13, r1
    22ea:	ca 14       	cp	r12, r10
    22ec:	db 04       	cpc	r13, r11
    22ee:	20 f1       	brcs	.+72     	; 0x2338 <realloc+0x148>
    22f0:	ac 01       	movw	r20, r24
    22f2:	4a 19       	sub	r20, r10
    22f4:	5b 09       	sbc	r21, r11
    22f6:	da 01       	movw	r26, r20
    22f8:	12 96       	adiw	r26, 0x02	; 2
    22fa:	15 97       	sbiw	r26, 0x05	; 5
    22fc:	80 f0       	brcs	.+32     	; 0x231e <realloc+0x12e>
    22fe:	62 82       	std	Z+2, r6	; 0x02
    2300:	73 82       	std	Z+3, r7	; 0x03
    2302:	51 83       	std	Z+1, r21	; 0x01
    2304:	40 83       	st	Z, r20
    2306:	d9 01       	movw	r26, r18
    2308:	6d 93       	st	X+, r22
    230a:	7c 93       	st	X, r23
    230c:	e1 14       	cp	r14, r1
    230e:	f1 04       	cpc	r15, r1
    2310:	71 f0       	breq	.+28     	; 0x232e <realloc+0x13e>
    2312:	d7 01       	movw	r26, r14
    2314:	13 96       	adiw	r26, 0x03	; 3
    2316:	fc 93       	st	X, r31
    2318:	ee 93       	st	-X, r30
    231a:	12 97       	sbiw	r26, 0x02	; 2
    231c:	76 cf       	rjmp	.-276    	; 0x220a <realloc+0x1a>
    231e:	22 96       	adiw	r28, 0x02	; 2
    2320:	8c 0f       	add	r24, r28
    2322:	9d 1f       	adc	r25, r29
    2324:	f9 01       	movw	r30, r18
    2326:	91 83       	std	Z+1, r25	; 0x01
    2328:	80 83       	st	Z, r24
    232a:	f3 01       	movw	r30, r6
    232c:	ef cf       	rjmp	.-34     	; 0x230c <realloc+0x11c>
    232e:	f0 93 3f 02 	sts	0x023F, r31	; 0x80023f <__flp+0x1>
    2332:	e0 93 3e 02 	sts	0x023E, r30	; 0x80023e <__flp>
    2336:	69 cf       	rjmp	.-302    	; 0x220a <realloc+0x1a>
    2338:	48 16       	cp	r4, r24
    233a:	59 06       	cpc	r5, r25
    233c:	08 f4       	brcc	.+2      	; 0x2340 <realloc+0x150>
    233e:	2c 01       	movw	r4, r24
    2340:	7d 01       	movw	r14, r26
    2342:	d3 01       	movw	r26, r6
    2344:	9a cf       	rjmp	.-204    	; 0x227a <realloc+0x8a>
    2346:	cb 01       	movw	r24, r22
    2348:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <malloc>
    234c:	7c 01       	movw	r14, r24
    234e:	00 97       	sbiw	r24, 0x00	; 0
    2350:	49 f0       	breq	.+18     	; 0x2364 <realloc+0x174>
    2352:	ae 01       	movw	r20, r28
    2354:	b8 01       	movw	r22, r16
    2356:	0e 94 b5 11 	call	0x236a	; 0x236a <memcpy>
    235a:	c8 01       	movw	r24, r16
    235c:	0e 94 6f 10 	call	0x20de	; 0x20de <free>
    2360:	87 01       	movw	r16, r14
    2362:	53 cf       	rjmp	.-346    	; 0x220a <realloc+0x1a>
    2364:	10 e0       	ldi	r17, 0x00	; 0
    2366:	00 e0       	ldi	r16, 0x00	; 0
    2368:	50 cf       	rjmp	.-352    	; 0x220a <realloc+0x1a>

0000236a <memcpy>:
memcpy():
    236a:	fb 01       	movw	r30, r22
    236c:	dc 01       	movw	r26, r24
    236e:	02 c0       	rjmp	.+4      	; 0x2374 <memcpy+0xa>
    2370:	01 90       	ld	r0, Z+
    2372:	0d 92       	st	X+, r0
    2374:	41 50       	subi	r20, 0x01	; 1
    2376:	50 40       	sbci	r21, 0x00	; 0
    2378:	d8 f7       	brcc	.-10     	; 0x2370 <memcpy+0x6>
    237a:	08 95       	ret

0000237c <strcpy>:
strcpy():
    237c:	fb 01       	movw	r30, r22
    237e:	dc 01       	movw	r26, r24
    2380:	01 90       	ld	r0, Z+
    2382:	0d 92       	st	X+, r0
    2384:	00 20       	and	r0, r0
    2386:	e1 f7       	brne	.-8      	; 0x2380 <strcpy+0x4>
    2388:	08 95       	ret

0000238a <strncpy>:
strncpy():
    238a:	fb 01       	movw	r30, r22
    238c:	dc 01       	movw	r26, r24
    238e:	41 50       	subi	r20, 0x01	; 1
    2390:	50 40       	sbci	r21, 0x00	; 0
    2392:	48 f0       	brcs	.+18     	; 0x23a6 <strncpy+0x1c>
    2394:	01 90       	ld	r0, Z+
    2396:	0d 92       	st	X+, r0
    2398:	00 20       	and	r0, r0
    239a:	c9 f7       	brne	.-14     	; 0x238e <strncpy+0x4>
    239c:	01 c0       	rjmp	.+2      	; 0x23a0 <strncpy+0x16>
    239e:	1d 92       	st	X+, r1
    23a0:	41 50       	subi	r20, 0x01	; 1
    23a2:	50 40       	sbci	r21, 0x00	; 0
    23a4:	e0 f7       	brcc	.-8      	; 0x239e <strncpy+0x14>
    23a6:	08 95       	ret

000023a8 <sprintf>:
sprintf():
    23a8:	ae e0       	ldi	r26, 0x0E	; 14
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	ea ed       	ldi	r30, 0xDA	; 218
    23ae:	f1 e1       	ldi	r31, 0x11	; 17
    23b0:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <__prologue_saves__+0x1c>
    23b4:	0d 89       	ldd	r16, Y+21	; 0x15
    23b6:	1e 89       	ldd	r17, Y+22	; 0x16
    23b8:	86 e0       	ldi	r24, 0x06	; 6
    23ba:	8c 83       	std	Y+4, r24	; 0x04
    23bc:	1a 83       	std	Y+2, r17	; 0x02
    23be:	09 83       	std	Y+1, r16	; 0x01
    23c0:	8f ef       	ldi	r24, 0xFF	; 255
    23c2:	9f e7       	ldi	r25, 0x7F	; 127
    23c4:	9e 83       	std	Y+6, r25	; 0x06
    23c6:	8d 83       	std	Y+5, r24	; 0x05
    23c8:	ae 01       	movw	r20, r28
    23ca:	47 5e       	subi	r20, 0xE7	; 231
    23cc:	5f 4f       	sbci	r21, 0xFF	; 255
    23ce:	6f 89       	ldd	r22, Y+23	; 0x17
    23d0:	78 8d       	ldd	r23, Y+24	; 0x18
    23d2:	ce 01       	movw	r24, r28
    23d4:	01 96       	adiw	r24, 0x01	; 1
    23d6:	0e 94 f7 11 	call	0x23ee	; 0x23ee <vfprintf>
    23da:	2f 81       	ldd	r18, Y+7	; 0x07
    23dc:	38 85       	ldd	r19, Y+8	; 0x08
    23de:	02 0f       	add	r16, r18
    23e0:	13 1f       	adc	r17, r19
    23e2:	f8 01       	movw	r30, r16
    23e4:	10 82       	st	Z, r1
    23e6:	2e 96       	adiw	r28, 0x0e	; 14
    23e8:	e4 e0       	ldi	r30, 0x04	; 4
    23ea:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__epilogue_restores__+0x1c>

000023ee <vfprintf>:
vfprintf():
    23ee:	ab e0       	ldi	r26, 0x0B	; 11
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	ed ef       	ldi	r30, 0xFD	; 253
    23f4:	f1 e1       	ldi	r31, 0x11	; 17
    23f6:	0c 94 81 0e 	jmp	0x1d02	; 0x1d02 <__prologue_saves__>
    23fa:	7c 01       	movw	r14, r24
    23fc:	3b 01       	movw	r6, r22
    23fe:	8a 01       	movw	r16, r20
    2400:	fc 01       	movw	r30, r24
    2402:	17 82       	std	Z+7, r1	; 0x07
    2404:	16 82       	std	Z+6, r1	; 0x06
    2406:	83 81       	ldd	r24, Z+3	; 0x03
    2408:	81 ff       	sbrs	r24, 1
    240a:	c8 c1       	rjmp	.+912    	; 0x279c <vfprintf+0x3ae>
    240c:	ce 01       	movw	r24, r28
    240e:	01 96       	adiw	r24, 0x01	; 1
    2410:	5c 01       	movw	r10, r24
    2412:	f7 01       	movw	r30, r14
    2414:	93 81       	ldd	r25, Z+3	; 0x03
    2416:	f3 01       	movw	r30, r6
    2418:	93 fd       	sbrc	r25, 3
    241a:	85 91       	lpm	r24, Z+
    241c:	93 ff       	sbrs	r25, 3
    241e:	81 91       	ld	r24, Z+
    2420:	3f 01       	movw	r6, r30
    2422:	88 23       	and	r24, r24
    2424:	09 f4       	brne	.+2      	; 0x2428 <vfprintf+0x3a>
    2426:	53 c1       	rjmp	.+678    	; 0x26ce <vfprintf+0x2e0>
    2428:	85 32       	cpi	r24, 0x25	; 37
    242a:	39 f4       	brne	.+14     	; 0x243a <vfprintf+0x4c>
    242c:	93 fd       	sbrc	r25, 3
    242e:	85 91       	lpm	r24, Z+
    2430:	93 ff       	sbrs	r25, 3
    2432:	81 91       	ld	r24, Z+
    2434:	3f 01       	movw	r6, r30
    2436:	85 32       	cpi	r24, 0x25	; 37
    2438:	29 f4       	brne	.+10     	; 0x2444 <vfprintf+0x56>
    243a:	b7 01       	movw	r22, r14
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <fputc>
    2442:	e7 cf       	rjmp	.-50     	; 0x2412 <vfprintf+0x24>
    2444:	91 2c       	mov	r9, r1
    2446:	21 2c       	mov	r2, r1
    2448:	31 2c       	mov	r3, r1
    244a:	ff e1       	ldi	r31, 0x1F	; 31
    244c:	f3 15       	cp	r31, r3
    244e:	38 f0       	brcs	.+14     	; 0x245e <vfprintf+0x70>
    2450:	8b 32       	cpi	r24, 0x2B	; 43
    2452:	11 f1       	breq	.+68     	; 0x2498 <vfprintf+0xaa>
    2454:	90 f4       	brcc	.+36     	; 0x247a <vfprintf+0x8c>
    2456:	80 32       	cpi	r24, 0x20	; 32
    2458:	09 f1       	breq	.+66     	; 0x249c <vfprintf+0xae>
    245a:	83 32       	cpi	r24, 0x23	; 35
    245c:	29 f1       	breq	.+74     	; 0x24a8 <vfprintf+0xba>
    245e:	37 fc       	sbrc	r3, 7
    2460:	3c c0       	rjmp	.+120    	; 0x24da <vfprintf+0xec>
    2462:	20 ed       	ldi	r18, 0xD0	; 208
    2464:	28 0f       	add	r18, r24
    2466:	2a 30       	cpi	r18, 0x0A	; 10
    2468:	50 f5       	brcc	.+84     	; 0x24be <vfprintf+0xd0>
    246a:	36 fe       	sbrs	r3, 6
    246c:	20 c0       	rjmp	.+64     	; 0x24ae <vfprintf+0xc0>
    246e:	8a e0       	ldi	r24, 0x0A	; 10
    2470:	98 9e       	mul	r9, r24
    2472:	20 0d       	add	r18, r0
    2474:	11 24       	eor	r1, r1
    2476:	92 2e       	mov	r9, r18
    2478:	06 c0       	rjmp	.+12     	; 0x2486 <vfprintf+0x98>
    247a:	8d 32       	cpi	r24, 0x2D	; 45
    247c:	91 f0       	breq	.+36     	; 0x24a2 <vfprintf+0xb4>
    247e:	80 33       	cpi	r24, 0x30	; 48
    2480:	71 f7       	brne	.-36     	; 0x245e <vfprintf+0x70>
    2482:	68 94       	set
    2484:	30 f8       	bld	r3, 0
    2486:	f3 01       	movw	r30, r6
    2488:	93 fd       	sbrc	r25, 3
    248a:	85 91       	lpm	r24, Z+
    248c:	93 ff       	sbrs	r25, 3
    248e:	81 91       	ld	r24, Z+
    2490:	3f 01       	movw	r6, r30
    2492:	81 11       	cpse	r24, r1
    2494:	da cf       	rjmp	.-76     	; 0x244a <vfprintf+0x5c>
    2496:	21 c0       	rjmp	.+66     	; 0x24da <vfprintf+0xec>
    2498:	68 94       	set
    249a:	31 f8       	bld	r3, 1
    249c:	68 94       	set
    249e:	32 f8       	bld	r3, 2
    24a0:	f2 cf       	rjmp	.-28     	; 0x2486 <vfprintf+0x98>
    24a2:	68 94       	set
    24a4:	33 f8       	bld	r3, 3
    24a6:	ef cf       	rjmp	.-34     	; 0x2486 <vfprintf+0x98>
    24a8:	68 94       	set
    24aa:	34 f8       	bld	r3, 4
    24ac:	ec cf       	rjmp	.-40     	; 0x2486 <vfprintf+0x98>
    24ae:	ea e0       	ldi	r30, 0x0A	; 10
    24b0:	2e 9e       	mul	r2, r30
    24b2:	20 0d       	add	r18, r0
    24b4:	11 24       	eor	r1, r1
    24b6:	22 2e       	mov	r2, r18
    24b8:	68 94       	set
    24ba:	35 f8       	bld	r3, 5
    24bc:	e4 cf       	rjmp	.-56     	; 0x2486 <vfprintf+0x98>
    24be:	8e 32       	cpi	r24, 0x2E	; 46
    24c0:	29 f4       	brne	.+10     	; 0x24cc <vfprintf+0xde>
    24c2:	36 fc       	sbrc	r3, 6
    24c4:	04 c1       	rjmp	.+520    	; 0x26ce <vfprintf+0x2e0>
    24c6:	68 94       	set
    24c8:	36 f8       	bld	r3, 6
    24ca:	dd cf       	rjmp	.-70     	; 0x2486 <vfprintf+0x98>
    24cc:	8c 36       	cpi	r24, 0x6C	; 108
    24ce:	19 f4       	brne	.+6      	; 0x24d6 <vfprintf+0xe8>
    24d0:	68 94       	set
    24d2:	37 f8       	bld	r3, 7
    24d4:	d8 cf       	rjmp	.-80     	; 0x2486 <vfprintf+0x98>
    24d6:	88 36       	cpi	r24, 0x68	; 104
    24d8:	b1 f2       	breq	.-84     	; 0x2486 <vfprintf+0x98>
    24da:	98 2f       	mov	r25, r24
    24dc:	9f 7d       	andi	r25, 0xDF	; 223
    24de:	95 54       	subi	r25, 0x45	; 69
    24e0:	93 30       	cpi	r25, 0x03	; 3
    24e2:	e0 f0       	brcs	.+56     	; 0x251c <vfprintf+0x12e>
    24e4:	83 36       	cpi	r24, 0x63	; 99
    24e6:	a1 f1       	breq	.+104    	; 0x2550 <vfprintf+0x162>
    24e8:	83 37       	cpi	r24, 0x73	; 115
    24ea:	c1 f1       	breq	.+112    	; 0x255c <vfprintf+0x16e>
    24ec:	83 35       	cpi	r24, 0x53	; 83
    24ee:	09 f0       	breq	.+2      	; 0x24f2 <vfprintf+0x104>
    24f0:	63 c0       	rjmp	.+198    	; 0x25b8 <vfprintf+0x1ca>
    24f2:	28 01       	movw	r4, r16
    24f4:	f2 e0       	ldi	r31, 0x02	; 2
    24f6:	4f 0e       	add	r4, r31
    24f8:	51 1c       	adc	r5, r1
    24fa:	f8 01       	movw	r30, r16
    24fc:	c0 80       	ld	r12, Z
    24fe:	d1 80       	ldd	r13, Z+1	; 0x01
    2500:	69 2d       	mov	r22, r9
    2502:	70 e0       	ldi	r23, 0x00	; 0
    2504:	36 fc       	sbrc	r3, 6
    2506:	02 c0       	rjmp	.+4      	; 0x250c <vfprintf+0x11e>
    2508:	6f ef       	ldi	r22, 0xFF	; 255
    250a:	7f ef       	ldi	r23, 0xFF	; 255
    250c:	c6 01       	movw	r24, r12
    250e:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <strnlen_P>
    2512:	4c 01       	movw	r8, r24
    2514:	68 94       	set
    2516:	37 f8       	bld	r3, 7
    2518:	82 01       	movw	r16, r4
    251a:	0a c0       	rjmp	.+20     	; 0x2530 <vfprintf+0x142>
    251c:	0c 5f       	subi	r16, 0xFC	; 252
    251e:	1f 4f       	sbci	r17, 0xFF	; 255
    2520:	ff e3       	ldi	r31, 0x3F	; 63
    2522:	f9 83       	std	Y+1, r31	; 0x01
    2524:	88 24       	eor	r8, r8
    2526:	83 94       	inc	r8
    2528:	91 2c       	mov	r9, r1
    252a:	65 01       	movw	r12, r10
    252c:	e8 94       	clt
    252e:	37 f8       	bld	r3, 7
    2530:	33 fe       	sbrs	r3, 3
    2532:	2d c0       	rjmp	.+90     	; 0x258e <vfprintf+0x1a0>
    2534:	52 2c       	mov	r5, r2
    2536:	81 14       	cp	r8, r1
    2538:	91 04       	cpc	r9, r1
    253a:	71 f5       	brne	.+92     	; 0x2598 <vfprintf+0x1aa>
    253c:	55 20       	and	r5, r5
    253e:	09 f4       	brne	.+2      	; 0x2542 <vfprintf+0x154>
    2540:	68 cf       	rjmp	.-304    	; 0x2412 <vfprintf+0x24>
    2542:	b7 01       	movw	r22, r14
    2544:	80 e2       	ldi	r24, 0x20	; 32
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	0e 94 e7 13 	call	0x27ce	; 0x27ce <fputc>
    254c:	5a 94       	dec	r5
    254e:	f6 cf       	rjmp	.-20     	; 0x253c <vfprintf+0x14e>
    2550:	f8 01       	movw	r30, r16
    2552:	80 81       	ld	r24, Z
    2554:	89 83       	std	Y+1, r24	; 0x01
    2556:	0e 5f       	subi	r16, 0xFE	; 254
    2558:	1f 4f       	sbci	r17, 0xFF	; 255
    255a:	e4 cf       	rjmp	.-56     	; 0x2524 <vfprintf+0x136>
    255c:	28 01       	movw	r4, r16
    255e:	f2 e0       	ldi	r31, 0x02	; 2
    2560:	4f 0e       	add	r4, r31
    2562:	51 1c       	adc	r5, r1
    2564:	f8 01       	movw	r30, r16
    2566:	c0 80       	ld	r12, Z
    2568:	d1 80       	ldd	r13, Z+1	; 0x01
    256a:	69 2d       	mov	r22, r9
    256c:	70 e0       	ldi	r23, 0x00	; 0
    256e:	36 fc       	sbrc	r3, 6
    2570:	02 c0       	rjmp	.+4      	; 0x2576 <vfprintf+0x188>
    2572:	6f ef       	ldi	r22, 0xFF	; 255
    2574:	7f ef       	ldi	r23, 0xFF	; 255
    2576:	c6 01       	movw	r24, r12
    2578:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <strnlen>
    257c:	4c 01       	movw	r8, r24
    257e:	82 01       	movw	r16, r4
    2580:	d5 cf       	rjmp	.-86     	; 0x252c <vfprintf+0x13e>
    2582:	b7 01       	movw	r22, r14
    2584:	80 e2       	ldi	r24, 0x20	; 32
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	0e 94 e7 13 	call	0x27ce	; 0x27ce <fputc>
    258c:	2a 94       	dec	r2
    258e:	28 14       	cp	r2, r8
    2590:	19 04       	cpc	r1, r9
    2592:	09 f0       	breq	.+2      	; 0x2596 <vfprintf+0x1a8>
    2594:	b0 f7       	brcc	.-20     	; 0x2582 <vfprintf+0x194>
    2596:	ce cf       	rjmp	.-100    	; 0x2534 <vfprintf+0x146>
    2598:	f6 01       	movw	r30, r12
    259a:	37 fc       	sbrc	r3, 7
    259c:	85 91       	lpm	r24, Z+
    259e:	37 fe       	sbrs	r3, 7
    25a0:	81 91       	ld	r24, Z+
    25a2:	6f 01       	movw	r12, r30
    25a4:	b7 01       	movw	r22, r14
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	0e 94 e7 13 	call	0x27ce	; 0x27ce <fputc>
    25ac:	51 10       	cpse	r5, r1
    25ae:	5a 94       	dec	r5
    25b0:	f1 e0       	ldi	r31, 0x01	; 1
    25b2:	8f 1a       	sub	r8, r31
    25b4:	91 08       	sbc	r9, r1
    25b6:	bf cf       	rjmp	.-130    	; 0x2536 <vfprintf+0x148>
    25b8:	84 36       	cpi	r24, 0x64	; 100
    25ba:	19 f0       	breq	.+6      	; 0x25c2 <vfprintf+0x1d4>
    25bc:	89 36       	cpi	r24, 0x69	; 105
    25be:	09 f0       	breq	.+2      	; 0x25c2 <vfprintf+0x1d4>
    25c0:	77 c0       	rjmp	.+238    	; 0x26b0 <vfprintf+0x2c2>
    25c2:	f8 01       	movw	r30, r16
    25c4:	37 fe       	sbrs	r3, 7
    25c6:	6b c0       	rjmp	.+214    	; 0x269e <vfprintf+0x2b0>
    25c8:	60 81       	ld	r22, Z
    25ca:	71 81       	ldd	r23, Z+1	; 0x01
    25cc:	82 81       	ldd	r24, Z+2	; 0x02
    25ce:	93 81       	ldd	r25, Z+3	; 0x03
    25d0:	0c 5f       	subi	r16, 0xFC	; 252
    25d2:	1f 4f       	sbci	r17, 0xFF	; 255
    25d4:	f3 2d       	mov	r31, r3
    25d6:	ff 76       	andi	r31, 0x6F	; 111
    25d8:	3f 2e       	mov	r3, r31
    25da:	97 ff       	sbrs	r25, 7
    25dc:	09 c0       	rjmp	.+18     	; 0x25f0 <vfprintf+0x202>
    25de:	90 95       	com	r25
    25e0:	80 95       	com	r24
    25e2:	70 95       	com	r23
    25e4:	61 95       	neg	r22
    25e6:	7f 4f       	sbci	r23, 0xFF	; 255
    25e8:	8f 4f       	sbci	r24, 0xFF	; 255
    25ea:	9f 4f       	sbci	r25, 0xFF	; 255
    25ec:	68 94       	set
    25ee:	37 f8       	bld	r3, 7
    25f0:	2a e0       	ldi	r18, 0x0A	; 10
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	a5 01       	movw	r20, r10
    25f6:	0e 94 17 14 	call	0x282e	; 0x282e <__ultoa_invert>
    25fa:	c8 2e       	mov	r12, r24
    25fc:	ca 18       	sub	r12, r10
    25fe:	8c 2c       	mov	r8, r12
    2600:	43 2c       	mov	r4, r3
    2602:	36 fe       	sbrs	r3, 6
    2604:	0c c0       	rjmp	.+24     	; 0x261e <vfprintf+0x230>
    2606:	e8 94       	clt
    2608:	40 f8       	bld	r4, 0
    260a:	c9 14       	cp	r12, r9
    260c:	40 f4       	brcc	.+16     	; 0x261e <vfprintf+0x230>
    260e:	34 fe       	sbrs	r3, 4
    2610:	05 c0       	rjmp	.+10     	; 0x261c <vfprintf+0x22e>
    2612:	32 fc       	sbrc	r3, 2
    2614:	03 c0       	rjmp	.+6      	; 0x261c <vfprintf+0x22e>
    2616:	f3 2d       	mov	r31, r3
    2618:	fe 7e       	andi	r31, 0xEE	; 238
    261a:	4f 2e       	mov	r4, r31
    261c:	89 2c       	mov	r8, r9
    261e:	44 fe       	sbrs	r4, 4
    2620:	95 c0       	rjmp	.+298    	; 0x274c <vfprintf+0x35e>
    2622:	fe 01       	movw	r30, r28
    2624:	ec 0d       	add	r30, r12
    2626:	f1 1d       	adc	r31, r1
    2628:	80 81       	ld	r24, Z
    262a:	80 33       	cpi	r24, 0x30	; 48
    262c:	09 f0       	breq	.+2      	; 0x2630 <vfprintf+0x242>
    262e:	87 c0       	rjmp	.+270    	; 0x273e <vfprintf+0x350>
    2630:	24 2d       	mov	r18, r4
    2632:	29 7e       	andi	r18, 0xE9	; 233
    2634:	42 2e       	mov	r4, r18
    2636:	84 2d       	mov	r24, r4
    2638:	88 70       	andi	r24, 0x08	; 8
    263a:	58 2e       	mov	r5, r24
    263c:	43 fc       	sbrc	r4, 3
    263e:	95 c0       	rjmp	.+298    	; 0x276a <vfprintf+0x37c>
    2640:	40 fe       	sbrs	r4, 0
    2642:	8f c0       	rjmp	.+286    	; 0x2762 <vfprintf+0x374>
    2644:	9c 2c       	mov	r9, r12
    2646:	82 14       	cp	r8, r2
    2648:	18 f4       	brcc	.+6      	; 0x2650 <vfprintf+0x262>
    264a:	2c 0c       	add	r2, r12
    264c:	92 2c       	mov	r9, r2
    264e:	98 18       	sub	r9, r8
    2650:	44 fe       	sbrs	r4, 4
    2652:	91 c0       	rjmp	.+290    	; 0x2776 <vfprintf+0x388>
    2654:	b7 01       	movw	r22, r14
    2656:	80 e3       	ldi	r24, 0x30	; 48
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	0e 94 e7 13 	call	0x27ce	; 0x27ce <fputc>
    265e:	42 fe       	sbrs	r4, 2
    2660:	09 c0       	rjmp	.+18     	; 0x2674 <vfprintf+0x286>
    2662:	88 e7       	ldi	r24, 0x78	; 120
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	41 fe       	sbrs	r4, 1
    2668:	02 c0       	rjmp	.+4      	; 0x266e <vfprintf+0x280>
    266a:	88 e5       	ldi	r24, 0x58	; 88
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	b7 01       	movw	r22, r14
    2670:	0e 94 e7 13 	call	0x27ce	; 0x27ce <fputc>
    2674:	c9 14       	cp	r12, r9
    2676:	08 f4       	brcc	.+2      	; 0x267a <vfprintf+0x28c>
    2678:	8a c0       	rjmp	.+276    	; 0x278e <vfprintf+0x3a0>
    267a:	ca 94       	dec	r12
    267c:	d1 2c       	mov	r13, r1
    267e:	9f ef       	ldi	r25, 0xFF	; 255
    2680:	c9 1a       	sub	r12, r25
    2682:	d9 0a       	sbc	r13, r25
    2684:	ca 0c       	add	r12, r10
    2686:	db 1c       	adc	r13, r11
    2688:	f6 01       	movw	r30, r12
    268a:	82 91       	ld	r24, -Z
    268c:	6f 01       	movw	r12, r30
    268e:	b7 01       	movw	r22, r14
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	0e 94 e7 13 	call	0x27ce	; 0x27ce <fputc>
    2696:	ac 14       	cp	r10, r12
    2698:	bd 04       	cpc	r11, r13
    269a:	b1 f7       	brne	.-20     	; 0x2688 <vfprintf+0x29a>
    269c:	4f cf       	rjmp	.-354    	; 0x253c <vfprintf+0x14e>
    269e:	60 81       	ld	r22, Z
    26a0:	71 81       	ldd	r23, Z+1	; 0x01
    26a2:	07 2e       	mov	r0, r23
    26a4:	00 0c       	add	r0, r0
    26a6:	88 0b       	sbc	r24, r24
    26a8:	99 0b       	sbc	r25, r25
    26aa:	0e 5f       	subi	r16, 0xFE	; 254
    26ac:	1f 4f       	sbci	r17, 0xFF	; 255
    26ae:	92 cf       	rjmp	.-220    	; 0x25d4 <vfprintf+0x1e6>
    26b0:	d3 2c       	mov	r13, r3
    26b2:	e8 94       	clt
    26b4:	d4 f8       	bld	r13, 4
    26b6:	2a e0       	ldi	r18, 0x0A	; 10
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	85 37       	cpi	r24, 0x75	; 117
    26bc:	39 f1       	breq	.+78     	; 0x270c <vfprintf+0x31e>
    26be:	23 2d       	mov	r18, r3
    26c0:	29 7f       	andi	r18, 0xF9	; 249
    26c2:	d2 2e       	mov	r13, r18
    26c4:	8f 36       	cpi	r24, 0x6F	; 111
    26c6:	01 f1       	breq	.+64     	; 0x2708 <vfprintf+0x31a>
    26c8:	48 f4       	brcc	.+18     	; 0x26dc <vfprintf+0x2ee>
    26ca:	88 35       	cpi	r24, 0x58	; 88
    26cc:	a9 f0       	breq	.+42     	; 0x26f8 <vfprintf+0x30a>
    26ce:	f7 01       	movw	r30, r14
    26d0:	86 81       	ldd	r24, Z+6	; 0x06
    26d2:	97 81       	ldd	r25, Z+7	; 0x07
    26d4:	2b 96       	adiw	r28, 0x0b	; 11
    26d6:	e2 e1       	ldi	r30, 0x12	; 18
    26d8:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__epilogue_restores__>
    26dc:	80 37       	cpi	r24, 0x70	; 112
    26de:	49 f0       	breq	.+18     	; 0x26f2 <vfprintf+0x304>
    26e0:	88 37       	cpi	r24, 0x78	; 120
    26e2:	a9 f7       	brne	.-22     	; 0x26ce <vfprintf+0x2e0>
    26e4:	d4 fe       	sbrs	r13, 4
    26e6:	02 c0       	rjmp	.+4      	; 0x26ec <vfprintf+0x2fe>
    26e8:	68 94       	set
    26ea:	d2 f8       	bld	r13, 2
    26ec:	20 e1       	ldi	r18, 0x10	; 16
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	0d c0       	rjmp	.+26     	; 0x270c <vfprintf+0x31e>
    26f2:	68 94       	set
    26f4:	d4 f8       	bld	r13, 4
    26f6:	f6 cf       	rjmp	.-20     	; 0x26e4 <vfprintf+0x2f6>
    26f8:	34 fe       	sbrs	r3, 4
    26fa:	03 c0       	rjmp	.+6      	; 0x2702 <vfprintf+0x314>
    26fc:	82 2f       	mov	r24, r18
    26fe:	86 60       	ori	r24, 0x06	; 6
    2700:	d8 2e       	mov	r13, r24
    2702:	20 e1       	ldi	r18, 0x10	; 16
    2704:	32 e0       	ldi	r19, 0x02	; 2
    2706:	02 c0       	rjmp	.+4      	; 0x270c <vfprintf+0x31e>
    2708:	28 e0       	ldi	r18, 0x08	; 8
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	f8 01       	movw	r30, r16
    270e:	d7 fe       	sbrs	r13, 7
    2710:	0f c0       	rjmp	.+30     	; 0x2730 <vfprintf+0x342>
    2712:	60 81       	ld	r22, Z
    2714:	71 81       	ldd	r23, Z+1	; 0x01
    2716:	82 81       	ldd	r24, Z+2	; 0x02
    2718:	93 81       	ldd	r25, Z+3	; 0x03
    271a:	0c 5f       	subi	r16, 0xFC	; 252
    271c:	1f 4f       	sbci	r17, 0xFF	; 255
    271e:	a5 01       	movw	r20, r10
    2720:	0e 94 17 14 	call	0x282e	; 0x282e <__ultoa_invert>
    2724:	c8 2e       	mov	r12, r24
    2726:	ca 18       	sub	r12, r10
    2728:	3d 2c       	mov	r3, r13
    272a:	e8 94       	clt
    272c:	37 f8       	bld	r3, 7
    272e:	67 cf       	rjmp	.-306    	; 0x25fe <vfprintf+0x210>
    2730:	60 81       	ld	r22, Z
    2732:	71 81       	ldd	r23, Z+1	; 0x01
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	0e 5f       	subi	r16, 0xFE	; 254
    273a:	1f 4f       	sbci	r17, 0xFF	; 255
    273c:	f0 cf       	rjmp	.-32     	; 0x271e <vfprintf+0x330>
    273e:	42 fc       	sbrc	r4, 2
    2740:	02 c0       	rjmp	.+4      	; 0x2746 <vfprintf+0x358>
    2742:	83 94       	inc	r8
    2744:	78 cf       	rjmp	.-272    	; 0x2636 <vfprintf+0x248>
    2746:	83 94       	inc	r8
    2748:	83 94       	inc	r8
    274a:	75 cf       	rjmp	.-278    	; 0x2636 <vfprintf+0x248>
    274c:	84 2d       	mov	r24, r4
    274e:	86 78       	andi	r24, 0x86	; 134
    2750:	09 f4       	brne	.+2      	; 0x2754 <vfprintf+0x366>
    2752:	71 cf       	rjmp	.-286    	; 0x2636 <vfprintf+0x248>
    2754:	f6 cf       	rjmp	.-20     	; 0x2742 <vfprintf+0x354>
    2756:	b7 01       	movw	r22, r14
    2758:	80 e2       	ldi	r24, 0x20	; 32
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	0e 94 e7 13 	call	0x27ce	; 0x27ce <fputc>
    2760:	83 94       	inc	r8
    2762:	82 14       	cp	r8, r2
    2764:	c0 f3       	brcs	.-16     	; 0x2756 <vfprintf+0x368>
    2766:	51 2c       	mov	r5, r1
    2768:	73 cf       	rjmp	.-282    	; 0x2650 <vfprintf+0x262>
    276a:	52 2c       	mov	r5, r2
    276c:	58 18       	sub	r5, r8
    276e:	82 14       	cp	r8, r2
    2770:	08 f4       	brcc	.+2      	; 0x2774 <vfprintf+0x386>
    2772:	6e cf       	rjmp	.-292    	; 0x2650 <vfprintf+0x262>
    2774:	f8 cf       	rjmp	.-16     	; 0x2766 <vfprintf+0x378>
    2776:	84 2d       	mov	r24, r4
    2778:	86 78       	andi	r24, 0x86	; 134
    277a:	09 f4       	brne	.+2      	; 0x277e <vfprintf+0x390>
    277c:	7b cf       	rjmp	.-266    	; 0x2674 <vfprintf+0x286>
    277e:	8b e2       	ldi	r24, 0x2B	; 43
    2780:	41 fe       	sbrs	r4, 1
    2782:	80 e2       	ldi	r24, 0x20	; 32
    2784:	47 fc       	sbrc	r4, 7
    2786:	8d e2       	ldi	r24, 0x2D	; 45
    2788:	b7 01       	movw	r22, r14
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	71 cf       	rjmp	.-286    	; 0x2670 <vfprintf+0x282>
    278e:	b7 01       	movw	r22, r14
    2790:	80 e3       	ldi	r24, 0x30	; 48
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	0e 94 e7 13 	call	0x27ce	; 0x27ce <fputc>
    2798:	9a 94       	dec	r9
    279a:	6c cf       	rjmp	.-296    	; 0x2674 <vfprintf+0x286>
    279c:	8f ef       	ldi	r24, 0xFF	; 255
    279e:	9f ef       	ldi	r25, 0xFF	; 255
    27a0:	99 cf       	rjmp	.-206    	; 0x26d4 <vfprintf+0x2e6>

000027a2 <strnlen_P>:
strnlen_P():
    27a2:	fc 01       	movw	r30, r24
    27a4:	05 90       	lpm	r0, Z+
    27a6:	61 50       	subi	r22, 0x01	; 1
    27a8:	70 40       	sbci	r23, 0x00	; 0
    27aa:	01 10       	cpse	r0, r1
    27ac:	d8 f7       	brcc	.-10     	; 0x27a4 <strnlen_P+0x2>
    27ae:	80 95       	com	r24
    27b0:	90 95       	com	r25
    27b2:	8e 0f       	add	r24, r30
    27b4:	9f 1f       	adc	r25, r31
    27b6:	08 95       	ret

000027b8 <strnlen>:
strnlen():
    27b8:	fc 01       	movw	r30, r24
    27ba:	61 50       	subi	r22, 0x01	; 1
    27bc:	70 40       	sbci	r23, 0x00	; 0
    27be:	01 90       	ld	r0, Z+
    27c0:	01 10       	cpse	r0, r1
    27c2:	d8 f7       	brcc	.-10     	; 0x27ba <strnlen+0x2>
    27c4:	80 95       	com	r24
    27c6:	90 95       	com	r25
    27c8:	8e 0f       	add	r24, r30
    27ca:	9f 1f       	adc	r25, r31
    27cc:	08 95       	ret

000027ce <fputc>:
fputc():
    27ce:	0f 93       	push	r16
    27d0:	1f 93       	push	r17
    27d2:	cf 93       	push	r28
    27d4:	df 93       	push	r29
    27d6:	18 2f       	mov	r17, r24
    27d8:	09 2f       	mov	r16, r25
    27da:	eb 01       	movw	r28, r22
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	81 fd       	sbrc	r24, 1
    27e0:	09 c0       	rjmp	.+18     	; 0x27f4 <fputc+0x26>
    27e2:	1f ef       	ldi	r17, 0xFF	; 255
    27e4:	0f ef       	ldi	r16, 0xFF	; 255
    27e6:	81 2f       	mov	r24, r17
    27e8:	90 2f       	mov	r25, r16
    27ea:	df 91       	pop	r29
    27ec:	cf 91       	pop	r28
    27ee:	1f 91       	pop	r17
    27f0:	0f 91       	pop	r16
    27f2:	08 95       	ret
    27f4:	82 ff       	sbrs	r24, 2
    27f6:	14 c0       	rjmp	.+40     	; 0x2820 <fputc+0x52>
    27f8:	2e 81       	ldd	r18, Y+6	; 0x06
    27fa:	3f 81       	ldd	r19, Y+7	; 0x07
    27fc:	8c 81       	ldd	r24, Y+4	; 0x04
    27fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2800:	28 17       	cp	r18, r24
    2802:	39 07       	cpc	r19, r25
    2804:	3c f4       	brge	.+14     	; 0x2814 <fputc+0x46>
    2806:	e8 81       	ld	r30, Y
    2808:	f9 81       	ldd	r31, Y+1	; 0x01
    280a:	cf 01       	movw	r24, r30
    280c:	01 96       	adiw	r24, 0x01	; 1
    280e:	99 83       	std	Y+1, r25	; 0x01
    2810:	88 83       	st	Y, r24
    2812:	10 83       	st	Z, r17
    2814:	8e 81       	ldd	r24, Y+6	; 0x06
    2816:	9f 81       	ldd	r25, Y+7	; 0x07
    2818:	01 96       	adiw	r24, 0x01	; 1
    281a:	9f 83       	std	Y+7, r25	; 0x07
    281c:	8e 83       	std	Y+6, r24	; 0x06
    281e:	e3 cf       	rjmp	.-58     	; 0x27e6 <fputc+0x18>
    2820:	e8 85       	ldd	r30, Y+8	; 0x08
    2822:	f9 85       	ldd	r31, Y+9	; 0x09
    2824:	81 2f       	mov	r24, r17
    2826:	09 95       	icall
    2828:	89 2b       	or	r24, r25
    282a:	a1 f3       	breq	.-24     	; 0x2814 <fputc+0x46>
    282c:	da cf       	rjmp	.-76     	; 0x27e2 <fputc+0x14>

0000282e <__ultoa_invert>:
__ultoa_invert():
    282e:	fa 01       	movw	r30, r20
    2830:	aa 27       	eor	r26, r26
    2832:	28 30       	cpi	r18, 0x08	; 8
    2834:	51 f1       	breq	.+84     	; 0x288a <__ultoa_invert+0x5c>
    2836:	20 31       	cpi	r18, 0x10	; 16
    2838:	81 f1       	breq	.+96     	; 0x289a <__ultoa_invert+0x6c>
    283a:	e8 94       	clt
    283c:	6f 93       	push	r22
    283e:	6e 7f       	andi	r22, 0xFE	; 254
    2840:	6e 5f       	subi	r22, 0xFE	; 254
    2842:	7f 4f       	sbci	r23, 0xFF	; 255
    2844:	8f 4f       	sbci	r24, 0xFF	; 255
    2846:	9f 4f       	sbci	r25, 0xFF	; 255
    2848:	af 4f       	sbci	r26, 0xFF	; 255
    284a:	b1 e0       	ldi	r27, 0x01	; 1
    284c:	3e d0       	rcall	.+124    	; 0x28ca <__ultoa_invert+0x9c>
    284e:	b4 e0       	ldi	r27, 0x04	; 4
    2850:	3c d0       	rcall	.+120    	; 0x28ca <__ultoa_invert+0x9c>
    2852:	67 0f       	add	r22, r23
    2854:	78 1f       	adc	r23, r24
    2856:	89 1f       	adc	r24, r25
    2858:	9a 1f       	adc	r25, r26
    285a:	a1 1d       	adc	r26, r1
    285c:	68 0f       	add	r22, r24
    285e:	79 1f       	adc	r23, r25
    2860:	8a 1f       	adc	r24, r26
    2862:	91 1d       	adc	r25, r1
    2864:	a1 1d       	adc	r26, r1
    2866:	6a 0f       	add	r22, r26
    2868:	71 1d       	adc	r23, r1
    286a:	81 1d       	adc	r24, r1
    286c:	91 1d       	adc	r25, r1
    286e:	a1 1d       	adc	r26, r1
    2870:	20 d0       	rcall	.+64     	; 0x28b2 <__ultoa_invert+0x84>
    2872:	09 f4       	brne	.+2      	; 0x2876 <__ultoa_invert+0x48>
    2874:	68 94       	set
    2876:	3f 91       	pop	r19
    2878:	2a e0       	ldi	r18, 0x0A	; 10
    287a:	26 9f       	mul	r18, r22
    287c:	11 24       	eor	r1, r1
    287e:	30 19       	sub	r19, r0
    2880:	30 5d       	subi	r19, 0xD0	; 208
    2882:	31 93       	st	Z+, r19
    2884:	de f6       	brtc	.-74     	; 0x283c <__ultoa_invert+0xe>
    2886:	cf 01       	movw	r24, r30
    2888:	08 95       	ret
    288a:	46 2f       	mov	r20, r22
    288c:	47 70       	andi	r20, 0x07	; 7
    288e:	40 5d       	subi	r20, 0xD0	; 208
    2890:	41 93       	st	Z+, r20
    2892:	b3 e0       	ldi	r27, 0x03	; 3
    2894:	0f d0       	rcall	.+30     	; 0x28b4 <__ultoa_invert+0x86>
    2896:	c9 f7       	brne	.-14     	; 0x288a <__ultoa_invert+0x5c>
    2898:	f6 cf       	rjmp	.-20     	; 0x2886 <__ultoa_invert+0x58>
    289a:	46 2f       	mov	r20, r22
    289c:	4f 70       	andi	r20, 0x0F	; 15
    289e:	40 5d       	subi	r20, 0xD0	; 208
    28a0:	4a 33       	cpi	r20, 0x3A	; 58
    28a2:	18 f0       	brcs	.+6      	; 0x28aa <__ultoa_invert+0x7c>
    28a4:	49 5d       	subi	r20, 0xD9	; 217
    28a6:	31 fd       	sbrc	r19, 1
    28a8:	40 52       	subi	r20, 0x20	; 32
    28aa:	41 93       	st	Z+, r20
    28ac:	02 d0       	rcall	.+4      	; 0x28b2 <__ultoa_invert+0x84>
    28ae:	a9 f7       	brne	.-22     	; 0x289a <__ultoa_invert+0x6c>
    28b0:	ea cf       	rjmp	.-44     	; 0x2886 <__ultoa_invert+0x58>
    28b2:	b4 e0       	ldi	r27, 0x04	; 4
    28b4:	a6 95       	lsr	r26
    28b6:	97 95       	ror	r25
    28b8:	87 95       	ror	r24
    28ba:	77 95       	ror	r23
    28bc:	67 95       	ror	r22
    28be:	ba 95       	dec	r27
    28c0:	c9 f7       	brne	.-14     	; 0x28b4 <__ultoa_invert+0x86>
    28c2:	00 97       	sbiw	r24, 0x00	; 0
    28c4:	61 05       	cpc	r22, r1
    28c6:	71 05       	cpc	r23, r1
    28c8:	08 95       	ret
    28ca:	9b 01       	movw	r18, r22
    28cc:	ac 01       	movw	r20, r24
    28ce:	0a 2e       	mov	r0, r26
    28d0:	06 94       	lsr	r0
    28d2:	57 95       	ror	r21
    28d4:	47 95       	ror	r20
    28d6:	37 95       	ror	r19
    28d8:	27 95       	ror	r18
    28da:	ba 95       	dec	r27
    28dc:	c9 f7       	brne	.-14     	; 0x28d0 <__ultoa_invert+0xa2>
    28de:	62 0f       	add	r22, r18
    28e0:	73 1f       	adc	r23, r19
    28e2:	84 1f       	adc	r24, r20
    28e4:	95 1f       	adc	r25, r21
    28e6:	a0 1d       	adc	r26, r0
    28e8:	08 95       	ret

000028ea <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    28ea:	f8 94       	cli

000028ec <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    28ec:	ff cf       	rjmp	.-2      	; 0x28ec <__stop_program>
